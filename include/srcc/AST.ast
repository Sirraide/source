guard SRCC_AST
namespace srcc
context Module

root Expr {
    final Location location
}

// ============================================================================
//  Typed Expressions
// ============================================================================
class TypedExpr : Expr {
    Type type
    $print : [{ " {}", x.type.str(C) }]
}

class BlockExpr : TypedExpr { "Expr*"[] stmts }

class CallExpr : TypedExpr {
    "Expr*"   callee
    "Expr*"[] args
}

class ProcRefExpr : TypedExpr {
    "ProcDecl*" decl
    $print : [{ " {}{}", C(Reset), x.decl->name }]
}

class StrLitExpr : TypedExpr {
    String value
    $print : [{ " {}\"{}\"", C(Yellow), utils::Escape(x.value) }]
}

// ============================================================================
//  Declarations
// ============================================================================
class Decl : TypedExpr { String name }

class ObjectDecl : Decl {
    Linkage linkage
    Mangling mangling
}

class ProcDecl : ObjectDecl {
    /// The parent function, or nullptr if this is *a* top-level function.
    "ProcDecl*" parent
    "Expr*" body
    $factory : [{ $.procs.push_back(this) }]
}

// ============================================================================
//  Types
// ============================================================================
class TypeBase : Expr {
    location = "{}"
}

class SingleElementTypeBase : TypeBase {
    "Type" elem
}

class ArrayType : SingleElementTypeBase {
    i64 size
}

class BuiltinType : TypeBase {
    BuiltinKind kind
}

class IntType : TypeBase {
    i64 bit_width
}

class ProcType : TypeBase {
    CallingConvention cconv
    bool variadic = false
    "Type" return_type
    "Type"[] param_types
}

class ReferenceType : SingleElementTypeBase {}

