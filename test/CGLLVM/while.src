// R %srcc --llvm %s
program test;

// * define private fastcc void @_S12while_simpleFvE() {
// + entry:
// +   %0 = alloca i64, align 8
// +   store i64 0, ptr %0, align 8
// +   br label %bb1
// +
// + bb1:
// +   %1 = load i64, ptr %0, align 8
// +   %2 = icmp slt i64 %1, 10
// +   br i1 %2, label %bb2, label %bb3
// +
// + bb2:
// +   %3 = load i64, ptr %0, align 8
// +   %4 = add i64 %3, 1
// +   store i64 %4, ptr %0, align 8
// +   br label %bb1
// +
// + bb3:
// +   ret void
// + }
proc while_simple {
    int i;
    while i < 10 do i = i +~ 1;
}

// * define private fastcc void @_S12while_nestedFvE() {
// + entry:
// +   %0 = alloca i64, align 8
// +   %1 = alloca i64, align 8
// +   store i64 0, ptr %0, align 8
// +   br label %bb1
// +
// + bb1:
// +   %2 = load i64, ptr %0, align 8
// +   %3 = icmp slt i64 %2, 10
// +   br i1 %3, label %bb2, label %bb6
// +
// + bb2:
// +   store i64 0, ptr %1, align 8
// +   br label %bb3
// +
// + bb3:
// +   %4 = load i64, ptr %1, align 8
// +   %5 = icmp slt i64 %4, 10
// +   br i1 %5, label %bb4, label %bb5
// +
// + bb4:
// +   %6 = load i64, ptr %1, align 8
// +   %7 = add i64 %6, 1
// +   store i64 %7, ptr %1, align 8
// +   br label %bb3
// +
// + bb5:
// +   %8 = load i64, ptr %0, align 8
// +   %9 = add i64 %8, 1
// +   store i64 %9, ptr %0, align 8
// +   br label %bb1
// +
// + bb6:
// +   ret void
// + }
proc while_nested {
    int i;
    while i < 10 do {
        int j;
        while j < 10 do j = j +~ 1;
        i = i +~ 1;
    }
}

// * define private fastcc void @_S14while_infiniteFvE() {
// + entry:
// +   %0 = alloca i64, align 8
// +   store i64 0, ptr %0, align 8
// +   br label %bb1
// +
// + bb1:
// +   br i1 true, label %bb2, label %bb3
// +
// + bb2:
// +   %1 = load i64, ptr %0, align 8
// +   %2 = add i64 %1, 1
// +   store i64 %2, ptr %0, align 8
// +   br label %bb1
// +
// + bb3:
// +   ret void
// + }
proc while_infinite {
    int i;
    while true {
        i = i +~ 1;
    }
}

// * define private fastcc void @_S20while_infinite_emptyFvE() {
// + entry:
// +   br label %bb1
// +
// + bb1:
// +   br i1 true, label %bb2, label %bb3
// +
// + bb2:
// +   br label %bb1
// +
// + bb3:
// +   ret void
// + }
proc while_infinite_empty {
    while true {};
}
