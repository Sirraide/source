// R      %srcc --ir %s
// R[//L] %srcc --llvm %s
program test;

struct x { i64 a; }

var a = x(1);
var b = a;

struct y { i64 a; i64 b; i64 c; }

var c = y(1, 2, 3);
var d = c;

// * proc __src_main {
// +     %0 = x
// +     %1 = x
// +     %2 = y
// +     %3 = y
// +
// + entry:
// +     store i64 to %0, i64 1, align 8
// +     copy %1, %0, int 8
// +     store i64 to %2, i64 1, align 8
// +     %4 = ptradd %2, int 8
// +     store i64 to %4, i64 2, align 8
// +     %5 = ptradd %2, int 16
// +     store i64 to %5, i64 3, align 8
// +     copy %3, %2, int 24
// +     ret
// + }

//L * define fastcc void @__src_main() {
//L + entry:
//L +   %0 = alloca [8 x i8], align 8
//L +   %1 = alloca [8 x i8], align 8
//L +   %2 = alloca [24 x i8], align 8
//L +   %3 = alloca [24 x i8], align 8
//L +   store i64 1, ptr %0, align 8
//L +   call void @llvm.memcpy.p0.p0.i64(ptr align 8 %1, ptr align 8 %0, i64 8, i1 false)
//L +   store i64 1, ptr %2, align 8
//L +   %4 = getelementptr inbounds i8, ptr %2, i64 8
//L +   store i64 2, ptr %4, align 8
//L +   %5 = getelementptr inbounds i8, ptr %2, i64 16
//L +   store i64 3, ptr %5, align 8
//L +   call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %2, i64 24, i1 false)
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
//L + declare void @llvm.memcpy.p0.p0.i64(ptr noalias writeonly captures(none), ptr noalias readonly captures(none), i64, i1 immarg) #1
//L +
//L + attributes #0 = { noreturn nounwind }
//L + attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
