// V      %srcc --sema --verify %s
// R      %srcc --ir -fno-overflow-checks %s
// R[//L] %srcc --llvm -fno-overflow-checks %s
// expected-no-diagnostics
program test;

proc exit extern -> noreturn;
proc sink(int) extern;
proc sink_lv(inout int) extern;

proc a1 { 3 + exit(); }
proc a2 { 3 + __srcc_unreachable(); }
proc a3 { true and __srcc_unreachable(); }
proc a4 { sink(exit()); }
proc a5 { sink_lv(exit()); }

// * proc _S2a1FvE {
// + entry:
// +     call noreturn _S4exitFzE
// +     %0 = add int 3, poison
// +     ret
// + }

// * proc _S2a2FvE {
// + entry:
// +     unreachable
// +
// + bb1:
// +     %0 = add int 3, poison
// +     ret
// + }

// * proc _S2a3FvE {
// + entry:
// +     br true to bb1 else bb3
// +
// + bb1:
// +     unreachable
// +
// + bb2:
// +     br bb4(poison)
// +
// + bb3:
// +     br bb4(false)
// +
// + bb4(bool %0):
// +     ret
// + }

// * proc _S2a4FvE {
// + entry:
// +     call noreturn _S4exitFzE
// +     call void _S4sinkFviE(poison)
// +     ret
// + }

// * proc _S2a5FvE {
// + entry:
// +     call noreturn _S4exitFzE
// +     call void _S7sink_lvFvx2iE(poison)
// +     ret
// + }

//L * define private fastcc void @_S2a1FvE() {
//L + entry:
//L +   call fastcc void @_S4exitFzE()
//L +   ret void
//L + }

//L * define private fastcc void @_S2a2FvE() {
//L + entry:
//L +   unreachable
//L +
//L + bb1:
//L +   ret void
//L + }

//L * define private fastcc void @_S2a3FvE() {
//L + entry:
//L +   br i1 true, label %bb1, label %bb3
//L +
//L + bb1:
//L +   unreachable
//L +
//L + bb2:
//L +   br label %bb4
//L +
//L + bb3:
//L +   br label %bb4
//L +
//L + bb4:
//L +   %0 = phi i1 [ poison, %bb2 ], [ false, %bb3 ]
//L +   ret void
//L + }

//L * define private fastcc void @_S2a4FvE() {
//L + entry:
//L +   call fastcc void @_S4exitFzE()
//L +   call fastcc void @_S4sinkFviE(i64 poison)
//L +   ret void
//L + }

//L * define private fastcc void @_S2a5FvE() {
//L + entry:
//L +   call fastcc void @_S4exitFzE()
//L +   call fastcc void @_S7sink_lvFvx2iE(ptr poison)
//L +   ret void
//L + }
