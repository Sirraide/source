// V %srcc --sema --verify %s
program test;

proc f() = (1,);

struct s {
    int x;
    i8 y;
}

var x = ();
var a = (1, 2, 3);
a[0] = 4;
a[1] = 5;
a[2] = 6;

int j1 = ();
int j2 = (1);
int j3 = (1,);
int j4 = (1, 2); // expected-error: Cannot initialise 'int' from '(int, int)'

i8 x = ();
i8 x = (128);
i8 x = (128 as i8,);

s s1 = ();
s s2 = (1); // expected-error: Cannot initialise 's' from '(int)'
s s3 = (1,); // expected-error: Cannot initialise 's' from '(int)'
s s4 = (1, 2);

int[4] x = (1);
int[4] x = (1,);
int[4] x = (1, 2);
int[4] x = (1, 2);
int[4] x = (1, 2, 3);
int[4] x = (1, 2, 3, 4);
int[4] x = (1, 2, 3, 4, 5); // expected-error: Too many elements in array initialiser for 'int[4]' (elements: 5)

s[3] x = ();
s[3] x = (1); // expected-error: Cannot initialise 's' from '(int)'
s[3] x = (1, 2); // expected-error: Cannot initialise 's' from '(int)'
s[3] x = (s(1, 2));
s[3] x = ((1, 2));
s[3] x = ((1, 2), 1); // expected-error: Cannot initialise 's' from '(int)'
s[3] x = ((1, 2), 1, 2); // expected-error: Cannot initialise 's' from '(int)'
s[3] x = (s(1, 2), s(1, 2));
s[3] x = ((1, 2), (1, 2));

int[2] x = (((1, 2))); // expected-error: Cannot convert expression of type '(int, int)' to 'int'

int x = (1);
int x = (1,);
int x = ((1,));
int x = ((1,),);
int x = ((1),);

int x = f();
int x = (f());
int x = (f(),);
int x = ((f(),));
int x = ((f(),),);
int x = ((((f(),),)));
int x = ((((f(),),)),);

proc f1 {
    var x = (1, 1, 1);
    x[1 + 1] = 1;
    x[1 + 2] = 1; // expected-error: Tuple index 3 is out of bounds for 3-element tuple (int, int, int)
    x[1 - 2] = 1; // expected-error: Tuple index -1 is out of bounds for 3-element tuple (int, int, int)
    x[-2] = 1; // expected-error: Tuple index -2 is out of bounds for 3-element tuple (int, int, int)
}

(int, int, int) x = (1, 2, 3);
(int) x = 1;
(int) x = (1,);
(int,) x = 1;
(int,) x = (1);
(int,) x = (1,);
((int,)) x = (1,);
(((((int))))) x = (1);

(var,) x; // expected-error: Type deduction is not allowed here
(noreturn,) x; // expected-error: 'noreturn' is not allowed here
(incomplete,) x; // expected-error: Cannot declare field of incomplete type 'incomplete'

struct incomplete {

}