// R %srcc --llvm %s
program test;

proc foo(in int a, in int b) {
    assert a == b;
    assert a > 42, "a should be greater than 42";
}

// * @0 = private unnamed_addr constant [44 x i8] c"/home/ae/projects/Source/test/CG/assert.src\00", align 1
// + @1 = private unnamed_addr constant [7 x i8] c"a == b\00", align 1
// + @2 = private unnamed_addr constant [7 x i8] c"a > 42\00", align 1
// + @3 = private unnamed_addr constant [28 x i8] c"a should be greater than 42\00", align 1

// * define private fastcc void @_S3fooFviiE(i64 %0, i64 %1) {
// + entry:
// +   %2 = alloca i64, align 8
// +   %3 = alloca i64, align 8
// +   store i64 %0, ptr %2, align 8
// +   store i64 %1, ptr %3, align 8
// +   %l2sr = load i64, ptr %2, align 8
// +   %l2sr1 = load i64, ptr %3, align 8
// +   %eq = icmp eq i64 %l2sr, %l2sr1
// +   br i1 %eq, label %4, label %5
// +
// + 4:
// +   call void @__src_assert_fail({ ptr, i64 } { ptr @0, i64 43 }, i64 5, i64 5, { ptr, i64 } { ptr @1, i64 6 }, { ptr, i64 } zeroinitializer)
// +   unreachable
// +
// + 5:
// +   %l2sr2 = load i64, ptr %2, align 8
// +   %sgt = icmp sgt i64 %l2sr2, 42
// +   br i1 %sgt, label %6, label %7
// +
// + 6:
// +   call void @__src_assert_fail({ ptr, i64 } { ptr @0, i64 43 }, i64 6, i64 5, { ptr, i64 } { ptr @2, i64 6 }, { ptr, i64 } { ptr @3, i64 27 })
// +   unreachable
// +
// + 7:
// +   ret void
// + }
