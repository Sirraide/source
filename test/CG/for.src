// R %srcc --ir -fno-overflow-checks %s
program test;

proc foo(in int) extern;
proc foo(in i16) extern;
proc foo(in i16, in int) extern;
proc foo(in int, in int, in int, in int) extern;

proc a {
    for i in 1..=3 do i + 3;
}

proc b {
    i16 x;
    for i in x..<x do foo(i);
}

proc c {
    for i in 1..=10 do
        for j in 2..<i do
            foo(j);
}

proc d {
    for enum j, i in 1..=3 do i + j;
}

proc e {
    i16 x;
    for enum j, i in x..<x do foo(i, j);
}

proc f {
    for enum a, i in 1..=10 do
        for enum b, j in 2..<i do
            foo(a, b, i, j);
}

// * proc __src_main {
// + entry:
// +     ret
// + }
// +
// + proc _S3fooFvxiE (in int %0);
// +
// + proc _S3fooFvxI16E (in i16 %0);
// +
// + proc _S3fooFvxI16xiE (in i16 %0, in int %1);
// +
// + proc _S3fooFvxixixixiE (in int %0, in int %1, in int %2, in int %3);
// +
// + proc _S1aFvE {
// + entry:
// +     br bb1(int 1)
// +
// + bb1(int %0):
// +     %1 = icmp slt %0, int 4
// +     br %1 to bb2 else bb3
// +
// + bb2:
// +     %2 = add %0, int 3
// +     %3 = add %0, int 1
// +     br bb1(%3)
// +
// + bb3:
// +     ret
// + }
// +
// + proc _S1bFvE {
// +     %0 = i16
// +
// + entry:
// +     store i16 to %0, nil, align 2
// +     %1 = load i16, %0, align 2
// +     %2 = load i16, %0, align 2
// +     br bb1(%1)
// +
// + bb1(i16 %3):
// +     %4 = icmp slt %3, %2
// +     br %4 to bb2 else bb3
// +
// + bb2:
// +     call void _S3fooFvxI16E(%3)
// +     %5 = add %3, i16 1
// +     br bb1(%5)
// +
// + bb3:
// +     ret
// + }
// +
// + proc _S1cFvE {
// + entry:
// +     br bb1(int 1)
// +
// + bb1(int %0):
// +     %1 = icmp slt %0, int 11
// +     br %1 to bb2 else bb6
// +
// + bb2:
// +     br bb3(int 2)
// +
// + bb3(int %2):
// +     %3 = icmp slt %2, %0
// +     br %3 to bb4 else bb5
// +
// + bb4:
// +     call void _S3fooFvxiE(%2)
// +     %4 = add %2, int 1
// +     br bb3(%4)
// +
// + bb5:
// +     %5 = add %0, int 1
// +     br bb1(%5)
// +
// + bb6:
// +     ret
// + }
// +
// + proc _S1dFvE {
// + entry:
// +     br bb1(int 0, int 1)
// +
// + bb1(int %0, int %1):
// +     %2 = icmp slt %1, int 4
// +     br %2 to bb2 else bb3
// +
// + bb2:
// +     %3 = add %1, %0
// +     %4 = add %0, int 1
// +     %5 = add %1, int 1
// +     br bb1(%4, %5)
// +
// + bb3:
// +     ret
// + }
// +
// + proc _S1eFvE {
// +     %0 = i16
// +
// + entry:
// +     store i16 to %0, nil, align 2
// +     %1 = load i16, %0, align 2
// +     %2 = load i16, %0, align 2
// +     br bb1(int 0, %1)
// +
// + bb1(int %3, i16 %4):
// +     %5 = icmp slt %4, %2
// +     br %5 to bb2 else bb3
// +
// + bb2:
// +     call void _S3fooFvxI16xiE(%4, %3)
// +     %6 = add %3, int 1
// +     %7 = add %4, i16 1
// +     br bb1(%6, %7)
// +
// + bb3:
// +     ret
// + }
// +
// + proc _S1fFvE {
// + entry:
// +     br bb1(int 0, int 1)
// +
// + bb1(int %0, int %1):
// +     %2 = icmp slt %1, int 11
// +     br %2 to bb2 else bb6
// +
// + bb2:
// +     br bb3(int 0, int 2)
// +
// + bb3(int %3, int %4):
// +     %5 = icmp slt %4, %1
// +     br %5 to bb4 else bb5
// +
// + bb4:
// +     call void _S3fooFvxixixixiE(%0, %3, %1, %4)
// +     %6 = add %3, int 1
// +     %7 = add %4, int 1
// +     br bb3(%6, %7)
// +
// + bb5:
// +     %8 = add %0, int 1
// +     %9 = add %1, int 1
// +     br bb1(%8, %9)
// +
// + bb6:
// +     ret
// + }
