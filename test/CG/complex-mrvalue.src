// R      %srcc --ir %s
// R[//L] %srcc --llvm %s
program test;

struct s { i64 x; }

proc a -> s {
    var x = {{{ s(1); }}};
    return {{{ s(1); }}};
}

proc b (in bool x) -> s {
    var y = if x then s(1) else s(2);
    return if x then s(1) else s(2);
}

proc c (in bool x) -> s {
    var y = if x then s(1) else a();
    return if x then s(2) else a();
}

proc d (in bool x) {
    s a = s(1);
    s b = a;
    s c = if x then a else b;
    s d = if x then s(1) else b;
    s e = if x then a else s(1);
}

// * proc __src_assert_fail (ptr) external fastcc;
// +
// + proc __src_int_arith_error (ptr) external fastcc;
// +
// + proc __src_main external fastcc {
// + entry:
// +     ret
// + }
// +
// + proc _S1aFT1sE indirect private fastcc {
// +     #0 = 8, align 8
// +
// + entry:
// +     store #0, i64 1, align 8
// +     store retptr, i64 1, align 8
// +     ret
// + }
// +
// + proc _S1bFT1sxbE (i1 %0) indirect private fastcc {
// +     #0 = 8, align 8
// +
// + entry:
// +     br %0 to bb1 else bb2
// +
// + bb1:
// +     store #0, i64 1, align 8
// +     br bb3
// +
// + bb2:
// +     store #0, i64 2, align 8
// +     br bb3
// +
// + bb3:
// +     br %0 to bb4 else bb5
// +
// + bb4:
// +     store retptr, i64 1, align 8
// +     br bb6
// +
// + bb5:
// +     store retptr, i64 2, align 8
// +     br bb6
// +
// + bb6:
// +     ret
// + }
// +
// + proc _S1cFT1sxbE (i1 %0) indirect private fastcc {
// +     #0 = 8, align 8
// +
// + entry:
// +     br %0 to bb1 else bb2
// +
// + bb1:
// +     store #0, i64 1, align 8
// +     br bb3
// +
// + bb2:
// +     call fastcc void _S1aFT1sE() into #0
// +     br bb3
// +
// + bb3:
// +     br %0 to bb4 else bb5
// +
// + bb4:
// +     store retptr, i64 2, align 8
// +     br bb6
// +
// + bb5:
// +     call fastcc void _S1aFT1sE() into retptr
// +     br bb6
// +
// + bb6:
// +     ret
// + }
// +
// + proc _S1dFvxbE (i1 %0) private fastcc {
// +     #0 = 8, align 8
// +     #1 = 8, align 8
// +     #2 = 8, align 8
// +     #3 = 8, align 8
// +     #4 = 8, align 8
// +
// + entry:
// +     store #0, i64 1, align 8
// +     copy #1, #0, 8
// +     %1 = select %0, ptr #0, #1
// +     copy #2, %1, 8
// +     br %0 to bb1 else bb2
// +
// + bb1:
// +     store #3, i64 1, align 8
// +     br bb3
// +
// + bb2:
// +     copy #3, #1, 8
// +     br bb3
// +
// + bb3:
// +     br %0 to bb4 else bb5
// +
// + bb4:
// +     copy #4, #0, 8
// +     br bb6
// +
// + bb5:
// +     store #4, i64 1, align 8
// +     br bb6
// +
// + bb6:
// +     ret
// + }

//L * ; ModuleID = 'test'
//L + source_filename = "test"
//L + target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
//L + target triple = "x86_64-unknown-linux-gnu"
//L +
//L + declare fastcc void @__src_assert_fail(ptr)
//L +
//L + declare fastcc void @__src_int_arith_error(ptr)
//L +
//L + define fastcc void @__src_main() {
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S1aFT1sE(ptr %0) {
//L +   %2 = alloca i8, i64 8, align 8
//L +   store i64 1, ptr %2, align 8
//L +   store i64 1, ptr %0, align 8
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S1bFT1sxbE(ptr %0, i1 %1) {
//L +   %3 = alloca i8, i64 8, align 8
//L +   br i1 %1, label %4, label %5
//L +
//L + 4:                                                ; preds = %2
//L +   store i64 1, ptr %3, align 8
//L +   br label %6
//L +
//L + 5:                                                ; preds = %2
//L +   store i64 2, ptr %3, align 8
//L +   br label %6
//L +
//L + 6:                                                ; preds = %4, %5
//L +   br i1 %1, label %7, label %8
//L +
//L + 7:                                                ; preds = %6
//L +   store i64 1, ptr %0, align 8
//L +   br label %9
//L +
//L + 8:                                                ; preds = %6
//L +   store i64 2, ptr %0, align 8
//L +   br label %9
//L +
//L + 9:                                                ; preds = %7, %8
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S1cFT1sxbE(ptr %0, i1 %1) {
//L +   %3 = alloca i8, i64 8, align 8
//L +   br i1 %1, label %4, label %5
//L +
//L + 4:                                                ; preds = %2
//L +   store i64 1, ptr %3, align 8
//L +   br label %6
//L +
//L + 5:                                                ; preds = %2
//L +   call fastcc void @_S1aFT1sE(ptr %3)
//L +   br label %6
//L +
//L + 6:                                                ; preds = %4, %5
//L +   br i1 %1, label %7, label %8
//L +
//L + 7:                                                ; preds = %6
//L +   store i64 2, ptr %0, align 8
//L +   br label %9
//L +
//L + 8:                                                ; preds = %6
//L +   call fastcc void @_S1aFT1sE(ptr %0)
//L +   br label %9
//L +
//L + 9:                                                ; preds = %7, %8
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S1dFvxbE(i1 %0) {
//L +   %2 = alloca i8, i64 8, align 8
//L +   %3 = alloca i8, i64 8, align 8
//L +   %4 = alloca i8, i64 8, align 8
//L +   %5 = alloca i8, i64 8, align 8
//L +   %6 = alloca i8, i64 8, align 8
//L +   store i64 1, ptr %2, align 8
//L +   call void @llvm.memcpy.p0.p0.i64(ptr %3, ptr %2, i64 8, i1 false)
//L +   %7 = select i1 %0, ptr %2, ptr %3
//L +   call void @llvm.memcpy.p0.p0.i64(ptr %4, ptr %7, i64 8, i1 false)
//L +   br i1 %0, label %8, label %9
//L +
//L + 8:                                                ; preds = %1
//L +   store i64 1, ptr %5, align 8
//L +   br label %10
//L +
//L + 9:                                                ; preds = %1
//L +   call void @llvm.memcpy.p0.p0.i64(ptr %5, ptr %3, i64 8, i1 false)
//L +   br label %10
//L +
//L + 10:                                               ; preds = %8, %9
//L +   br i1 %0, label %11, label %12
//L +
//L + 11:                                               ; preds = %10
//L +   call void @llvm.memcpy.p0.p0.i64(ptr %6, ptr %2, i64 8, i1 false)
//L +   br label %13
//L +
//L + 12:                                               ; preds = %10
//L +   store i64 1, ptr %6, align 8
//L +   br label %13
//L +
//L + 13:                                               ; preds = %11, %12
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
//L + declare void @llvm.memcpy.p0.p0.i64(ptr noalias writeonly captures(none), ptr noalias readonly captures(none), i64, i1 immarg) #0
//L +
//L + attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
//L +
//L + !llvm.module.flags = !{!0}
//L +
//L + !0 = !{i32 2, !"Debug Info Version", i32 3}
