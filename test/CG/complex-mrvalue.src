// R      %srcc --ir %s
// R[//L] %srcc --llvm %s
program test;

struct s { i64 x; }

proc a -> s {
    var x = {{{ s(1) }}};
    return {{{ s(1); }}};
}

proc b (in bool x) -> s {
    var y = if x then s(1) else s(2);
    return if x then s(1) else s(2);
}

proc c (in bool x) -> s {
    var y = if x then s(1) else a();
    return if x then s(2) else a();
}

proc d (in bool x) {
    s a = s(1);
    s b = a;
    s c = if x then a else b;
    s d = if x then s(1) else b;
    s e = if x then a else s(1);
}

// * proc __src_main {
// + entry:
// +     ret
// + }
// +
// + proc _S1aFT1sE (in s^ %0) {
// +     %1 = s
// +
// + entry:
// +     store i64 to %1, i64 1, align 8
// +     store i64 to %0, i64 1, align 8
// +     ret
// + }
// +
// + proc _S1bFT1sxbE (in s^ %0, in bool %1) {
// +     %2 = s
// +
// + entry:
// +     br %1 to bb1 else bb2
// +
// + bb1:
// +     store i64 to %2, i64 1, align 8
// +     br bb3
// +
// + bb2:
// +     store i64 to %2, i64 2, align 8
// +     br bb3
// +
// + bb3:
// +     br %1 to bb4 else bb5
// +
// + bb4:
// +     store i64 to %0, i64 1, align 8
// +     br bb6
// +
// + bb5:
// +     store i64 to %0, i64 2, align 8
// +     br bb6
// +
// + bb6:
// +     ret
// + }
// +
// + proc _S1cFT1sxbE (in s^ %0, in bool %1) {
// +     %2 = s
// +
// + entry:
// +     br %1 to bb1 else bb2
// +
// + bb1:
// +     store i64 to %2, i64 1, align 8
// +     br bb3
// +
// + bb2:
// +     call void _S1aFT1sE(%2)
// +     br bb3
// +
// + bb3:
// +     br %1 to bb4 else bb5
// +
// + bb4:
// +     store i64 to %0, i64 2, align 8
// +     br bb6
// +
// + bb5:
// +     call void _S1aFT1sE(%0)
// +     br bb6
// +
// + bb6:
// +     ret
// + }
// +
// + proc _S1dFvxbE (in bool %0) {
// +     %1 = s
// +     %2 = s
// +     %3 = s
// +     %4 = s
// +     %5 = s
// +
// + entry:
// +     store i64 to %1, i64 1, align 8
// +     copy %2, %1, int 8
// +     br %0 to bb1 else bb2
// +
// + bb1:
// +     br bb3(%1)
// +
// + bb2:
// +     br bb3(%2)
// +
// + bb3(s^ %6):
// +     copy %3, %6, int 8
// +     br %0 to bb4 else bb5
// +
// + bb4:
// +     store i64 to %4, i64 1, align 8
// +     br bb6
// +
// + bb5:
// +     copy %4, %2, int 8
// +     br bb6
// +
// + bb6:
// +     br %0 to bb7 else bb8
// +
// + bb7:
// +     copy %5, %1, int 8
// +     br bb9
// +
// + bb8:
// +     store i64 to %5, i64 1, align 8
// +     br bb9
// +
// + bb9:
// +     ret
// + }

//L * ; Function Attrs: noreturn nounwind
//L + declare fastcc void @__src_assert_fail({ ptr, i64 }, i64, i64, { ptr, i64 }, { ptr, i64 }) #0
//L +
//L + ; Function Attrs: noreturn nounwind
//L + declare fastcc void @__src_int_arith_error({ ptr, i64 }, i64, i64, { ptr, i64 }, { ptr, i64 }) #0
//L +
//L + define fastcc void @__src_main() {
//L + entry:
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S1aFT1sE(ptr dead_on_unwind noalias writable sret([8 x i8]) align 8 captures(none) %0) {
//L + entry:
//L +   %1 = alloca [8 x i8], align 8
//L +   store i64 1, ptr %1, align 8
//L +   store i64 1, ptr %0, align 8
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S1bFT1sxbE(ptr dead_on_unwind noalias writable sret([8 x i8]) align 8 captures(none) %0, i1 %1) {
//L + entry:
//L +   %2 = alloca [8 x i8], align 8
//L +   br i1 %1, label %bb1, label %bb2
//L +
//L + bb1:                                              ; preds = %entry
//L +   store i64 1, ptr %2, align 8
//L +   br label %bb3
//L +
//L + bb2:                                              ; preds = %entry
//L +   store i64 2, ptr %2, align 8
//L +   br label %bb3
//L +
//L + bb3:                                              ; preds = %bb2, %bb1
//L +   br i1 %1, label %bb4, label %bb5
//L +
//L + bb4:                                              ; preds = %bb3
//L +   store i64 1, ptr %0, align 8
//L +   br label %bb6
//L +
//L + bb5:                                              ; preds = %bb3
//L +   store i64 2, ptr %0, align 8
//L +   br label %bb6
//L +
//L + bb6:                                              ; preds = %bb5, %bb4
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S1cFT1sxbE(ptr dead_on_unwind noalias writable sret([8 x i8]) align 8 captures(none) %0, i1 %1) {
//L + entry:
//L +   %2 = alloca [8 x i8], align 8
//L +   br i1 %1, label %bb1, label %bb2
//L +
//L + bb1:                                              ; preds = %entry
//L +   store i64 1, ptr %2, align 8
//L +   br label %bb3
//L +
//L + bb2:                                              ; preds = %entry
//L +   call fastcc void @_S1aFT1sE(ptr %2)
//L +   br label %bb3
//L +
//L + bb3:                                              ; preds = %bb2, %bb1
//L +   br i1 %1, label %bb4, label %bb5
//L +
//L + bb4:                                              ; preds = %bb3
//L +   store i64 2, ptr %0, align 8
//L +   br label %bb6
//L +
//L + bb5:                                              ; preds = %bb3
//L +   call fastcc void @_S1aFT1sE(ptr %0)
//L +   br label %bb6
//L +
//L + bb6:                                              ; preds = %bb5, %bb4
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S1dFvxbE(i1 %0) {
//L + entry:
//L +   %1 = alloca [8 x i8], align 8
//L +   %2 = alloca [8 x i8], align 8
//L +   %3 = alloca [8 x i8], align 8
//L +   %4 = alloca [8 x i8], align 8
//L +   %5 = alloca [8 x i8], align 8
//L +   store i64 1, ptr %1, align 8
//L +   call void @llvm.memcpy.p0.p0.i64(ptr align 8 %2, ptr align 8 %1, i64 8, i1 false)
//L +   br i1 %0, label %bb1, label %bb2
//L +
//L + bb1:                                              ; preds = %entry
//L +   br label %bb3
//L +
//L + bb2:                                              ; preds = %entry
//L +   br label %bb3
//L +
//L + bb3:                                              ; preds = %bb2, %bb1
//L +   %6 = phi ptr [ %1, %bb1 ], [ %2, %bb2 ]
//L +   call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %6, i64 8, i1 false)
//L +   br i1 %0, label %bb4, label %bb5
//L +
//L + bb4:                                              ; preds = %bb3
//L +   store i64 1, ptr %4, align 8
//L +   br label %bb6
//L +
//L + bb5:                                              ; preds = %bb3
//L +   call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %2, i64 8, i1 false)
//L +   br label %bb6
//L +
//L + bb6:                                              ; preds = %bb5, %bb4
//L +   br i1 %0, label %bb7, label %bb8
//L +
//L + bb7:                                              ; preds = %bb6
//L +   call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %1, i64 8, i1 false)
//L +   br label %bb9
//L +
//L + bb8:                                              ; preds = %bb6
//L +   store i64 1, ptr %5, align 8
//L +   br label %bb9
//L +
//L + bb9:                                              ; preds = %bb8, %bb7
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
//L + declare void @llvm.memcpy.p0.p0.i64(ptr noalias writeonly captures(none), ptr noalias readonly captures(none), i64, i1 immarg) #1
//L +
//L + attributes #0 = { noreturn nounwind }
//L + attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
