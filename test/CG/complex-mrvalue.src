// R      %srcc --ir %s
// R[//L] %srcc --llvm %s
program test;

struct s { i64 x; }

proc a -> s {
    var x = {{{ s(1); }}};
    return {{{ s(1); }}};
}

proc b (in bool x) -> s {
    var y = if x then s(1) else s(2);
    return if x then s(1) else s(2);
}

proc c (in bool x) -> s {
    var y = if x then s(1) else a();
    return if x then s(2) else a();
}

proc d (in bool x) {
    s a = s(1);
    s b = a;
    s c = if x then a else b;
    s d = if x then s(1) else b;
    s e = if x then a else s(1);
}

// * proc __src_assert_fail (ptr) external fastcc;
// +
// + proc __src_int_arith_error (ptr) external fastcc;
// +
// + proc __src_main external fastcc {
// + entry:
// +     ret
// + }
// +
// + proc _S1aFT1sE private fastcc -> i64 {
// +     #0 = 8, align 8
// +     #1 = 8, align 8
// +
// + entry:
// +     store #0, i64 1, align 8
// +     store #1, i64 1, align 8
// +     %0 = load i64, #1, align 8
// +     ret i64 %0
// + }
// +
// + proc _S1bFT1sxbE (i1 %0 zeroext) private fastcc -> i64 {
// +     #0 = 1, align 1
// +     #1 = 8, align 8
// +     #2 = 8, align 8
// +
// + entry:
// +     %1 = sext i1 %0 to i8
// +     store #0, i8 %1, align 1
// +     %2 = load i8, #0, align 1
// +     %3 = trunc i8 %2 to i1
// +     br %3 to bb1 else bb2
// +
// + bb1:
// +     store #1, i64 1, align 8
// +     br bb3
// +
// + bb2:
// +     store #1, i64 2, align 8
// +     br bb3
// +
// + bb3:
// +     %4 = load i8, #0, align 1
// +     %5 = trunc i8 %4 to i1
// +     br %5 to bb4 else bb5
// +
// + bb4:
// +     store #2, i64 1, align 8
// +     br bb6
// +
// + bb5:
// +     store #2, i64 2, align 8
// +     br bb6
// +
// + bb6:
// +     %6 = load i64, #2, align 8
// +     ret i64 %6
// + }
// +
// + proc _S1cFT1sxbE (i1 %0 zeroext) private fastcc -> i64 {
// +     #0 = 1, align 1
// +     #1 = 8, align 8
// +     #2 = 8, align 8
// +
// + entry:
// +     %1 = sext i1 %0 to i8
// +     store #0, i8 %1, align 1
// +     %2 = load i8, #0, align 1
// +     %3 = trunc i8 %2 to i1
// +     br %3 to bb1 else bb2
// +
// + bb1:
// +     store #1, i64 1, align 8
// +     br bb3
// +
// + bb2:
// +     %4 = call fastcc i64 _S1aFT1sE
// +     store #1, i64 %4, align 8
// +     br bb3
// +
// + bb3:
// +     %5 = load i8, #0, align 1
// +     %6 = trunc i8 %5 to i1
// +     br %6 to bb4 else bb5
// +
// + bb4:
// +     store #2, i64 2, align 8
// +     br bb6
// +
// + bb5:
// +     %7 = call fastcc i64 _S1aFT1sE
// +     store #2, i64 %7, align 8
// +     br bb6
// +
// + bb6:
// +     %8 = load i64, #2, align 8
// +     ret i64 %8
// + }
// +
// + proc _S1dFvxbE (i1 %0 zeroext) private fastcc {
// +     #0 = 1, align 1
// +     #1 = 8, align 8
// +     #2 = 8, align 8
// +     #3 = 8, align 8
// +     #4 = 8, align 8
// +     #5 = 8, align 8
// +     #6 = 8, align 8
// +     #7 = 8, align 8
// +
// + entry:
// +     %1 = sext i1 %0 to i8
// +     store #0, i8 %1, align 1
// +     store #1, i64 1, align 8
// +     copy #2 <- #1, 8
// +     %2 = load i8, #0, align 1
// +     %3 = trunc i8 %2 to i1
// +     %4 = select %3, ptr #1, #2
// +     copy #3 <- %4, 8
// +     %5 = load i8, #0, align 1
// +     %6 = trunc i8 %5 to i1
// +     br %6 to bb1 else bb2(#2)
// +
// + bb1:
// +     store #6, i64 1, align 8
// +     br bb2(#6)
// +
// + bb2(ptr %7):
// +     copy #4 <- %7, 8
// +     %8 = load i8, #0, align 1
// +     %9 = trunc i8 %8 to i1
// +     br %9 to bb4(#1) else bb3
// +
// + bb3:
// +     store #7, i64 1, align 8
// +     br bb4(#7)
// +
// + bb4(ptr %10):
// +     copy #5 <- %10, 8
// +     ret
// + }

//L * ; ModuleID = 'test'
//L + source_filename = "test"
//L + target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
//L + target triple = "x86_64-unknown-linux-gnu"
//L +
//L + declare fastcc void @__src_assert_fail(ptr)
//L +
//L + declare fastcc void @__src_int_arith_error(ptr)
//L +
//L + define fastcc void @__src_main() {
//L +   ret void
//L + }
//L +
//L + define private fastcc i64 @_S1aFT1sE() {
//L +   %1 = alloca i8, i64 8, align 8
//L +   %2 = alloca i8, i64 8, align 8
//L +   store i64 1, ptr %1, align 8
//L +   store i64 1, ptr %2, align 8
//L +   %3 = load i64, ptr %2, align 8
//L +   ret i64 %3
//L + }
//L +
//L + define private fastcc i64 @_S1bFT1sxbE(i1 zeroext %0) {
//L +   %2 = alloca i8, i64 1, align 1
//L +   %3 = alloca i8, i64 8, align 8
//L +   %4 = alloca i8, i64 8, align 8
//L +   %5 = sext i1 %0 to i8
//L +   store i8 %5, ptr %2, align 1
//L +   %6 = load i8, ptr %2, align 1
//L +   %7 = trunc i8 %6 to i1
//L +   br i1 %7, label %8, label %9
//L +
//L + 8:                                                ; preds = %1
//L +   store i64 1, ptr %3, align 8
//L +   br label %10
//L +
//L + 9:                                                ; preds = %1
//L +   store i64 2, ptr %3, align 8
//L +   br label %10
//L +
//L + 10:                                               ; preds = %8, %9
//L +   %11 = load i8, ptr %2, align 1
//L +   %12 = trunc i8 %11 to i1
//L +   br i1 %12, label %13, label %14
//L +
//L + 13:                                               ; preds = %10
//L +   store i64 1, ptr %4, align 8
//L +   br label %15
//L +
//L + 14:                                               ; preds = %10
//L +   store i64 2, ptr %4, align 8
//L +   br label %15
//L +
//L + 15:                                               ; preds = %13, %14
//L +   %16 = load i64, ptr %4, align 8
//L +   ret i64 %16
//L + }
//L +
//L + define private fastcc i64 @_S1cFT1sxbE(i1 zeroext %0) {
//L +   %2 = alloca i8, i64 1, align 1
//L +   %3 = alloca i8, i64 8, align 8
//L +   %4 = alloca i8, i64 8, align 8
//L +   %5 = sext i1 %0 to i8
//L +   store i8 %5, ptr %2, align 1
//L +   %6 = load i8, ptr %2, align 1
//L +   %7 = trunc i8 %6 to i1
//L +   br i1 %7, label %8, label %9
//L +
//L + 8:                                                ; preds = %1
//L +   store i64 1, ptr %3, align 8
//L +   br label %11
//L +
//L + 9:                                                ; preds = %1
//L +   %10 = call fastcc i64 @_S1aFT1sE()
//L +   store i64 %10, ptr %3, align 8
//L +   br label %11
//L +
//L + 11:                                               ; preds = %8, %9
//L +   %12 = load i8, ptr %2, align 1
//L +   %13 = trunc i8 %12 to i1
//L +   br i1 %13, label %14, label %15
//L +
//L + 14:                                               ; preds = %11
//L +   store i64 2, ptr %4, align 8
//L +   br label %17
//L +
//L + 15:                                               ; preds = %11
//L +   %16 = call fastcc i64 @_S1aFT1sE()
//L +   store i64 %16, ptr %4, align 8
//L +   br label %17
//L +
//L + 17:                                               ; preds = %14, %15
//L +   %18 = load i64, ptr %4, align 8
//L +   ret i64 %18
//L + }
//L +
//L + define private fastcc void @_S1dFvxbE(i1 zeroext %0) {
//L +   %2 = alloca i8, i64 1, align 1
//L +   %3 = alloca i8, i64 8, align 8
//L +   %4 = alloca i8, i64 8, align 8
//L +   %5 = alloca i8, i64 8, align 8
//L +   %6 = alloca i8, i64 8, align 8
//L +   %7 = alloca i8, i64 8, align 8
//L +   %8 = alloca i8, i64 8, align 8
//L +   %9 = alloca i8, i64 8, align 8
//L +   %10 = sext i1 %0 to i8
//L +   store i8 %10, ptr %2, align 1
//L +   store i64 1, ptr %3, align 8
//L +   call void @llvm.memcpy.p0.p0.i64(ptr %4, ptr %3, i64 8, i1 false)
//L +   %11 = load i8, ptr %2, align 1
//L +   %12 = trunc i8 %11 to i1
//L +   %13 = select i1 %12, ptr %3, ptr %4
//L +   call void @llvm.memcpy.p0.p0.i64(ptr %5, ptr %13, i64 8, i1 false)
//L +   %14 = load i8, ptr %2, align 1
//L +   %15 = trunc i8 %14 to i1
//L +   br i1 %15, label %16, label %17
//L +
//L + 16:                                               ; preds = %1
//L +   store i64 1, ptr %8, align 8
//L +   br label %17
//L +
//L + 17:                                               ; preds = %16, %1
//L +   %18 = phi ptr [ %8, %16 ], [ %4, %1 ]
//L +   call void @llvm.memcpy.p0.p0.i64(ptr %6, ptr %18, i64 8, i1 false)
//L +   %19 = load i8, ptr %2, align 1
//L +   %20 = trunc i8 %19 to i1
//L +   br i1 %20, label %22, label %21
//L +
//L + 21:                                               ; preds = %17
//L +   store i64 1, ptr %9, align 8
//L +   br label %22
//L +
//L + 22:                                               ; preds = %21, %17
//L +   %23 = phi ptr [ %9, %21 ], [ %3, %17 ]
//L +   call void @llvm.memcpy.p0.p0.i64(ptr %7, ptr %23, i64 8, i1 false)
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
//L + declare void @llvm.memcpy.p0.p0.i64(ptr noalias writeonly captures(none), ptr noalias readonly captures(none), i64, i1 immarg) #0
//L +
//L + attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
//L +
//L + !llvm.module.flags = !{!0}
//L +
//L + !0 = !{i32 2, !"Debug Info Version", i32 3}
