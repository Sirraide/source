// R      %srcc --ir %s
// R[//L] %srcc --llvm %s
program test;

proc f1 {
    var x = match true {
        true: 1;
        false: 2;
    };
}

proc f2 {
    var x = match false {
        true: 3;
        false: 4;
    };
}

proc f3 {
    var z = match true {
        true: 1;
        true: 2;
        false: 3;
    };
}

proc f4(bool a, bool b) -> int {
    return match a {
        b: 0;
        true: 1;
        false: 2;
    };
}

proc f5() {
    int x;
    int y;
    int^ z = &match true {
        true: x;
        false: y;
    };
    ^z = 42;
}

proc f6() {
    int x = match true {
        _: 5;
    };
}

proc f7() {
    int x = match true {
        _: 5;
        true: "unreachable";
    };
}

proc f8(bool b) {
    int x = match b {
        true: 7;
        _: 5;
    };
}

proc f9(int i) -> int {
    return match i {
        1..=10: 1;
        _: 2;
    };
}

proc f10(int i) -> int {
    return match i {
        1..=10: 1;
        11..=20: 2;
        21..=30: 3;
        _: 4;
    };
}

proc f11(int i) -> int {
    return match i {
        int.min..<int.max: 1;
        _: 2;
    };
}

proc f12(int i) -> int {
    return match i {
        int.min..<int.max: 1;
        _: 1;
    };
}

// * proc __src_assert_fail (ptr) external fastcc;
// +
// + proc __src_int_arith_error (ptr) external fastcc;
// +
// + proc __src_main external fastcc {
// + entry:
// +     ret
// + }
// +
// + proc _S2f1FvE private fastcc {
// +     #0 = 8, align 8
// +     #1 = 1, align 1
// +
// + entry:
// +     %0 = load i8, #1, align 1
// +     %1 = trunc i8 %0 to i1
// +     br %1 to bb3(1) else bb1
// +
// + bb1:
// +     %2 = load i8, #1, align 1
// +     %3 = trunc i8 %2 to i1
// +     %4 = icmp eq i1 %3, false
// +     br %4 to bb3(2) else bb2
// +
// + bb2:
// +     unreachable
// +
// + bb3(i64 %5):
// +     store #0, i64 %5, align 8
// +     ret
// + }
// +
// + proc _S2f2FvE private fastcc {
// +     #0 = 8, align 8
// +     #1 = 1, align 1
// +
// + entry:
// +     %0 = load i8, #1, align 1
// +     %1 = trunc i8 %0 to i1
// +     br %1 to bb3(3) else bb1
// +
// + bb1:
// +     %2 = load i8, #1, align 1
// +     %3 = trunc i8 %2 to i1
// +     %4 = icmp eq i1 %3, false
// +     br %4 to bb3(4) else bb2
// +
// + bb2:
// +     unreachable
// +
// + bb3(i64 %5):
// +     store #0, i64 %5, align 8
// +     ret
// + }
// +
// + proc _S2f3FvE private fastcc {
// +     #0 = 8, align 8
// +     #1 = 1, align 1
// +
// + entry:
// +     %0 = load i8, #1, align 1
// +     %1 = trunc i8 %0 to i1
// +     br %1 to bb3(1) else bb1
// +
// + bb1:
// +     %2 = load i8, #1, align 1
// +     %3 = trunc i8 %2 to i1
// +     %4 = icmp eq i1 %3, false
// +     br %4 to bb3(3) else bb2
// +
// + bb2:
// +     unreachable
// +
// + bb3(i64 %5):
// +     store #0, i64 %5, align 8
// +     ret
// + }
// +
// + proc _S2f4FibbE (i1 %0 zeroext, i1 %1 zeroext) private fastcc -> i64 {
// +     #0 = 1, align 1
// +     #1 = 1, align 1
// +
// + entry:
// +     %2 = sext i1 %0 to i8
// +     store #0, i8 %2, align 1
// +     %3 = sext i1 %1 to i8
// +     store #1, i8 %3, align 1
// +     %4 = load i8, #0, align 1
// +     %5 = trunc i8 %4 to i1
// +     %6 = load i8, #1, align 1
// +     %7 = trunc i8 %6 to i1
// +     %8 = icmp eq i1 %5, %7
// +     br %8 to bb4(0) else bb1
// +
// + bb1:
// +     %9 = load i8, #0, align 1
// +     %10 = trunc i8 %9 to i1
// +     br %10 to bb4(1) else bb2
// +
// + bb2:
// +     %11 = load i8, #0, align 1
// +     %12 = trunc i8 %11 to i1
// +     %13 = icmp eq i1 %12, false
// +     br %13 to bb4(2) else bb3
// +
// + bb3:
// +     unreachable
// +
// + bb4(i64 %14):
// +     ret i64 %14
// + }
// +
// + proc _S2f5FvE private fastcc {
// +     #0 = 8, align 8
// +     #1 = 8, align 8
// +     #2 = 8, align 8
// +     #3 = 1, align 1
// +
// + entry:
// +     store #0, i64 0, align 8
// +     store #1, i64 0, align 8
// +     %0 = load i8, #3, align 1
// +     %1 = trunc i8 %0 to i1
// +     br %1 to bb3(#0) else bb1
// +
// + bb1:
// +     %2 = load i8, #3, align 1
// +     %3 = trunc i8 %2 to i1
// +     %4 = icmp eq i1 %3, false
// +     br %4 to bb3(#1) else bb2
// +
// + bb2:
// +     unreachable
// +
// + bb3(ptr %5):
// +     store #2, ptr %5, align 8
// +     %6 = load ptr, #2, align 8
// +     store %6, i64 42, align 8
// +     ret
// + }
// +
// + proc _S2f6FvE private fastcc {
// +     #0 = 8, align 8
// +
// + entry:
// +     store #0, i64 5, align 8
// +     ret
// + }
// +
// + proc _S2f7FvE private fastcc {
// +     #0 = 8, align 8
// +
// + entry:
// +     store #0, i64 5, align 8
// +     ret
// + }
// +
// + proc _S2f8FvbE (i1 %0 zeroext) private fastcc {
// +     #0 = 1, align 1
// +     #1 = 8, align 8
// +
// + entry:
// +     %1 = sext i1 %0 to i8
// +     store #0, i8 %1, align 1
// +     %2 = load i8, #0, align 1
// +     %3 = trunc i8 %2 to i1
// +     %4 = select %3, i64 7, 5
// +     store #1, i64 %4, align 8
// +     ret
// + }
// +
// + proc _S2f9FiiE (i64 %0) private fastcc -> i64 {
// +     #0 = 8, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     %1 = load i64, #0, align 8
// +     %2 = icmp sge i64 %1, 1
// +     %3 = icmp sle i64 %1, 11
// +     %4 = and i1 %2, %3
// +     %5 = select %4, i64 1, 2
// +     ret i64 %5
// + }
// +
// + proc _S3f10FiiE (i64 %0) private fastcc -> i64 {
// +     #0 = 8, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     %1 = load i64, #0, align 8
// +     %2 = icmp sge i64 %1, 1
// +     %3 = icmp sle i64 %1, 11
// +     %4 = and i1 %2, %3
// +     br %4 to bb3(1) else bb1
// +
// + bb1:
// +     %5 = load i64, #0, align 8
// +     %6 = icmp sge i64 %5, 11
// +     %7 = icmp sle i64 %5, 21
// +     %8 = and i1 %6, %7
// +     br %8 to bb3(2) else bb2
// +
// + bb2:
// +     %9 = load i64, #0, align 8
// +     %10 = icmp sge i64 %9, 21
// +     %11 = icmp sle i64 %9, 31
// +     %12 = and i1 %10, %11
// +     br %12 to bb3(3) else bb3(4)
// +
// + bb3(i64 %13):
// +     ret i64 %13
// + }
// +
// + proc _S3f11FiiE (i64 %0) private fastcc -> i64 {
// +     #0 = 8, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     %1 = load i64, #0, align 8
// +     %2 = icmp sge i64 %1, -9223372036854775808
// +     %3 = icmp sle i64 %1, 9223372036854775807
// +     %4 = and i1 %2, %3
// +     %5 = select %4, i64 1, 2
// +     ret i64 %5
// + }
// +
// + proc _S3f12FiiE (i64 %0) private fastcc -> i64 {
// +     #0 = 8, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     %1 = load i64, #0, align 8
// +     ret i64 1
// + }

//L * ; ModuleID = 'test'
//L + source_filename = "test"
//L + target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
//L + target triple = "x86_64-unknown-linux-gnu"
//L +
//L + declare fastcc void @__src_assert_fail(ptr)
//L +
//L + declare fastcc void @__src_int_arith_error(ptr)
//L +
//L + define fastcc void @__src_main() {
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S2f1FvE() {
//L +   %1 = alloca i8, i64 8, align 8
//L +   %2 = alloca i8, i64 1, align 1
//L +   %3 = load i8, ptr %2, align 1
//L +   %4 = trunc i8 %3 to i1
//L +   br i1 %4, label %10, label %5
//L +
//L + 5:                                                ; preds = %0
//L +   %6 = load i8, ptr %2, align 1
//L +   %7 = trunc i8 %6 to i1
//L +   %8 = icmp eq i1 %7, false
//L +   br i1 %8, label %10, label %9
//L +
//L + 9:                                                ; preds = %5
//L +   unreachable
//L +
//L + 10:                                               ; preds = %5, %0
//L +   %11 = phi i64 [ 2, %5 ], [ 1, %0 ]
//L +   store i64 %11, ptr %1, align 8
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S2f2FvE() {
//L +   %1 = alloca i8, i64 8, align 8
//L +   %2 = alloca i8, i64 1, align 1
//L +   %3 = load i8, ptr %2, align 1
//L +   %4 = trunc i8 %3 to i1
//L +   br i1 %4, label %10, label %5
//L +
//L + 5:                                                ; preds = %0
//L +   %6 = load i8, ptr %2, align 1
//L +   %7 = trunc i8 %6 to i1
//L +   %8 = icmp eq i1 %7, false
//L +   br i1 %8, label %10, label %9
//L +
//L + 9:                                                ; preds = %5
//L +   unreachable
//L +
//L + 10:                                               ; preds = %5, %0
//L +   %11 = phi i64 [ 4, %5 ], [ 3, %0 ]
//L +   store i64 %11, ptr %1, align 8
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S2f3FvE() {
//L +   %1 = alloca i8, i64 8, align 8
//L +   %2 = alloca i8, i64 1, align 1
//L +   %3 = load i8, ptr %2, align 1
//L +   %4 = trunc i8 %3 to i1
//L +   br i1 %4, label %10, label %5
//L +
//L + 5:                                                ; preds = %0
//L +   %6 = load i8, ptr %2, align 1
//L +   %7 = trunc i8 %6 to i1
//L +   %8 = icmp eq i1 %7, false
//L +   br i1 %8, label %10, label %9
//L +
//L + 9:                                                ; preds = %5
//L +   unreachable
//L +
//L + 10:                                               ; preds = %5, %0
//L +   %11 = phi i64 [ 3, %5 ], [ 1, %0 ]
//L +   store i64 %11, ptr %1, align 8
//L +   ret void
//L + }
//L +
//L + define private fastcc i64 @_S2f4FibbE(i1 zeroext %0, i1 zeroext %1) {
//L +   %3 = alloca i8, i64 1, align 1
//L +   %4 = alloca i8, i64 1, align 1
//L +   %5 = sext i1 %0 to i8
//L +   store i8 %5, ptr %3, align 1
//L +   %6 = sext i1 %1 to i8
//L +   store i8 %6, ptr %4, align 1
//L +   %7 = load i8, ptr %3, align 1
//L +   %8 = trunc i8 %7 to i1
//L +   %9 = load i8, ptr %4, align 1
//L +   %10 = trunc i8 %9 to i1
//L +   %11 = icmp eq i1 %8, %10
//L +   br i1 %11, label %20, label %12
//L +
//L + 12:                                               ; preds = %2
//L +   %13 = load i8, ptr %3, align 1
//L +   %14 = trunc i8 %13 to i1
//L +   br i1 %14, label %20, label %15
//L +
//L + 15:                                               ; preds = %12
//L +   %16 = load i8, ptr %3, align 1
//L +   %17 = trunc i8 %16 to i1
//L +   %18 = icmp eq i1 %17, false
//L +   br i1 %18, label %20, label %19
//L +
//L + 19:                                               ; preds = %15
//L +   unreachable
//L +
//L + 20:                                               ; preds = %15, %12, %2
//L +   %21 = phi i64 [ 2, %15 ], [ 1, %12 ], [ 0, %2 ]
//L +   ret i64 %21
//L + }
//L +
//L + define private fastcc void @_S2f5FvE() {
//L +   %1 = alloca i8, i64 8, align 8
//L +   %2 = alloca i8, i64 8, align 8
//L +   %3 = alloca i8, i64 8, align 8
//L +   %4 = alloca i8, i64 1, align 1
//L +   store i64 0, ptr %1, align 8
//L +   store i64 0, ptr %2, align 8
//L +   %5 = load i8, ptr %4, align 1
//L +   %6 = trunc i8 %5 to i1
//L +   br i1 %6, label %12, label %7
//L +
//L + 7:                                                ; preds = %0
//L +   %8 = load i8, ptr %4, align 1
//L +   %9 = trunc i8 %8 to i1
//L +   %10 = icmp eq i1 %9, false
//L +   br i1 %10, label %12, label %11
//L +
//L + 11:                                               ; preds = %7
//L +   unreachable
//L +
//L + 12:                                               ; preds = %7, %0
//L +   %13 = phi ptr [ %2, %7 ], [ %1, %0 ]
//L +   store ptr %13, ptr %3, align 8
//L +   %14 = load ptr, ptr %3, align 8
//L +   store i64 42, ptr %14, align 8
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S2f6FvE() {
//L +   %1 = alloca i8, i64 8, align 8
//L +   store i64 5, ptr %1, align 8
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S2f7FvE() {
//L +   %1 = alloca i8, i64 8, align 8
//L +   store i64 5, ptr %1, align 8
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S2f8FvbE(i1 zeroext %0) {
//L +   %2 = alloca i8, i64 1, align 1
//L +   %3 = alloca i8, i64 8, align 8
//L +   %4 = sext i1 %0 to i8
//L +   store i8 %4, ptr %2, align 1
//L +   %5 = load i8, ptr %2, align 1
//L +   %6 = trunc i8 %5 to i1
//L +   %7 = select i1 %6, i64 7, i64 5
//L +   store i64 %7, ptr %3, align 8
//L +   ret void
//L + }
//L +
//L + define private fastcc i64 @_S2f9FiiE(i64 %0) {
//L +   %2 = alloca i8, i64 8, align 8
//L +   store i64 %0, ptr %2, align 8
//L +   %3 = load i64, ptr %2, align 8
//L +   %4 = icmp sge i64 %3, 1
//L +   %5 = icmp sle i64 %3, 11
//L +   %6 = and i1 %4, %5
//L +   %7 = select i1 %6, i64 1, i64 2
//L +   ret i64 %7
//L + }
//L +
//L + define private fastcc i64 @_S3f10FiiE(i64 %0) {
//L +   %2 = alloca i8, i64 8, align 8
//L +   store i64 %0, ptr %2, align 8
//L +   %3 = load i64, ptr %2, align 8
//L +   %4 = icmp sge i64 %3, 1
//L +   %5 = icmp sle i64 %3, 11
//L +   %6 = and i1 %4, %5
//L +   br i1 %6, label %17, label %7
//L +
//L + 7:                                                ; preds = %1
//L +   %8 = load i64, ptr %2, align 8
//L +   %9 = icmp sge i64 %8, 11
//L +   %10 = icmp sle i64 %8, 21
//L +   %11 = and i1 %9, %10
//L +   br i1 %11, label %17, label %12
//L +
//L + 12:                                               ; preds = %7
//L +   %13 = load i64, ptr %2, align 8
//L +   %14 = icmp sge i64 %13, 21
//L +   %15 = icmp sle i64 %13, 31
//L +   %16 = and i1 %14, %15
//L +   br i1 %16, label %17, label %19
//L +
//L + 17:                                               ; preds = %19, %12, %7, %1
//L +   %18 = phi i64 [ %20, %19 ], [ 3, %12 ], [ 2, %7 ], [ 1, %1 ]
//L +   ret i64 %18
//L +
//L + 19:                                               ; preds = %12
//L +   %20 = phi i64 [ 4, %12 ]
//L +   br label %17
//L + }
//L +
//L + define private fastcc i64 @_S3f11FiiE(i64 %0) {
//L +   %2 = alloca i8, i64 8, align 8
//L +   store i64 %0, ptr %2, align 8
//L +   %3 = load i64, ptr %2, align 8
//L +   %4 = icmp sge i64 %3, -9223372036854775808
//L +   %5 = icmp sle i64 %3, 9223372036854775807
//L +   %6 = and i1 %4, %5
//L +   %7 = select i1 %6, i64 1, i64 2
//L +   ret i64 %7
//L + }
//L +
//L + define private fastcc i64 @_S3f12FiiE(i64 %0) {
//L +   %2 = alloca i8, i64 8, align 8
//L +   store i64 %0, ptr %2, align 8
//L +   %3 = load i64, ptr %2, align 8
//L +   ret i64 1
//L + }
//L +
//L + !llvm.module.flags = !{!0}
//L +
//L + !0 = !{i32 2, !"Debug Info Version", i32 3}
