// R      %srcc --ir --target x86_64-unknown-linux %s
// R[//L] %srcc --llvm --target x86_64-unknown-linux %s
program test;

proc a = "abcd" == "dcef";
proc b = "a" == "bc";
proc c = "a" == "a";
proc d = "" == "";
proc e (i64[] a, i64[] b) = a == b;

// * @0 = "\00"
// + @1 = "bc\00"
// + @2 = "a\00"
// + @3 = "dcef\00"
// + @4 = "abcd\00"
// +
// + proc __src_assert_fail (ptr) external fastcc;
// +
// + proc __src_int_arith_error (ptr) external fastcc;
// +
// + proc __src_main external fastcc {
// + entry:
// +     ret
// + }
// +
// + proc _S1aFbE private fastcc -> i1 zeroext {
// + entry:
// +     %0 = call fastcc zeroext i1 _S$2==FbxSI8xSI8E(
// +         ptr @4,
// +         i64 4,
// +         ptr @3,
// +         i64 4)
// +     ret i1 %0
// + }
// +
// + proc _S$2==FbxSI8xSI8E (
// +     ptr %0,
// +     i64 %1,
// +     ptr %2,
// +     i64 %3,
// + ) private fastcc -> i1 zeroext {
// +     #0 = 16, align 8
// +     #1 = 16, align 8
// +
// + entry:
// +     store #0, ptr %0, align 8
// +     %4 = ptradd #0, 8
// +     store %4, i64 %1, align 8
// +     store #1, ptr %2, align 8
// +     %5 = ptradd #1, 8
// +     store %5, i64 %3, align 8
// +     %6 = ptradd #0, 8
// +     %7 = load i64, %6, align 8
// +     %8 = ptradd #1, 8
// +     %9 = load i64, %8, align 8
// +     %10 = icmp ne i64 %7, %9
// +     br %10 to bb1 else bb2
// +
// + bb1:
// +     ret i1 false
// +
// + bb2:
// +     %11 = load ptr, #0, align 8
// +     %12 = ptradd #0, 8
// +     %13 = load i64, %12, align 8
// +     %14 = load ptr, #1, align 8
// +     %15 = ptradd #1, 8
// +     %16 = load i64, %15, align 8
// +     %17 = ptradd %11, i64 %13
// +     %18 = ptradd %14, i64 %16
// +     br bb3(%11, %14)
// +
// + bb3(ptr %19, ptr %20):
// +     %21 = cmp ne ptr %19, %17
// +     br %21 to bb4 else bb8
// +
// + bb4:
// +     %22 = cmp ne ptr %20, %18
// +     br %22 to bb5 else bb8
// +
// + bb5:
// +     %23 = load i8, %19, align 1
// +     %24 = load i8, %20, align 1
// +     %25 = icmp ne i8 %23, %24
// +     br %25 to bb6 else bb7
// +
// + bb6:
// +     ret i1 false
// +
// + bb7:
// +     %26 = ptradd %19, 1
// +     %27 = ptradd %20, 1
// +     br bb3(%26, %27)
// +
// + bb8:
// +     ret i1 true
// + }
// +
// + proc _S1bFbE private fastcc -> i1 zeroext {
// + entry:
// +     %0 = call fastcc zeroext i1 _S$2==FbxSI8xSI8E(
// +         ptr @2,
// +         i64 1,
// +         ptr @1,
// +         i64 2)
// +     ret i1 %0
// + }
// +
// + proc _S1cFbE private fastcc -> i1 zeroext {
// + entry:
// +     %0 = call fastcc zeroext i1 _S$2==FbxSI8xSI8E(
// +         ptr @2,
// +         i64 1,
// +         ptr @2,
// +         i64 1)
// +     ret i1 %0
// + }
// +
// + proc _S1dFbE private fastcc -> i1 zeroext {
// + entry:
// +     %0 = call fastcc zeroext i1 _S$2==FbxSI8xSI8E(
// +         ptr @0,
// +         i64 0,
// +         ptr @0,
// +         i64 0)
// +     ret i1 %0
// + }
// +
// + proc _S1eFbSI64SI64E (
// +     ptr %0,
// +     i64 %1,
// +     ptr %2,
// +     i64 %3,
// + ) private fastcc -> i1 zeroext {
// +     #0 = 16, align 8
// +     #1 = 16, align 8
// +
// + entry:
// +     store #0, ptr %0, align 8
// +     %4 = ptradd #0, 8
// +     store %4, i64 %1, align 8
// +     store #1, ptr %2, align 8
// +     %5 = ptradd #1, 8
// +     store %5, i64 %3, align 8
// +     %6 = load ptr, #0, align 8
// +     %7 = ptradd #0, 8
// +     %8 = load i64, %7, align 8
// +     %9 = load ptr, #1, align 8
// +     %10 = ptradd #1, 8
// +     %11 = load i64, %10, align 8
// +     %12 = call fastcc zeroext i1 _S$2==FbxSI64xSI64E(
// +         ptr %6,
// +         i64 %8,
// +         ptr %9,
// +         i64 %11)
// +     ret i1 %12
// + }
// +
// + proc _S$2==FbxSI64xSI64E (
// +     ptr %0,
// +     i64 %1,
// +     ptr %2,
// +     i64 %3,
// + ) private fastcc -> i1 zeroext {
// +     #0 = 16, align 8
// +     #1 = 16, align 8
// +
// + entry:
// +     store #0, ptr %0, align 8
// +     %4 = ptradd #0, 8
// +     store %4, i64 %1, align 8
// +     store #1, ptr %2, align 8
// +     %5 = ptradd #1, 8
// +     store %5, i64 %3, align 8
// +     %6 = ptradd #0, 8
// +     %7 = load i64, %6, align 8
// +     %8 = ptradd #1, 8
// +     %9 = load i64, %8, align 8
// +     %10 = icmp ne i64 %7, %9
// +     br %10 to bb1 else bb2
// +
// + bb1:
// +     ret i1 false
// +
// + bb2:
// +     %11 = load ptr, #0, align 8
// +     %12 = ptradd #0, 8
// +     %13 = load i64, %12, align 8
// +     %14 = load ptr, #1, align 8
// +     %15 = ptradd #1, 8
// +     %16 = load i64, %15, align 8
// +     %17 = mul i64 %13, 8
// +     %18 = ptradd %11, i64 %17
// +     %19 = mul i64 %16, 8
// +     %20 = ptradd %14, i64 %19
// +     br bb3(%11, %14)
// +
// + bb3(ptr %21, ptr %22):
// +     %23 = cmp ne ptr %21, %18
// +     br %23 to bb4 else bb8
// +
// + bb4:
// +     %24 = cmp ne ptr %22, %20
// +     br %24 to bb5 else bb8
// +
// + bb5:
// +     %25 = load i64, %21, align 8
// +     %26 = load i64, %22, align 8
// +     %27 = icmp ne i64 %25, %26
// +     br %27 to bb6 else bb7
// +
// + bb6:
// +     ret i1 false
// +
// + bb7:
// +     %28 = ptradd %21, 8
// +     %29 = ptradd %22, 8
// +     br bb3(%28, %29)
// +
// + bb8:
// +     ret i1 true
// + }

//L * ; ModuleID = 'test'
//L + source_filename = "test"
//L + target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
//L + target triple = "x86_64-unknown-linux-gnu"
//L +
//L + @__srcc_str.4 = private constant [1 x i8] zeroinitializer, align 1
//L + @__srcc_str.3 = private constant [3 x i8] c"bc\00", align 1
//L + @__srcc_str.2 = private constant [2 x i8] c"a\00", align 1
//L + @__srcc_str.1 = private constant [5 x i8] c"dcef\00", align 1
//L + @__srcc_str.0 = private constant [5 x i8] c"abcd\00", align 1
//L +
//L + declare fastcc void @__src_assert_fail(ptr)
//L +
//L + declare fastcc void @__src_int_arith_error(ptr)
//L +
//L + define fastcc void @__src_main() {
//L +   ret void
//L + }
//L +
//L + define private fastcc zeroext i1 @_S1aFbE() {
//L +   %1 = call fastcc zeroext i1 @"_S$2==FbxSI8xSI8E"(ptr @__srcc_str.0, i64 4, ptr @__srcc_str.1, i64 4)
//L +   ret i1 %1
//L + }
//L +
//L + define private fastcc zeroext i1 @"_S$2==FbxSI8xSI8E"(ptr %0, i64 %1, ptr %2, i64 %3) {
//L +   %5 = alloca i8, i64 16, align 8
//L +   %6 = alloca i8, i64 16, align 8
//L +   store ptr %0, ptr %5, align 8
//L +   %7 = getelementptr inbounds nuw i8, ptr %5, i32 8
//L +   store i64 %1, ptr %7, align 8
//L +   store ptr %2, ptr %6, align 8
//L +   %8 = getelementptr inbounds nuw i8, ptr %6, i32 8
//L +   store i64 %3, ptr %8, align 8
//L +   %9 = getelementptr inbounds nuw i8, ptr %5, i32 8
//L +   %10 = load i64, ptr %9, align 8
//L +   %11 = getelementptr inbounds nuw i8, ptr %6, i32 8
//L +   %12 = load i64, ptr %11, align 8
//L +   %13 = icmp ne i64 %10, %12
//L +   br i1 %13, label %14, label %15
//L +
//L + 14:                                               ; preds = %4
//L +   ret i1 false
//L +
//L + 15:                                               ; preds = %4
//L +   %16 = load ptr, ptr %5, align 8
//L +   %17 = getelementptr inbounds nuw i8, ptr %5, i32 8
//L +   %18 = load i64, ptr %17, align 8
//L +   %19 = load ptr, ptr %6, align 8
//L +   %20 = getelementptr inbounds nuw i8, ptr %6, i32 8
//L +   %21 = load i64, ptr %20, align 8
//L +   %22 = getelementptr inbounds nuw i8, ptr %16, i64 %18
//L +   %23 = getelementptr inbounds nuw i8, ptr %19, i64 %21
//L +   br label %24
//L +
//L + 24:                                               ; preds = %35, %15
//L +   %25 = phi ptr [ %36, %35 ], [ %16, %15 ]
//L +   %26 = phi ptr [ %37, %35 ], [ %19, %15 ]
//L +   %27 = icmp ne ptr %25, %22
//L +   br i1 %27, label %28, label %38
//L +
//L + 28:                                               ; preds = %24
//L +   %29 = icmp ne ptr %26, %23
//L +   br i1 %29, label %30, label %38
//L +
//L + 30:                                               ; preds = %28
//L +   %31 = load i8, ptr %25, align 1
//L +   %32 = load i8, ptr %26, align 1
//L +   %33 = icmp ne i8 %31, %32
//L +   br i1 %33, label %34, label %35
//L +
//L + 34:                                               ; preds = %30
//L +   ret i1 false
//L +
//L + 35:                                               ; preds = %30
//L +   %36 = getelementptr inbounds nuw i8, ptr %25, i32 1
//L +   %37 = getelementptr inbounds nuw i8, ptr %26, i32 1
//L +   br label %24
//L +
//L + 38:                                               ; preds = %28, %24
//L +   ret i1 true
//L + }
//L +
//L + define private fastcc zeroext i1 @_S1bFbE() {
//L +   %1 = call fastcc zeroext i1 @"_S$2==FbxSI8xSI8E"(ptr @__srcc_str.2, i64 1, ptr @__srcc_str.3, i64 2)
//L +   ret i1 %1
//L + }
//L +
//L + define private fastcc zeroext i1 @_S1cFbE() {
//L +   %1 = call fastcc zeroext i1 @"_S$2==FbxSI8xSI8E"(ptr @__srcc_str.2, i64 1, ptr @__srcc_str.2, i64 1)
//L +   ret i1 %1
//L + }
//L +
//L + define private fastcc zeroext i1 @_S1dFbE() {
//L +   %1 = call fastcc zeroext i1 @"_S$2==FbxSI8xSI8E"(ptr @__srcc_str.4, i64 0, ptr @__srcc_str.4, i64 0)
//L +   ret i1 %1
//L + }
//L +
//L + define private fastcc zeroext i1 @_S1eFbSI64SI64E(ptr %0, i64 %1, ptr %2, i64 %3) {
//L +   %5 = alloca i8, i64 16, align 8
//L +   %6 = alloca i8, i64 16, align 8
//L +   store ptr %0, ptr %5, align 8
//L +   %7 = getelementptr inbounds nuw i8, ptr %5, i32 8
//L +   store i64 %1, ptr %7, align 8
//L +   store ptr %2, ptr %6, align 8
//L +   %8 = getelementptr inbounds nuw i8, ptr %6, i32 8
//L +   store i64 %3, ptr %8, align 8
//L +   %9 = load ptr, ptr %5, align 8
//L +   %10 = getelementptr inbounds nuw i8, ptr %5, i32 8
//L +   %11 = load i64, ptr %10, align 8
//L +   %12 = load ptr, ptr %6, align 8
//L +   %13 = getelementptr inbounds nuw i8, ptr %6, i32 8
//L +   %14 = load i64, ptr %13, align 8
//L +   %15 = call fastcc zeroext i1 @"_S$2==FbxSI64xSI64E"(ptr %9, i64 %11, ptr %12, i64 %14)
//L +   ret i1 %15
//L + }
//L +
//L + define private fastcc zeroext i1 @"_S$2==FbxSI64xSI64E"(ptr %0, i64 %1, ptr %2, i64 %3) {
//L +   %5 = alloca i8, i64 16, align 8
//L +   %6 = alloca i8, i64 16, align 8
//L +   store ptr %0, ptr %5, align 8
//L +   %7 = getelementptr inbounds nuw i8, ptr %5, i32 8
//L +   store i64 %1, ptr %7, align 8
//L +   store ptr %2, ptr %6, align 8
//L +   %8 = getelementptr inbounds nuw i8, ptr %6, i32 8
//L +   store i64 %3, ptr %8, align 8
//L +   %9 = getelementptr inbounds nuw i8, ptr %5, i32 8
//L +   %10 = load i64, ptr %9, align 8
//L +   %11 = getelementptr inbounds nuw i8, ptr %6, i32 8
//L +   %12 = load i64, ptr %11, align 8
//L +   %13 = icmp ne i64 %10, %12
//L +   br i1 %13, label %14, label %15
//L +
//L + 14:                                               ; preds = %4
//L +   ret i1 false
//L +
//L + 15:                                               ; preds = %4
//L +   %16 = load ptr, ptr %5, align 8
//L +   %17 = getelementptr inbounds nuw i8, ptr %5, i32 8
//L +   %18 = load i64, ptr %17, align 8
//L +   %19 = load ptr, ptr %6, align 8
//L +   %20 = getelementptr inbounds nuw i8, ptr %6, i32 8
//L +   %21 = load i64, ptr %20, align 8
//L +   %22 = mul i64 %18, 8
//L +   %23 = getelementptr inbounds nuw i8, ptr %16, i64 %22
//L +   %24 = mul i64 %21, 8
//L +   %25 = getelementptr inbounds nuw i8, ptr %19, i64 %24
//L +   br label %26
//L +
//L + 26:                                               ; preds = %37, %15
//L +   %27 = phi ptr [ %38, %37 ], [ %16, %15 ]
//L +   %28 = phi ptr [ %39, %37 ], [ %19, %15 ]
//L +   %29 = icmp ne ptr %27, %23
//L +   br i1 %29, label %30, label %40
//L +
//L + 30:                                               ; preds = %26
//L +   %31 = icmp ne ptr %28, %25
//L +   br i1 %31, label %32, label %40
//L +
//L + 32:                                               ; preds = %30
//L +   %33 = load i64, ptr %27, align 8
//L +   %34 = load i64, ptr %28, align 8
//L +   %35 = icmp ne i64 %33, %34
//L +   br i1 %35, label %36, label %37
//L +
//L + 36:                                               ; preds = %32
//L +   ret i1 false
//L +
//L + 37:                                               ; preds = %32
//L +   %38 = getelementptr inbounds nuw i8, ptr %27, i32 8
//L +   %39 = getelementptr inbounds nuw i8, ptr %28, i32 8
//L +   br label %26
//L +
//L + 40:                                               ; preds = %30, %26
//L +   ret i1 true
//L + }
//L +
//L + !llvm.module.flags = !{!0}
//L +
//L + !0 = !{i32 2, !"Debug Info Version", i32 3}
