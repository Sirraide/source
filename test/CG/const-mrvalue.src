// R      %srcc --ir --target x86_64-unknown-linux %s
// R[//L] %srcc --llvm --target x86_64-unknown-linux %s
program test;

struct x { int a; int b; int c; }

proc a = eval x(1, 2, 3);
proc b = eval x(-1, -2, -3);

// * @0 = "\FF\FF\FF\FF\FF\FF\FF\FF\FE\FF\FF\FF\FF\FF\FF\FF\FD\FF\FF\FF\FF\FF\FF\FF", align 8
// + @1 = "\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00", align 8
// +
// + proc __src_assert_fail (ptr) external fastcc;
// +
// + proc __src_int_arith_error (ptr) external fastcc;
// +
// + proc __src_main external fastcc {
// + entry:
// +     ret
// + }
// +
// + proc _S1aFT1xE (ptr %0 sret i8[24]) private fastcc {
// + entry:
// +     copy %0 <- @1, 24
// +     ret
// + }
// +
// + proc _S1bFT1xE (ptr %0 sret i8[24]) private fastcc {
// + entry:
// +     copy %0 <- @0, 24
// +     ret
// + }

//L * ; ModuleID = 'test'
//L + source_filename = "test"
//L + target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
//L + target triple = "x86_64-unknown-linux-gnu"
//L +
//L + @__srcc_str.1 = private constant [24 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FE\FF\FF\FF\FF\FF\FF\FF\FD\FF\FF\FF\FF\FF\FF\FF", align 8
//L + @__srcc_str.0 = private constant [24 x i8] c"\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00", align 8
//L +
//L + ; Function Attrs: nounwind
//L + declare fastcc void @__src_assert_fail(ptr) #0
//L +
//L + ; Function Attrs: nounwind
//L + declare fastcc void @__src_int_arith_error(ptr) #0
//L +
//L + ; Function Attrs: nounwind
//L + define fastcc void @__src_main() #0 {
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc void @_S1aFT1xE(ptr sret([24 x i8]) %0) #0 {
//L +   call void @llvm.memcpy.p0.p0.i64(ptr %0, ptr @__srcc_str.0, i64 24, i1 false)
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc void @_S1bFT1xE(ptr sret([24 x i8]) %0) #0 {
//L +   call void @llvm.memcpy.p0.p0.i64(ptr %0, ptr @__srcc_str.1, i64 24, i1 false)
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
//L + declare void @llvm.memcpy.p0.p0.i64(ptr noalias writeonly captures(none), ptr noalias readonly captures(none), i64, i1 immarg) #1
//L +
//L + attributes #0 = { nounwind }
//L + attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
//L +
//L + !llvm.module.flags = !{!0}
//L +
//L + !0 = !{i32 2, !"Debug Info Version", i32 3}
