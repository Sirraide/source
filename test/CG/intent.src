// R %srcc --llvm -fno-overflow-checks %s
program test;

// * define fastcc void @__src_main()
proc f_move(int i) = i * 2;
proc f_move(i10000 i) = i * 2;

int mi = 5;
i10000 mj = 10;

// * %l2sr = load i64, ptr %0, align 8
// + %4 = call fastcc i64 @_S6f_moveFiiE(i64 %l2sr)
// + %5 = call fastcc i10000 @_S6f_moveFI10000I10000E(ptr %1)
// + %6 = call fastcc i64 @_S6f_moveFiiE(i64 20)
f_move(mi);
f_move(mj);
f_move(20);

int i = 5;
i10000 j = 10;

proc f_in(in int i) = i * 3;
proc f_in(in i10000 i) = i * 3;

// * %l2sr1 = load i64, ptr %2, align 8
// + %7 = call fastcc i64 @_S4f_inFixiE(i64 %l2sr1)
// + %8 = call fastcc i10000 @_S4f_inFI10000xI10000E(ptr %3)
// + %9 = call fastcc i64 @_S4f_inFixiE(i64 20)
f_in(i);
f_in(j);
f_in(20);

proc f_out(out int i) { i = 100; }
proc f_out(out i10000 i) { i = 1000; }

// * call fastcc void @_S5f_outFvx1iE(ptr %2)
// + call fastcc void @_S5f_outFvx1I10000E(ptr %3)
f_out(i);
f_out(j);

proc f_inout(inout int i) = i = i * 5;
proc f_inout(inout i10000 i) = i = i * 5;

i = 5;
j = 10;

// * %10 = call fastcc i64 @_S7f_inoutFix2iE(ptr %2)
// + %11 = call fastcc i10000 @_S7f_inoutFI10000x2I10000E(ptr %3)
f_inout(i);
f_inout(j);

proc f_copy(copy int i) = i = i * 6;
proc f_copy(copy i10000 i) = i = i * 6;

i = 5;
j = 10;

// * %l2sr2 = load i64, ptr %2, align 8
// + %12 = call fastcc i64 @_S6f_copyFix3iE(i64 %l2sr2)
// + %l2sr3 = load i10000, ptr %3, align 64
// + %13 = call fastcc i10000 @_S6f_copyFI10000x3I10000E(i10000 %l2sr3)
f_copy(i);
f_copy(j);


// * define private fastcc i64 @_S6f_moveFiiE(i64 %0) {
// + entry:
// +   %1 = alloca i64, align 8
// +   store i64 %0, ptr %1, align 8
// +   %l2sr = load i64, ptr %1, align 8
// +   %2 = mul nsw i64 %l2sr, 2
// +   ret i64 %2
// + }

// * define private fastcc i10000 @_S6f_moveFI10000I10000E(ptr %0) {
// + entry:
// +   %l2sr = load i10000, ptr %0, align 64
// +   %1 = mul nsw i10000 %l2sr, 2
// +   ret i10000 %1
// + }

// * define private fastcc i64 @_S4f_inFixiE(i64 %0) {
// + entry:
// +   %1 = mul nsw i64 %0, 3
// +   ret i64 %1
// + }

// * define private fastcc i10000 @_S4f_inFI10000xI10000E(ptr %0) {
// + entry:
// +   %l2sr = load i10000, ptr %0, align 64
// +   %1 = mul nsw i10000 %l2sr, 3
// +   ret i10000 %1
// + }

// * define private fastcc void @_S5f_outFvx1iE(ptr %0) {
// + entry:
// +   store i64 100, ptr %0, align 8
// +   ret void
// + }

// * define private fastcc void @_S5f_outFvx1I10000E(ptr %0) {
// + entry:
// +   store i10000 1000, ptr %0, align 64
// +   ret void
// + }

// * define private fastcc i64 @_S7f_inoutFix2iE(ptr %0) {
// + entry:
// +   %l2sr = load i64, ptr %0, align 8
// +   %1 = mul nsw i64 %l2sr, 5
// +   store i64 %1, ptr %0, align 8
// +   %l2sr1 = load i64, ptr %0, align 8
// +   ret i64 %l2sr1
// + }

// * define private fastcc i10000 @_S7f_inoutFI10000x2I10000E(ptr %0) {
// + entry:
// +   %l2sr = load i10000, ptr %0, align 64
// +   %1 = mul nsw i10000 %l2sr, 5
// +   store i10000 %1, ptr %0, align 64
// +   %l2sr1 = load i10000, ptr %0, align 64
// +   ret i10000 %l2sr1
// + }

// * define private fastcc i64 @_S6f_copyFix3iE(i64 %0) {
// + entry:
// +   %1 = alloca i64, align 8
// +   store i64 %0, ptr %1, align 8
// +   %l2sr = load i64, ptr %1, align 8
// +   %2 = mul nsw i64 %l2sr, 6
// +   store i64 %2, ptr %1, align 8
// +   %l2sr1 = load i64, ptr %1, align 8
// +   ret i64 %l2sr1
// + }

// * define private fastcc i10000 @_S6f_copyFI10000x3I10000E(i10000 %0) {
// + entry:
// +   %1 = alloca i10000, align 64
// +   store i10000 %0, ptr %1, align 64
// +   %l2sr = load i10000, ptr %1, align 64
// +   %2 = mul nsw i10000 %l2sr, 6
// +   store i10000 %2, ptr %1, align 64
// +   %l2sr1 = load i10000, ptr %1, align 64
// +   ret i10000 %l2sr1
// + }
