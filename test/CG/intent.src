// R      %srcc --ir -fno-overflow-checks --target x86_64-unknown-linux %s
// R[//L] %srcc --llvm -fno-overflow-checks --target x86_64-unknown-linux %s
program test;

proc f_move(int i) = i * 2;
proc f_move(i10000 i) = i * 2;

int mi = 5;
i10000 mj = 10;

f_move(mi);
f_move(mj);
f_move(20);

int i = 5;
i10000 j = 10;

proc f_in(in int i) = i * 3;
proc f_in(in i10000 i) = i * 3;

f_in(i);
f_in(j);
f_in(20);

proc f_out(out int i) { i = 100; }
proc f_out(out i10000 i) { i = 1000; }

f_out(i);
f_out(j);

proc f_inout(inout int i) = i = i * 5;
proc f_inout(inout i10000 i) = i = i * 5;

i = 5;
j = 10;

f_inout(i);
f_inout(j);

proc f_copy(copy int i) = i = i * 6;
proc f_copy(copy i10000 i) = i = i * 6;

i = 5;
j = 10;

f_copy(i);
f_copy(j);

// * proc __src_assert_fail (ptr) external fastcc;
// +
// + proc __src_int_arith_error (ptr) external fastcc;
// +
// + proc __src_main external fastcc {
// +     #0 = 8, align 8
// +     #1 = 1256, align 8
// +     #2 = 8, align 8
// +     #3 = 1256, align 8
// +     #4 = 1256, align 8
// +     #5 = 1256, align 8
// +     #6 = 1256, align 8
// +     #7 = 1256, align 8
// +     #8 = 1256, align 8
// +     #9 = 1256, align 8
// +     #10 = 1256, align 8
// +
// + entry:
// +     store #0, i64 5, align 8
// +     store #1, i10048 10, align 8
// +     %0 = load i64, #0, align 8
// +     %1 = call fastcc i64 _S6f_moveFiiE(i64 %0)
// +     %2 = load i10048, #1, align 8
// +     %3 = trunc i10048 %2 to i10000
// +     %4 = sext i10000 %3 to i10048
// +     store #5, i10048 %4, align 8
// +     call fastcc void _S6f_moveFI10000I10000E(ptr #4 sret i8[1256], ptr #5 byval i8[1256])
// +     %5 = load i10048, #4, align 8
// +     %6 = call fastcc i64 _S6f_moveFiiE(i64 20)
// +     store #2, i64 5, align 8
// +     store #3, i10048 10, align 8
// +     %7 = load i64, #2, align 8
// +     %8 = call fastcc i64 _S4f_inFixiE(i64 %7)
// +     %9 = load i10048, #3, align 8
// +     %10 = trunc i10048 %9 to i10000
// +     %11 = sext i10000 %10 to i10048
// +     store #7, i10048 %11, align 8
// +     call fastcc void _S4f_inFI10000xI10000E(ptr #6 sret i8[1256], ptr #7 dereferenceable 1256)
// +     %12 = load i10048, #6, align 8
// +     %13 = call fastcc i64 _S4f_inFixiE(i64 20)
// +     call fastcc void _S5f_outFvx1iE(ptr #2 dereferenceable 8)
// +     call fastcc void _S5f_outFvx1I10000E(ptr #3 dereferenceable 1256)
// +     store #2, i64 5, align 8
// +     store #3, i10048 10, align 8
// +     %14 = call fastcc i64 _S7f_inoutFix2iE(ptr #2 dereferenceable 8)
// +     call fastcc void _S7f_inoutFI10000x2I10000E(ptr #8 sret i8[1256], ptr #3 dereferenceable 1256)
// +     %15 = load i10048, #8, align 8
// +     store #2, i64 5, align 8
// +     store #3, i10048 10, align 8
// +     %16 = load i64, #2, align 8
// +     %17 = call fastcc i64 _S6f_copyFix3iE(i64 %16)
// +     %18 = load i10048, #3, align 8
// +     %19 = trunc i10048 %18 to i10000
// +     %20 = sext i10000 %19 to i10048
// +     store #10, i10048 %20, align 8
// +     call fastcc void _S6f_copyFI10000x3I10000E(ptr #9 sret i8[1256], ptr #10 byval i8[1256])
// +     %21 = load i10048, #9, align 8
// +     ret
// + }
// +
// + proc _S6f_moveFiiE (i64 %0) private fastcc -> i64 {
// +     #0 = 8, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     %1 = load i64, #0, align 8
// +     %2 = mul i64 %1, 2
// +     ret i64 %2
// + }
// +
// + proc _S6f_moveFI10000I10000E (ptr %0 sret i8[1256], ptr %1 byval i8[1256]) private fastcc {
// + entry:
// +     %2 = load i10048, %1, align 8
// +     %3 = trunc i10048 %2 to i10000
// +     %4 = mul i10000 %3, 2
// +     %5 = sext i10000 %4 to i10048
// +     store %0, i10048 %5, align 8
// +     ret
// + }
// +
// + proc _S4f_inFixiE (i64 %0) private fastcc -> i64 {
// +     #0 = 8, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     %1 = load i64, #0, align 8
// +     %2 = mul i64 %1, 3
// +     ret i64 %2
// + }
// +
// + proc _S4f_inFI10000xI10000E (ptr %0 sret i8[1256], ptr %1 dereferenceable 1256) private fastcc {
// + entry:
// +     %2 = load i10048, %1, align 8
// +     %3 = trunc i10048 %2 to i10000
// +     %4 = mul i10000 %3, 3
// +     %5 = sext i10000 %4 to i10048
// +     store %0, i10048 %5, align 8
// +     ret
// + }
// +
// + proc _S5f_outFvx1iE (ptr %0 dereferenceable 8) private fastcc {
// + entry:
// +     store %0, i64 100, align 8
// +     ret
// + }
// +
// + proc _S5f_outFvx1I10000E (ptr %0 dereferenceable 1256) private fastcc {
// + entry:
// +     store %0, i10048 1000, align 8
// +     ret
// + }
// +
// + proc _S7f_inoutFix2iE (ptr %0 dereferenceable 8) private fastcc -> i64 {
// + entry:
// +     %1 = load i64, %0, align 8
// +     %2 = mul i64 %1, 5
// +     store %0, i64 %2, align 8
// +     %3 = load i64, %0, align 8
// +     ret i64 %3
// + }
// +
// + proc _S7f_inoutFI10000x2I10000E (ptr %0 sret i8[1256], ptr %1 dereferenceable 1256) private fastcc {
// + entry:
// +     %2 = load i10048, %1, align 8
// +     %3 = trunc i10048 %2 to i10000
// +     %4 = mul i10000 %3, 5
// +     %5 = sext i10000 %4 to i10048
// +     store %1, i10048 %5, align 8
// +     %6 = load i10048, %1, align 8
// +     %7 = trunc i10048 %6 to i10000
// +     %8 = sext i10000 %7 to i10048
// +     store %0, i10048 %8, align 8
// +     ret
// + }
// +
// + proc _S6f_copyFix3iE (i64 %0) private fastcc -> i64 {
// +     #0 = 8, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     %1 = load i64, #0, align 8
// +     %2 = mul i64 %1, 6
// +     store #0, i64 %2, align 8
// +     %3 = load i64, #0, align 8
// +     ret i64 %3
// + }
// +
// + proc _S6f_copyFI10000x3I10000E (ptr %0 sret i8[1256], ptr %1 byval i8[1256]) private fastcc {
// + entry:
// +     %2 = load i10048, %1, align 8
// +     %3 = trunc i10048 %2 to i10000
// +     %4 = mul i10000 %3, 6
// +     %5 = sext i10000 %4 to i10048
// +     store %1, i10048 %5, align 8
// +     %6 = load i10048, %1, align 8
// +     %7 = trunc i10048 %6 to i10000
// +     %8 = sext i10000 %7 to i10048
// +     store %0, i10048 %8, align 8
// +     ret
// + }

//L * ; ModuleID = 'test'
//L + source_filename = "test"
//L + target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
//L + target triple = "x86_64-unknown-linux-gnu"
//L +
//L + ; Function Attrs: nounwind
//L + declare fastcc void @__src_assert_fail(ptr) #0
//L +
//L + ; Function Attrs: nounwind
//L + declare fastcc void @__src_int_arith_error(ptr) #0
//L +
//L + ; Function Attrs: nounwind
//L + define fastcc void @__src_main() #0 {
//L +   %1 = alloca i8, i64 8, align 8
//L +   %2 = alloca i8, i64 1256, align 8
//L +   %3 = alloca i8, i64 8, align 8
//L +   %4 = alloca i8, i64 1256, align 8
//L +   %5 = alloca i8, i64 1256, align 8
//L +   %6 = alloca i8, i64 1256, align 8
//L +   %7 = alloca i8, i64 1256, align 8
//L +   %8 = alloca i8, i64 1256, align 8
//L +   %9 = alloca i8, i64 1256, align 8
//L +   %10 = alloca i8, i64 1256, align 8
//L +   %11 = alloca i8, i64 1256, align 8
//L +   store i64 5, ptr %1, align 8
//L +   store i10048 10, ptr %2, align 8
//L +   %12 = load i64, ptr %1, align 8
//L +   %13 = call fastcc i64 @_S6f_moveFiiE(i64 %12)
//L +   %14 = load i10048, ptr %2, align 8
//L +   %15 = trunc i10048 %14 to i10000
//L +   %16 = sext i10000 %15 to i10048
//L +   store i10048 %16, ptr %6, align 8
//L +   call fastcc void @_S6f_moveFI10000I10000E(ptr sret([1256 x i8]) %5, ptr byval([1256 x i8]) %6)
//L +   %17 = load i10048, ptr %5, align 8
//L +   %18 = call fastcc i64 @_S6f_moveFiiE(i64 20)
//L +   store i64 5, ptr %3, align 8
//L +   store i10048 10, ptr %4, align 8
//L +   %19 = load i64, ptr %3, align 8
//L +   %20 = call fastcc i64 @_S4f_inFixiE(i64 %19)
//L +   %21 = load i10048, ptr %4, align 8
//L +   %22 = trunc i10048 %21 to i10000
//L +   %23 = sext i10000 %22 to i10048
//L +   store i10048 %23, ptr %8, align 8
//L +   call fastcc void @_S4f_inFI10000xI10000E(ptr sret([1256 x i8]) %7, ptr dereferenceable(1256) %8)
//L +   %24 = load i10048, ptr %7, align 8
//L +   %25 = call fastcc i64 @_S4f_inFixiE(i64 20)
//L +   call fastcc void @_S5f_outFvx1iE(ptr dereferenceable(8) %3)
//L +   call fastcc void @_S5f_outFvx1I10000E(ptr dereferenceable(1256) %4)
//L +   store i64 5, ptr %3, align 8
//L +   store i10048 10, ptr %4, align 8
//L +   %26 = call fastcc i64 @_S7f_inoutFix2iE(ptr dereferenceable(8) %3)
//L +   call fastcc void @_S7f_inoutFI10000x2I10000E(ptr sret([1256 x i8]) %9, ptr dereferenceable(1256) %4)
//L +   %27 = load i10048, ptr %9, align 8
//L +   store i64 5, ptr %3, align 8
//L +   store i10048 10, ptr %4, align 8
//L +   %28 = load i64, ptr %3, align 8
//L +   %29 = call fastcc i64 @_S6f_copyFix3iE(i64 %28)
//L +   %30 = load i10048, ptr %4, align 8
//L +   %31 = trunc i10048 %30 to i10000
//L +   %32 = sext i10000 %31 to i10048
//L +   store i10048 %32, ptr %11, align 8
//L +   call fastcc void @_S6f_copyFI10000x3I10000E(ptr sret([1256 x i8]) %10, ptr byval([1256 x i8]) %11)
//L +   %33 = load i10048, ptr %10, align 8
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc i64 @_S6f_moveFiiE(i64 %0) #0 {
//L +   %2 = alloca i8, i64 8, align 8
//L +   store i64 %0, ptr %2, align 8
//L +   %3 = load i64, ptr %2, align 8
//L +   %4 = mul i64 %3, 2
//L +   ret i64 %4
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc void @_S6f_moveFI10000I10000E(ptr sret([1256 x i8]) %0, ptr byval([1256 x i8]) %1) #0 {
//L +   %3 = load i10048, ptr %1, align 8
//L +   %4 = trunc i10048 %3 to i10000
//L +   %5 = mul i10000 %4, 2
//L +   %6 = sext i10000 %5 to i10048
//L +   store i10048 %6, ptr %0, align 8
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc i64 @_S4f_inFixiE(i64 %0) #0 {
//L +   %2 = alloca i8, i64 8, align 8
//L +   store i64 %0, ptr %2, align 8
//L +   %3 = load i64, ptr %2, align 8
//L +   %4 = mul i64 %3, 3
//L +   ret i64 %4
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc void @_S4f_inFI10000xI10000E(ptr sret([1256 x i8]) %0, ptr dereferenceable(1256) %1) #0 {
//L +   %3 = load i10048, ptr %1, align 8
//L +   %4 = trunc i10048 %3 to i10000
//L +   %5 = mul i10000 %4, 3
//L +   %6 = sext i10000 %5 to i10048
//L +   store i10048 %6, ptr %0, align 8
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc void @_S5f_outFvx1iE(ptr dereferenceable(8) %0) #0 {
//L +   store i64 100, ptr %0, align 8
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc void @_S5f_outFvx1I10000E(ptr dereferenceable(1256) %0) #0 {
//L +   store i10048 1000, ptr %0, align 8
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc i64 @_S7f_inoutFix2iE(ptr dereferenceable(8) %0) #0 {
//L +   %2 = load i64, ptr %0, align 8
//L +   %3 = mul i64 %2, 5
//L +   store i64 %3, ptr %0, align 8
//L +   %4 = load i64, ptr %0, align 8
//L +   ret i64 %4
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc void @_S7f_inoutFI10000x2I10000E(ptr sret([1256 x i8]) %0, ptr dereferenceable(1256) %1) #0 {
//L +   %3 = load i10048, ptr %1, align 8
//L +   %4 = trunc i10048 %3 to i10000
//L +   %5 = mul i10000 %4, 5
//L +   %6 = sext i10000 %5 to i10048
//L +   store i10048 %6, ptr %1, align 8
//L +   %7 = load i10048, ptr %1, align 8
//L +   %8 = trunc i10048 %7 to i10000
//L +   %9 = sext i10000 %8 to i10048
//L +   store i10048 %9, ptr %0, align 8
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc i64 @_S6f_copyFix3iE(i64 %0) #0 {
//L +   %2 = alloca i8, i64 8, align 8
//L +   store i64 %0, ptr %2, align 8
//L +   %3 = load i64, ptr %2, align 8
//L +   %4 = mul i64 %3, 6
//L +   store i64 %4, ptr %2, align 8
//L +   %5 = load i64, ptr %2, align 8
//L +   ret i64 %5
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc void @_S6f_copyFI10000x3I10000E(ptr sret([1256 x i8]) %0, ptr byval([1256 x i8]) %1) #0 {
//L +   %3 = load i10048, ptr %1, align 8
//L +   %4 = trunc i10048 %3 to i10000
//L +   %5 = mul i10000 %4, 6
//L +   %6 = sext i10000 %5 to i10048
//L +   store i10048 %6, ptr %1, align 8
//L +   %7 = load i10048, ptr %1, align 8
//L +   %8 = trunc i10048 %7 to i10000
//L +   %9 = sext i10000 %8 to i10048
//L +   store i10048 %9, ptr %0, align 8
//L +   ret void
//L + }
//L +
//L + attributes #0 = { nounwind }
//L +
//L + !llvm.module.flags = !{!0}
//L +
//L + !0 = !{i32 2, !"Debug Info Version", i32 3}
