// R      %srcc --ir %s
// R[//L] %srcc --llvm %s
program test;

proc a (range<int> x) = 3..=4;
proc b (range<int> x) = 3..<4;

proc f1 {
    range<int> a;
    range<int> b = 1..=2;
    var c = 1..=2;
    var d = c.start..=c.end;
}

proc f2 {
    range<int> a;
    range<int> b = 1..<2;
    var c = 1..<2;
    var d = c.start..<c.end;
}

range<i13> x;

// * proc __src_assert_fail (ptr) external fastcc;
// +
// + proc __src_int_arith_error (ptr) external fastcc;
// +
// + proc __src_main external fastcc {
// +     #0 = 4, align 2
// +
// + entry:
// +     store #0, (i13, i13) (0, 0), align 2
// +     ret
// + }
// +
// + proc _S1aFqiqiE ((i64, i64) %0) private fastcc -> (i64, i64) {
// +     #0 = 16, align 8
// +
// + entry:
// +     store #0, (i64, i64) %0, align 8
// +     ret (i64, i64) (3, 5)
// + }
// +
// + proc _S1bFqiqiE ((i64, i64) %0) private fastcc -> (i64, i64) {
// +     #0 = 16, align 8
// +
// + entry:
// +     store #0, (i64, i64) %0, align 8
// +     ret (i64, i64) (3, 4)
// + }
// +
// + proc _S2f1FvE private fastcc {
// +     #0 = 16, align 8
// +     #1 = 16, align 8
// +     #2 = 16, align 8
// +     #3 = 16, align 8
// +
// + entry:
// +     store #0, (i64, i64) (0, 0), align 8
// +     store #1, (i64, i64) (1, 3), align 8
// +     store #2, (i64, i64) (1, 3), align 8
// +     %0 = load (i64, i64), #2, align 8
// +     %1 = extract (i64, i64) %0, 0
// +     %2 = load (i64, i64), #2, align 8
// +     %3 = extract (i64, i64) %2, 1
// +     %4 = add i64 %3, 1
// +     store #3, (i64, i64) (%1, %4), align 8
// +     ret
// + }
// +
// + proc _S2f2FvE private fastcc {
// +     #0 = 16, align 8
// +     #1 = 16, align 8
// +     #2 = 16, align 8
// +     #3 = 16, align 8
// +
// + entry:
// +     store #0, (i64, i64) (0, 0), align 8
// +     store #1, (i64, i64) (1, 2), align 8
// +     store #2, (i64, i64) (1, 2), align 8
// +     %0 = load (i64, i64), #2, align 8
// +     %1 = extract (i64, i64) %0, 0
// +     %2 = load (i64, i64), #2, align 8
// +     %3 = extract (i64, i64) %2, 1
// +     store #3, (i64, i64) (%1, %3), align 8
// +     ret
// + }

//L * ; ModuleID = 'test'
//L + source_filename = "test"
//L + target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
//L + target triple = "x86_64-unknown-linux-gnu"
//L +
//L + declare fastcc void @__src_assert_fail(ptr)
//L +
//L + declare fastcc void @__src_int_arith_error(ptr)
//L +
//L + define fastcc void @__src_main() {
//L +   %1 = alloca i8, i64 4, align 2
//L +   store { i13, i13 } zeroinitializer, ptr %1, align 2
//L +   ret void
//L + }
//L +
//L + define private fastcc { i64, i64 } @_S1aFqiqiE({ i64, i64 } %0) {
//L +   %2 = alloca i8, i64 16, align 8
//L +   store { i64, i64 } %0, ptr %2, align 8
//L +   ret { i64, i64 } { i64 3, i64 5 }
//L + }
//L +
//L + define private fastcc { i64, i64 } @_S1bFqiqiE({ i64, i64 } %0) {
//L +   %2 = alloca i8, i64 16, align 8
//L +   store { i64, i64 } %0, ptr %2, align 8
//L +   ret { i64, i64 } { i64 3, i64 4 }
//L + }
//L +
//L + define private fastcc void @_S2f1FvE() {
//L +   %1 = alloca i8, i64 16, align 8
//L +   %2 = alloca i8, i64 16, align 8
//L +   %3 = alloca i8, i64 16, align 8
//L +   %4 = alloca i8, i64 16, align 8
//L +   store { i64, i64 } zeroinitializer, ptr %1, align 8
//L +   store { i64, i64 } { i64 1, i64 3 }, ptr %2, align 8
//L +   store { i64, i64 } { i64 1, i64 3 }, ptr %3, align 8
//L +   %5 = load { i64, i64 }, ptr %3, align 8
//L +   %6 = extractvalue { i64, i64 } %5, 0
//L +   %7 = load { i64, i64 }, ptr %3, align 8
//L +   %8 = extractvalue { i64, i64 } %7, 1
//L +   %9 = add i64 %8, 1
//L +   %10 = insertvalue { i64, i64 } undef, i64 %6, 0
//L +   %11 = insertvalue { i64, i64 } %10, i64 %9, 1
//L +   store { i64, i64 } %11, ptr %4, align 8
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S2f2FvE() {
//L +   %1 = alloca i8, i64 16, align 8
//L +   %2 = alloca i8, i64 16, align 8
//L +   %3 = alloca i8, i64 16, align 8
//L +   %4 = alloca i8, i64 16, align 8
//L +   store { i64, i64 } zeroinitializer, ptr %1, align 8
//L +   store { i64, i64 } { i64 1, i64 2 }, ptr %2, align 8
//L +   store { i64, i64 } { i64 1, i64 2 }, ptr %3, align 8
//L +   %5 = load { i64, i64 }, ptr %3, align 8
//L +   %6 = extractvalue { i64, i64 } %5, 0
//L +   %7 = load { i64, i64 }, ptr %3, align 8
//L +   %8 = extractvalue { i64, i64 } %7, 1
//L +   %9 = insertvalue { i64, i64 } undef, i64 %6, 0
//L +   %10 = insertvalue { i64, i64 } %9, i64 %8, 1
//L +   store { i64, i64 } %10, ptr %4, align 8
//L +   ret void
//L + }
//L +
//L + !llvm.module.flags = !{!0}
//L +
//L + !0 = !{i32 2, !"Debug Info Version", i32 3}
