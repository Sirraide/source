// R      %srcc --ir %s
// R[//L] %srcc --llvm %s
program test;

proc a (range<int> x) = 3..=4;
proc b (range<int> x) = 3..<4;
proc c = 2..=4;

proc f1 {
    range<int> a;
    range<int> b = 1..=2;
    var c = 1..=2;
    var d = c.start..=c.end;
}

proc f2 {
    range<int> a;
    range<int> b = 1..<2;
    var c = 1..<2;
    var d = c.start..<c.end;
}

range<i13> x;
var y = c();

// * proc __src_assert_fail (ptr) external fastcc;
// +
// + proc __src_int_arith_error (ptr) external fastcc;
// +
// + proc __src_main external fastcc {
// +     #0 = 4, align 2
// +     #1 = 16, align 8
// +
// + entry:
// +     store #0, i13 0, align 2
// +     %0 = ptradd #0, 2
// +     store %0, i13 0, align 2
// +     %1 = call fastcc (i64, i64) _S1cFqiE()
// +     store #1, i64 %1:0, align 8
// +     %2 = ptradd #1, 8
// +     store %2, i64 %1:1, align 8
// +     ret
// + }
// +
// + proc _S1cFqiE private fastcc -> (i64, i64) {
// + entry:
// +     ret i64 2, i64 5
// + }
// +
// + proc _S1aFqiqiE (i64 %0, i64 %1) private fastcc -> (i64, i64) {
// +     #0 = 16, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     %2 = ptradd #0, 8
// +     store %2, i64 %1, align 8
// +     ret i64 3, i64 5
// + }
// +
// + proc _S1bFqiqiE (i64 %0, i64 %1) private fastcc -> (i64, i64) {
// +     #0 = 16, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     %2 = ptradd #0, 8
// +     store %2, i64 %1, align 8
// +     ret i64 3, i64 4
// + }
// +
// + proc _S2f1FvE private fastcc {
// +     #0 = 16, align 8
// +     #1 = 16, align 8
// +     #2 = 16, align 8
// +     #3 = 16, align 8
// +
// + entry:
// +     store #0, i64 0, align 8
// +     %0 = ptradd #0, 8
// +     store %0, i64 0, align 8
// +     store #1, i64 1, align 8
// +     %1 = ptradd #1, 8
// +     store %1, i64 3, align 8
// +     store #2, i64 1, align 8
// +     %2 = ptradd #2, 8
// +     store %2, i64 3, align 8
// +     %3 = load i64, #2, align 8
// +     %4 = ptradd #2, 8
// +     %5 = load i64, %4, align 8
// +     %6 = load i64, #2, align 8
// +     %7 = ptradd #2, 8
// +     %8 = load i64, %7, align 8
// +     %9 = add i64 %8, 1
// +     store #3, i64 %3, align 8
// +     %10 = ptradd #3, 8
// +     store %10, i64 %9, align 8
// +     ret
// + }
// +
// + proc _S2f2FvE private fastcc {
// +     #0 = 16, align 8
// +     #1 = 16, align 8
// +     #2 = 16, align 8
// +     #3 = 16, align 8
// +
// + entry:
// +     store #0, i64 0, align 8
// +     %0 = ptradd #0, 8
// +     store %0, i64 0, align 8
// +     store #1, i64 1, align 8
// +     %1 = ptradd #1, 8
// +     store %1, i64 2, align 8
// +     store #2, i64 1, align 8
// +     %2 = ptradd #2, 8
// +     store %2, i64 2, align 8
// +     %3 = load i64, #2, align 8
// +     %4 = ptradd #2, 8
// +     %5 = load i64, %4, align 8
// +     %6 = load i64, #2, align 8
// +     %7 = ptradd #2, 8
// +     %8 = load i64, %7, align 8
// +     store #3, i64 %3, align 8
// +     %9 = ptradd #3, 8
// +     store %9, i64 %8, align 8
// +     ret
// + }

//L * ; ModuleID = 'test'
//L + source_filename = "test"
//L + target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
//L + target triple = "x86_64-unknown-linux-gnu"
//L +
//L + declare fastcc void @__src_assert_fail(ptr)
//L +
//L + declare fastcc void @__src_int_arith_error(ptr)
//L +
//L + define fastcc void @__src_main() {
//L +   %1 = alloca i8, i64 4, align 2
//L +   %2 = alloca i8, i64 16, align 8
//L +   store i13 0, ptr %1, align 2
//L +   %3 = getelementptr inbounds nuw i8, ptr %1, i32 2
//L +   store i13 0, ptr %3, align 2
//L +   %4 = call fastcc { i64, i64 } @_S1cFqiE()
//L +   %5 = extractvalue { i64, i64 } %4, 0
//L +   %6 = extractvalue { i64, i64 } %4, 1
//L +   store i64 %5, ptr %2, align 8
//L +   %7 = getelementptr inbounds nuw i8, ptr %2, i32 8
//L +   store i64 %6, ptr %7, align 8
//L +   ret void
//L + }
//L +
//L + define private fastcc { i64, i64 } @_S1cFqiE() {
//L +   ret { i64, i64 } { i64 2, i64 5 }
//L + }
//L +
//L + define private fastcc { i64, i64 } @_S1aFqiqiE(i64 %0, i64 %1) {
//L +   %3 = alloca i8, i64 16, align 8
//L +   store i64 %0, ptr %3, align 8
//L +   %4 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   store i64 %1, ptr %4, align 8
//L +   ret { i64, i64 } { i64 3, i64 5 }
//L + }
//L +
//L + define private fastcc { i64, i64 } @_S1bFqiqiE(i64 %0, i64 %1) {
//L +   %3 = alloca i8, i64 16, align 8
//L +   store i64 %0, ptr %3, align 8
//L +   %4 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   store i64 %1, ptr %4, align 8
//L +   ret { i64, i64 } { i64 3, i64 4 }
//L + }
//L +
//L + define private fastcc void @_S2f1FvE() {
//L +   %1 = alloca i8, i64 16, align 8
//L +   %2 = alloca i8, i64 16, align 8
//L +   %3 = alloca i8, i64 16, align 8
//L +   %4 = alloca i8, i64 16, align 8
//L +   store i64 0, ptr %1, align 8
//L +   %5 = getelementptr inbounds nuw i8, ptr %1, i32 8
//L +   store i64 0, ptr %5, align 8
//L +   store i64 1, ptr %2, align 8
//L +   %6 = getelementptr inbounds nuw i8, ptr %2, i32 8
//L +   store i64 3, ptr %6, align 8
//L +   store i64 1, ptr %3, align 8
//L +   %7 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   store i64 3, ptr %7, align 8
//L +   %8 = load i64, ptr %3, align 8
//L +   %9 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   %10 = load i64, ptr %9, align 8
//L +   %11 = load i64, ptr %3, align 8
//L +   %12 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   %13 = load i64, ptr %12, align 8
//L +   %14 = add i64 %13, 1
//L +   store i64 %8, ptr %4, align 8
//L +   %15 = getelementptr inbounds nuw i8, ptr %4, i32 8
//L +   store i64 %14, ptr %15, align 8
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S2f2FvE() {
//L +   %1 = alloca i8, i64 16, align 8
//L +   %2 = alloca i8, i64 16, align 8
//L +   %3 = alloca i8, i64 16, align 8
//L +   %4 = alloca i8, i64 16, align 8
//L +   store i64 0, ptr %1, align 8
//L +   %5 = getelementptr inbounds nuw i8, ptr %1, i32 8
//L +   store i64 0, ptr %5, align 8
//L +   store i64 1, ptr %2, align 8
//L +   %6 = getelementptr inbounds nuw i8, ptr %2, i32 8
//L +   store i64 2, ptr %6, align 8
//L +   store i64 1, ptr %3, align 8
//L +   %7 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   store i64 2, ptr %7, align 8
//L +   %8 = load i64, ptr %3, align 8
//L +   %9 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   %10 = load i64, ptr %9, align 8
//L +   %11 = load i64, ptr %3, align 8
//L +   %12 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   %13 = load i64, ptr %12, align 8
//L +   store i64 %8, ptr %4, align 8
//L +   %14 = getelementptr inbounds nuw i8, ptr %4, i32 8
//L +   store i64 %13, ptr %14, align 8
//L +   ret void
//L + }
//L +
//L + !llvm.module.flags = !{!0}
//L +
//L + !0 = !{i32 2, !"Debug Info Version", i32 3}
