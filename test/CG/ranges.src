// R      %srcc --ir --target x86_64-unknown-linux %s
// R[//L] %srcc --llvm --target x86_64-unknown-linux %s
program test;

proc a (range<int> x) = 3..=4;
proc b (range<int> x) = 3..<4;
proc c = 2..=4;

proc f1 {
    range<int> a;
    range<int> b = 1..=2;
    var c = 1..=2;
    var d = c.start..=c.end;
    var e = (1..=2).start..=(1..=2).end;
}

proc f2 {
    range<int> a;
    range<int> b = 1..<2;
    var c = 1..<2;
    var d = c.start..<c.end;
    var e = (1..<2).start..=(1..<2).end;
}

proc f3 {
    range<i27> a;
    range<i27> b = 1..<2;
    range<i27> d = b.start..<b.end;
    range<i27> e = ((1..<2) as range<i27>).start..<((1..<2) as range<i27>).end;
}

range<i13> x;
var y = c();

// * proc __src_assert_fail (ptr) external fastcc;
// +
// + proc __src_int_arith_error (ptr) external fastcc;
// +
// + proc __src_main external fastcc {
// +     #0 = 4, align 2
// +     #1 = 16, align 8
// +     #2 = 16, align 8
// +
// + entry:
// +     store #0, i16 0, align 2
// +     %0 = ptradd #0, 2
// +     store %0, i16 0, align 2
// +     %1 = call fastcc (i64, i64) _S1cFqiE()
// +     store #2, i64 %1:0, align 8
// +     %2 = ptradd #2, 8
// +     store %2, i64 %1:1, align 8
// +     %3 = load i64, #2, align 8
// +     %4 = ptradd #2, 8
// +     %5 = load i64, %4, align 8
// +     store #1, i64 %3, align 8
// +     %6 = ptradd #1, 8
// +     store %6, i64 %5, align 8
// +     ret
// + }
// +
// + proc _S1cFqiE private fastcc -> (i64, i64) {
// +     #0 = 16, align 8
// +
// + entry:
// +     store #0, i64 2, align 8
// +     %0 = ptradd #0, 8
// +     store %0, i64 5, align 8
// +     %1 = load i64, #0, align 8
// +     %2 = ptradd #0, 8
// +     %3 = load i64, %2, align 8
// +     ret i64 %1, i64 %3
// + }
// +
// + proc _S1aFqiqiE (i64 %0, i64 %1) private fastcc -> (i64, i64) {
// +     #0 = 16, align 8
// +     #1 = 16, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     %2 = ptradd #0, 8
// +     store %2, i64 %1, align 8
// +     store #1, i64 3, align 8
// +     %3 = ptradd #1, 8
// +     store %3, i64 5, align 8
// +     %4 = load i64, #1, align 8
// +     %5 = ptradd #1, 8
// +     %6 = load i64, %5, align 8
// +     ret i64 %4, i64 %6
// + }
// +
// + proc _S1bFqiqiE (i64 %0, i64 %1) private fastcc -> (i64, i64) {
// +     #0 = 16, align 8
// +     #1 = 16, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     %2 = ptradd #0, 8
// +     store %2, i64 %1, align 8
// +     store #1, i64 3, align 8
// +     %3 = ptradd #1, 8
// +     store %3, i64 4, align 8
// +     %4 = load i64, #1, align 8
// +     %5 = ptradd #1, 8
// +     %6 = load i64, %5, align 8
// +     ret i64 %4, i64 %6
// + }
// +
// + proc _S2f1FvE private fastcc {
// +     #0 = 16, align 8
// +     #1 = 16, align 8
// +     #2 = 16, align 8
// +     #3 = 16, align 8
// +     #4 = 16, align 8
// +
// + entry:
// +     store #0, i64 0, align 8
// +     %0 = ptradd #0, 8
// +     store %0, i64 0, align 8
// +     store #1, i64 1, align 8
// +     %1 = ptradd #1, 8
// +     store %1, i64 3, align 8
// +     store #2, i64 1, align 8
// +     %2 = ptradd #2, 8
// +     store %2, i64 3, align 8
// +     %3 = load i64, #2, align 8
// +     %4 = ptradd #2, 8
// +     %5 = load i64, %4, align 8
// +     %6 = add i64 %5, 1
// +     store #3, i64 %3, align 8
// +     %7 = ptradd #3, 8
// +     store %7, i64 %6, align 8
// +     store #4, i64 1, align 8
// +     %8 = ptradd #4, 8
// +     store %8, i64 4, align 8
// +     ret
// + }
// +
// + proc _S2f2FvE private fastcc {
// +     #0 = 16, align 8
// +     #1 = 16, align 8
// +     #2 = 16, align 8
// +     #3 = 16, align 8
// +     #4 = 16, align 8
// +
// + entry:
// +     store #0, i64 0, align 8
// +     %0 = ptradd #0, 8
// +     store %0, i64 0, align 8
// +     store #1, i64 1, align 8
// +     %1 = ptradd #1, 8
// +     store %1, i64 2, align 8
// +     store #2, i64 1, align 8
// +     %2 = ptradd #2, 8
// +     store %2, i64 2, align 8
// +     %3 = load i64, #2, align 8
// +     %4 = ptradd #2, 8
// +     %5 = load i64, %4, align 8
// +     store #3, i64 %3, align 8
// +     %6 = ptradd #3, 8
// +     store %6, i64 %5, align 8
// +     store #4, i64 1, align 8
// +     %7 = ptradd #4, 8
// +     store %7, i64 3, align 8
// +     ret
// + }
// +
// + proc _S2f3FvE private fastcc {
// +     #0 = 8, align 4
// +     #1 = 8, align 4
// +     #2 = 8, align 4
// +     #3 = 8, align 4
// +
// + entry:
// +     store #0, i32 0, align 4
// +     %0 = ptradd #0, 4
// +     store %0, i32 0, align 4
// +     store #1, i32 1, align 4
// +     %1 = ptradd #1, 4
// +     store %1, i32 2, align 4
// +     %2 = load i32, #1, align 4
// +     %3 = trunc i32 %2 to i27
// +     %4 = ptradd #1, 4
// +     %5 = load i32, %4, align 4
// +     %6 = trunc i32 %5 to i27
// +     %7 = sext i27 %3 to i32
// +     store #2, i32 %7, align 4
// +     %8 = sext i27 %6 to i32
// +     %9 = ptradd #2, 4
// +     store %9, i32 %8, align 4
// +     store #3, i32 1, align 4
// +     %10 = ptradd #3, 4
// +     store %10, i32 2, align 4
// +     ret
// + }

//L * ; ModuleID = 'test'
//L + source_filename = "test"
//L + target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
//L + target triple = "x86_64-unknown-linux-gnu"
//L +
//L + ; Function Attrs: nounwind
//L + declare fastcc void @__src_assert_fail(ptr) #0
//L +
//L + ; Function Attrs: nounwind
//L + declare fastcc void @__src_int_arith_error(ptr) #0
//L +
//L + ; Function Attrs: nounwind
//L + define fastcc void @__src_main() #0 {
//L +   %1 = alloca i8, i64 4, align 2
//L +   %2 = alloca i8, i64 16, align 8
//L +   %3 = alloca i8, i64 16, align 8
//L +   store i16 0, ptr %1, align 2
//L +   %4 = getelementptr inbounds nuw i8, ptr %1, i32 2
//L +   store i16 0, ptr %4, align 2
//L +   %5 = call fastcc { i64, i64 } @_S1cFqiE()
//L +   %6 = extractvalue { i64, i64 } %5, 0
//L +   %7 = extractvalue { i64, i64 } %5, 1
//L +   store i64 %6, ptr %3, align 8
//L +   %8 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   store i64 %7, ptr %8, align 8
//L +   %9 = load i64, ptr %3, align 8
//L +   %10 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   %11 = load i64, ptr %10, align 8
//L +   store i64 %9, ptr %2, align 8
//L +   %12 = getelementptr inbounds nuw i8, ptr %2, i32 8
//L +   store i64 %11, ptr %12, align 8
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc { i64, i64 } @_S1cFqiE() #0 {
//L +   %1 = alloca i8, i64 16, align 8
//L +   store i64 2, ptr %1, align 8
//L +   %2 = getelementptr inbounds nuw i8, ptr %1, i32 8
//L +   store i64 5, ptr %2, align 8
//L +   %3 = load i64, ptr %1, align 8
//L +   %4 = getelementptr inbounds nuw i8, ptr %1, i32 8
//L +   %5 = load i64, ptr %4, align 8
//L +   %6 = insertvalue { i64, i64 } undef, i64 %3, 0
//L +   %7 = insertvalue { i64, i64 } %6, i64 %5, 1
//L +   ret { i64, i64 } %7
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc { i64, i64 } @_S1aFqiqiE(i64 %0, i64 %1) #0 {
//L +   %3 = alloca i8, i64 16, align 8
//L +   %4 = alloca i8, i64 16, align 8
//L +   store i64 %0, ptr %3, align 8
//L +   %5 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   store i64 %1, ptr %5, align 8
//L +   store i64 3, ptr %4, align 8
//L +   %6 = getelementptr inbounds nuw i8, ptr %4, i32 8
//L +   store i64 5, ptr %6, align 8
//L +   %7 = load i64, ptr %4, align 8
//L +   %8 = getelementptr inbounds nuw i8, ptr %4, i32 8
//L +   %9 = load i64, ptr %8, align 8
//L +   %10 = insertvalue { i64, i64 } undef, i64 %7, 0
//L +   %11 = insertvalue { i64, i64 } %10, i64 %9, 1
//L +   ret { i64, i64 } %11
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc { i64, i64 } @_S1bFqiqiE(i64 %0, i64 %1) #0 {
//L +   %3 = alloca i8, i64 16, align 8
//L +   %4 = alloca i8, i64 16, align 8
//L +   store i64 %0, ptr %3, align 8
//L +   %5 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   store i64 %1, ptr %5, align 8
//L +   store i64 3, ptr %4, align 8
//L +   %6 = getelementptr inbounds nuw i8, ptr %4, i32 8
//L +   store i64 4, ptr %6, align 8
//L +   %7 = load i64, ptr %4, align 8
//L +   %8 = getelementptr inbounds nuw i8, ptr %4, i32 8
//L +   %9 = load i64, ptr %8, align 8
//L +   %10 = insertvalue { i64, i64 } undef, i64 %7, 0
//L +   %11 = insertvalue { i64, i64 } %10, i64 %9, 1
//L +   ret { i64, i64 } %11
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc void @_S2f1FvE() #0 {
//L +   %1 = alloca i8, i64 16, align 8
//L +   %2 = alloca i8, i64 16, align 8
//L +   %3 = alloca i8, i64 16, align 8
//L +   %4 = alloca i8, i64 16, align 8
//L +   %5 = alloca i8, i64 16, align 8
//L +   store i64 0, ptr %1, align 8
//L +   %6 = getelementptr inbounds nuw i8, ptr %1, i32 8
//L +   store i64 0, ptr %6, align 8
//L +   store i64 1, ptr %2, align 8
//L +   %7 = getelementptr inbounds nuw i8, ptr %2, i32 8
//L +   store i64 3, ptr %7, align 8
//L +   store i64 1, ptr %3, align 8
//L +   %8 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   store i64 3, ptr %8, align 8
//L +   %9 = load i64, ptr %3, align 8
//L +   %10 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   %11 = load i64, ptr %10, align 8
//L +   %12 = add i64 %11, 1
//L +   store i64 %9, ptr %4, align 8
//L +   %13 = getelementptr inbounds nuw i8, ptr %4, i32 8
//L +   store i64 %12, ptr %13, align 8
//L +   store i64 1, ptr %5, align 8
//L +   %14 = getelementptr inbounds nuw i8, ptr %5, i32 8
//L +   store i64 4, ptr %14, align 8
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc void @_S2f2FvE() #0 {
//L +   %1 = alloca i8, i64 16, align 8
//L +   %2 = alloca i8, i64 16, align 8
//L +   %3 = alloca i8, i64 16, align 8
//L +   %4 = alloca i8, i64 16, align 8
//L +   %5 = alloca i8, i64 16, align 8
//L +   store i64 0, ptr %1, align 8
//L +   %6 = getelementptr inbounds nuw i8, ptr %1, i32 8
//L +   store i64 0, ptr %6, align 8
//L +   store i64 1, ptr %2, align 8
//L +   %7 = getelementptr inbounds nuw i8, ptr %2, i32 8
//L +   store i64 2, ptr %7, align 8
//L +   store i64 1, ptr %3, align 8
//L +   %8 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   store i64 2, ptr %8, align 8
//L +   %9 = load i64, ptr %3, align 8
//L +   %10 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   %11 = load i64, ptr %10, align 8
//L +   store i64 %9, ptr %4, align 8
//L +   %12 = getelementptr inbounds nuw i8, ptr %4, i32 8
//L +   store i64 %11, ptr %12, align 8
//L +   store i64 1, ptr %5, align 8
//L +   %13 = getelementptr inbounds nuw i8, ptr %5, i32 8
//L +   store i64 3, ptr %13, align 8
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc void @_S2f3FvE() #0 {
//L +   %1 = alloca i8, i64 8, align 4
//L +   %2 = alloca i8, i64 8, align 4
//L +   %3 = alloca i8, i64 8, align 4
//L +   %4 = alloca i8, i64 8, align 4
//L +   store i32 0, ptr %1, align 4
//L +   %5 = getelementptr inbounds nuw i8, ptr %1, i32 4
//L +   store i32 0, ptr %5, align 4
//L +   store i32 1, ptr %2, align 4
//L +   %6 = getelementptr inbounds nuw i8, ptr %2, i32 4
//L +   store i32 2, ptr %6, align 4
//L +   %7 = load i32, ptr %2, align 4
//L +   %8 = trunc i32 %7 to i27
//L +   %9 = getelementptr inbounds nuw i8, ptr %2, i32 4
//L +   %10 = load i32, ptr %9, align 4
//L +   %11 = trunc i32 %10 to i27
//L +   %12 = sext i27 %8 to i32
//L +   store i32 %12, ptr %3, align 4
//L +   %13 = sext i27 %11 to i32
//L +   %14 = getelementptr inbounds nuw i8, ptr %3, i32 4
//L +   store i32 %13, ptr %14, align 4
//L +   store i32 1, ptr %4, align 4
//L +   %15 = getelementptr inbounds nuw i8, ptr %4, i32 4
//L +   store i32 2, ptr %15, align 4
//L +   ret void
//L + }
//L +
//L + attributes #0 = { nounwind }
//L +
//L + !llvm.module.flags = !{!0}
//L +
//L + !0 = !{i32 2, !"Debug Info Version", i32 3}
