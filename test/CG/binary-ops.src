// R %srcc --ir --short-filenames %s
program test;

proc sink (in int) {}
proc sink (in bool) {}

proc arith_checked (in int a, in int b) {
    sink(a + b);
    sink(a - b);
    sink(a * b);

    sink(a / b);
    sink(a % b);
    sink(a :/ b);
    sink(a :% b);

    sink(a << b);
    sink(a <<< b);
}

proc arith (in int a, in int b) {
    sink(a +~ b);
    sink(a -~ b);
    sink(a *~ b);

    sink(a >> b);
    sink(a >>> b);

    sink(a & b);
    sink(a | b);

    sink(a < b);
    sink(a <= b);
    sink(a > b);
    sink(a >= b);

    sink(a <: b);
    sink(a <=: b);
    sink(a :> b);
    sink(a :>= b);

    sink(a == b);
    sink(a != b);
}

// * proc __src_main {
// + entry:
// +     ret
// + }
// +
// + proc _S4sinkFvxiE (in int %0) {
// + entry:
// +     ret
// + }
// +
// + proc _S4sinkFvxbE (in bool %0) {
// + entry:
// +     ret
// + }
// +
// + proc _S13arith_checkedFvxixiE (in int %0, in int %1) {
// + entry:
// +     %2 = sadd ov %0, %1
// +     br %2:1 to bb1 else bb2
// +
// + bb1:
// +     abort at <binary-ops.src:8:10> __src_int_arith_error(s"+", s"integer overflow")
// +
// + bb2:
// +     call void _S4sinkFvxiE(%2:0)
// +     %3 = ssub ov %0, %1
// +     br %3:1 to bb3 else bb4
// +
// + bb3:
// +     abort at <binary-ops.src:9:10> __src_int_arith_error(s"-", s"integer overflow")
// +
// + bb4:
// +     call void _S4sinkFvxiE(%3:0)
// +     %4 = smul ov %0, %1
// +     br %4:1 to bb5 else bb6
// +
// + bb5:
// +     abort at <binary-ops.src:10:10> __src_int_arith_error(s"*", s"integer overflow")
// +
// + bb6:
// +     call void _S4sinkFvxiE(%4:0)
// +     %5 = icmp eq %1, int 0
// +     br %5 to bb7 else bb8
// +
// + bb7:
// +     abort at <binary-ops.src:12:10> __src_int_arith_error(s"/", s"division by zero")
// +
// + bb8:
// +     %6 = icmp eq %0, int -9223372036854775808
// +     %7 = icmp eq %1, int -1
// +     %8 = and %6, %7
// +     br %8 to bb9 else bb10
// +
// + bb9:
// +     abort at <binary-ops.src:12:10> __src_int_arith_error(s"/", s"integer overflow")
// +
// + bb10:
// +     %9 = sdiv %0, %1
// +     call void _S4sinkFvxiE(%9)
// +     %10 = icmp eq %1, int 0
// +     br %10 to bb11 else bb12
// +
// + bb11:
// +     abort at <binary-ops.src:13:10> __src_int_arith_error(s"%", s"division by zero")
// +
// + bb12:
// +     %11 = icmp eq %0, int -9223372036854775808
// +     %12 = icmp eq %1, int -1
// +     %13 = and %11, %12
// +     br %13 to bb13 else bb14
// +
// + bb13:
// +     abort at <binary-ops.src:13:10> __src_int_arith_error(s"%", s"integer overflow")
// +
// + bb14:
// +     %14 = srem %0, %1
// +     call void _S4sinkFvxiE(%14)
// +     %15 = icmp eq %1, int 0
// +     br %15 to bb15 else bb16
// +
// + bb15:
// +     abort at <binary-ops.src:14:10> __src_int_arith_error(s":/", s"division by zero")
// +
// + bb16:
// +     %16 = udiv %0, %1
// +     call void _S4sinkFvxiE(%16)
// +     %17 = icmp eq %1, int 0
// +     br %17 to bb17 else bb18
// +
// + bb17:
// +     abort at <binary-ops.src:15:10> __src_int_arith_error(s":%", s"division by zero")
// +
// + bb18:
// +     %18 = urem %0, %1
// +     call void _S4sinkFvxiE(%18)
// +     %19 = icmp uge %1, int 64
// +     br %19 to bb19 else bb20
// +
// + bb19:
// +     abort at <binary-ops.src:17:10> __src_int_arith_error(s"<<", s"shift amount exceeds bit width")
// +
// + bb20:
// +     %20 = shl %0, %1
// +     %21 = ashr %0, int 63
// +     %22 = ashr %20, int 63
// +     %23 = icmp ne %21, %22
// +     br %23 to bb21 else bb22
// +
// + bb21:
// +     abort at <binary-ops.src:17:10> __src_int_arith_error(s"<<", s"integer overflow")
// +
// + bb22:
// +     call void _S4sinkFvxiE(%20)
// +     %24 = icmp uge %1, int 64
// +     br %24 to bb23 else bb24
// +
// + bb23:
// +     abort at <binary-ops.src:18:10> __src_int_arith_error(s"<<<", s"shift amount exceeds bit width")
// +
// + bb24:
// +     %25 = shl %0, %1
// +     call void _S4sinkFvxiE(%25)
// +     ret
// + }
// +
// + proc _S5arithFvxixiE (in int %0, in int %1) {
// + entry:
// +     %2 = add %0, %1
// +     call void _S4sinkFvxiE(%2)
// +     %3 = sub %0, %1
// +     call void _S4sinkFvxiE(%3)
// +     %4 = imul %0, %1
// +     call void _S4sinkFvxiE(%4)
// +     %5 = ashr %0, %1
// +     call void _S4sinkFvxiE(%5)
// +     %6 = lshr %0, %1
// +     call void _S4sinkFvxiE(%6)
// +     %7 = and %0, %1
// +     call void _S4sinkFvxiE(%7)
// +     %8 = or %0, %1
// +     call void _S4sinkFvxiE(%8)
// +     %9 = icmp slt %0, %1
// +     call void _S4sinkFvxbE(%9)
// +     %10 = icmp sle %0, %1
// +     call void _S4sinkFvxbE(%10)
// +     %11 = icmp sgt %0, %1
// +     call void _S4sinkFvxbE(%11)
// +     %12 = icmp sge %0, %1
// +     call void _S4sinkFvxbE(%12)
// +     %13 = icmp ult %0, %1
// +     call void _S4sinkFvxbE(%13)
// +     %14 = icmp ule %0, %1
// +     call void _S4sinkFvxbE(%14)
// +     %15 = icmp ugt %0, %1
// +     call void _S4sinkFvxbE(%15)
// +     %16 = icmp uge %0, %1
// +     call void _S4sinkFvxbE(%16)
// +     %17 = icmp eq %0, %1
// +     call void _S4sinkFvxbE(%17)
// +     %18 = icmp ne %0, %1
// +     call void _S4sinkFvxbE(%18)
// +     ret
// + }
