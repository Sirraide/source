// R %srcc --ir %s
program test;

proc a (void a, void b) {}
proc b { a(void(), void()); }
proc c { return void(); }

void e;
void f;
e = f;
f = e;
e;
e;

proc h = void();
proc i = h();
proc j { return h() }

proc calls {
    void g = b();
    g = c();
    a(i(), j());
}

proc interleaved1 (in int a, void b, in int c, void d) = a | c;
proc interleaved2 (int a, void b, int c, void d) = a | c;
interleaved1(2, void(), 3, void());
interleaved2(2, void(), 3, void());

// * proc __src_main {
// + entry:
// +     %0 = call int _S12interleaved1FixivxivE(int 2, int 3)
// +     %1 = call int _S12interleaved2FiivivE(int 2, int 3)
// +     ret
// + }
// +
// + proc _S12interleaved1FixivxivE (in int %0, in int %1) -> int {
// + entry:
// +     %2 = or %0, %1
// +     ret %2
// + }
// +
// + proc _S12interleaved2FiivivE (int %0, int %1) -> int {
// +     %2 = int
// +     %3 = int
// +
// + entry:
// +     store int to %2, %0, align 8
// +     store int to %3, %1, align 8
// +     %4 = load int, %2, align 8
// +     %5 = load int, %3, align 8
// +     %6 = or %4, %5
// +     ret %6
// + }
// +
// + proc _S1aFvvvE {
// + entry:
// +     ret
// + }
// +
// + proc _S1bFvE {
// + entry:
// +     call void _S1aFvvvE
// +     ret
// + }
// +
// + proc _S1cFvE {
// + entry:
// +     ret
// + }
// +
// + proc _S1hFvE {
// + entry:
// +     ret
// + }
// +
// + proc _S1iFvE {
// + entry:
// +     call void _S1hFvE
// +     ret
// + }
// +
// + proc _S1jFvE {
// + entry:
// +     call void _S1hFvE
// +     ret
// + }
// +
// + proc _S5callsFvE {
// + entry:
// +     call void _S1bFvE
// +     call void _S1cFvE
// +     call void _S1iFvE
// +     call void _S1jFvE
// +     call void _S1aFvvvE
// +     ret
// + }
