// R %srcc --ir %s
program test;

proc a (void a, void b) {}
proc b { a(void(), void()); }
proc c { return void(); }

void e;
void f;
e = f;
f = e;
e;
e;

proc h = void();
proc i = h();
proc j { return h(); }

proc calls {
    void g = b();
    g = c();
    a(i(), j());
}

proc interleaved1 (in int a, void b, in int c, void d) = a | c;
proc interleaved2 (int a, void b, int c, void d) = a | c;
interleaved1(2, void(), 3, void());
interleaved2(2, void(), 3, void());

// * proc __src_assert_fail (ptr) external fastcc;
// +
// + proc __src_int_arith_error (ptr) external fastcc;
// +
// + proc __src_main external fastcc {
// + entry:
// +     %0 = call fastcc i64 _S12interleaved1FixivxivE(i64 2, i64 3)
// +     %1 = call fastcc i64 _S12interleaved2FiivivE(i64 2, i64 3)
// +     ret
// + }
// +
// + proc _S12interleaved1FixivxivE (i64 %0, i64 %1) private fastcc -> i64 {
// + entry:
// +     %2 = or i64 %0, %1
// +     ret i64 %2
// + }
// +
// + proc _S12interleaved2FiivivE (i64 %0, i64 %1) private fastcc -> i64 {
// +     #0 = 8, align 8
// +     #1 = 8, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     store #1, i64 %1, align 8
// +     %2 = load i64, #0, align 8
// +     %3 = load i64, #1, align 8
// +     %4 = or i64 %2, %3
// +     ret i64 %4
// + }
// +
// + proc _S1aFvvvE private fastcc {
// + entry:
// +     ret
// + }
// +
// + proc _S1bFvE private fastcc {
// + entry:
// +     call fastcc void _S1aFvvvE()
// +     ret
// + }
// +
// + proc _S1cFvE private fastcc {
// + entry:
// +     ret
// + }
// +
// + proc _S1hFvE private fastcc {
// + entry:
// +     ret
// + }
// +
// + proc _S1iFvE private fastcc {
// + entry:
// +     call fastcc void _S1hFvE()
// +     ret
// + }
// +
// + proc _S1jFvE private fastcc {
// + entry:
// +     call fastcc void _S1hFvE()
// +     ret
// + }
// +
// + proc _S5callsFvE private fastcc {
// + entry:
// +     call fastcc void _S1bFvE()
// +     call fastcc void _S1cFvE()
// +     call fastcc void _S1iFvE()
// +     call fastcc void _S1jFvE()
// +     call fastcc void _S1aFvvvE()
// +     ret
// + }
