// R      %srcc --ir --target x86_64-unknown-linux %s
// R[//L] %srcc --llvm --target x86_64-unknown-linux %s
program test;

struct x { i64 a; }

var a = x(1);
var b = a;

struct y { i64 a; i64 b; i64 c; }

var c = y(1, 2, 3);
var d = c;

// * proc __src_assert_fail (ptr) external fastcc;
// +
// + proc __src_int_arith_error (ptr) external fastcc;
// +
// + proc __src_main external fastcc {
// +     #0 = 8, align 8
// +     #1 = 8, align 8
// +     #2 = 24, align 8
// +     #3 = 24, align 8
// +
// + entry:
// +     store #0, i64 1, align 8
// +     copy #1 <- #0, 8
// +     store #2, i64 1, align 8
// +     %0 = ptradd #2, 8
// +     store %0, i64 2, align 8
// +     %1 = ptradd #2, 16
// +     store %1, i64 3, align 8
// +     copy #3 <- #2, 24
// +     ret
// + }

//L * ; ModuleID = 'test'
//L + source_filename = "test"
//L + target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
//L + target triple = "x86_64-unknown-linux-gnu"
//L +
//L + declare fastcc void @__src_assert_fail(ptr)
//L +
//L + declare fastcc void @__src_int_arith_error(ptr)
//L +
//L + define fastcc void @__src_main() {
//L +   %1 = alloca i8, i64 8, align 8
//L +   %2 = alloca i8, i64 8, align 8
//L +   %3 = alloca i8, i64 24, align 8
//L +   %4 = alloca i8, i64 24, align 8
//L +   store i64 1, ptr %1, align 8
//L +   call void @llvm.memcpy.p0.p0.i64(ptr %2, ptr %1, i64 8, i1 false)
//L +   store i64 1, ptr %3, align 8
//L +   %5 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   store i64 2, ptr %5, align 8
//L +   %6 = getelementptr inbounds nuw i8, ptr %3, i32 16
//L +   store i64 3, ptr %6, align 8
//L +   call void @llvm.memcpy.p0.p0.i64(ptr %4, ptr %3, i64 24, i1 false)
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
//L + declare void @llvm.memcpy.p0.p0.i64(ptr noalias writeonly captures(none), ptr noalias readonly captures(none), i64, i1 immarg) #0
//L +
//L + attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
//L +
//L + !llvm.module.flags = !{!0}
//L +
//L + !0 = !{i32 2, !"Debug Info Version", i32 3}
