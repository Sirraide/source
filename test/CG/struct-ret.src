// R      %srcc --ir --target x86_64-unknown-linux %s
// R[//L] %srcc --llvm --target x86_64-unknown-linux %s
program test;

struct x { int a; }

proc a extern -> x;
proc b = x(1);
proc c(int a) -> x {
    return x(a);
}

proc d -> x {
    var a = x(1);
    return a;
}

proc e -> x {
    var a = d();
    return (d());
}

proc f {
    d();
}

// * proc __src_assert_fail (ptr) external fastcc;
// +
// + proc __src_int_arith_error (ptr) external fastcc;
// +
// + proc __src_main external fastcc {
// + entry:
// +     ret
// + }
// +
// + proc _S1bFT1xE indirect private fastcc {
// + entry:
// +     store retptr, i64 1, align 8
// +     ret
// + }
// +
// + proc _S1cFT1xiE (i64 %0) indirect private fastcc {
// +     #0 = 8, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     %1 = load i64, #0, align 8
// +     store retptr, i64 %1, align 8
// +     ret
// + }
// +
// + proc _S1dFT1xE indirect private fastcc {
// +     #0 = 8, align 8
// +
// + entry:
// +     store #0, i64 1, align 8
// +     copy retptr, #0, 8
// +     ret
// + }
// +
// + proc _S1eFT1xE indirect private fastcc {
// +     #0 = 8, align 8
// +
// + entry:
// +     call fastcc void _S1dFT1xE() into #0
// +     call fastcc void _S1dFT1xE() into retptr
// +     ret
// + }
// +
// + proc _S1fFvE private fastcc {
// +     #0 = 8, align 8
// +
// + entry:
// +     call fastcc void _S1dFT1xE() into #0
// +     ret
// + }

//L * ; ModuleID = 'test'
//L + source_filename = "test"
//L + target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
//L + target triple = "x86_64-unknown-linux-gnu"
//L +
//L + declare fastcc void @__src_assert_fail(ptr)
//L +
//L + declare fastcc void @__src_int_arith_error(ptr)
//L +
//L + define fastcc void @__src_main() {
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S1bFT1xE(ptr %0) {
//L +   store i64 1, ptr %0, align 8
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S1cFT1xiE(ptr %0, i64 %1) {
//L +   %3 = alloca i8, i64 8, align 8
//L +   store i64 %1, ptr %3, align 8
//L +   %4 = load i64, ptr %3, align 8
//L +   store i64 %4, ptr %0, align 8
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S1dFT1xE(ptr %0) {
//L +   %2 = alloca i8, i64 8, align 8
//L +   store i64 1, ptr %2, align 8
//L +   call void @llvm.memcpy.p0.p0.i64(ptr %0, ptr %2, i64 8, i1 false)
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S1eFT1xE(ptr %0) {
//L +   %2 = alloca i8, i64 8, align 8
//L +   call fastcc void @_S1dFT1xE(ptr %2)
//L +   call fastcc void @_S1dFT1xE(ptr %0)
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S1fFvE() {
//L +   %1 = alloca i8, i64 8, align 8
//L +   call fastcc void @_S1dFT1xE(ptr %1)
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
//L + declare void @llvm.memcpy.p0.p0.i64(ptr noalias writeonly captures(none), ptr noalias readonly captures(none), i64, i1 immarg) #0
//L +
//L + attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
//L +
//L + !llvm.module.flags = !{!0}
//L +
//L + !0 = !{i32 2, !"Debug Info Version", i32 3}
