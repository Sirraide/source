// R      %srcc --ir --target x86_64-unknown-linux %s
// R[//L] %srcc --llvm --target x86_64-unknown-linux %s
program test;

proc while_simple {
    int i;
    while i < 10 do i = i +~ 1;
}

proc while_nested {
    int i;
    while i < 10 do {
        int j;
        while j < 10 do j = j +~ 1;
        i = i +~ 1;
    }
}

proc while_infinite {
    int i;
    while true {
        i = i +~ 1;
    }
}

proc while_infinite_empty {
    while true {};
}

// * proc __src_main external fastcc {
// + entry:
// +     ret
// + }
// +
// + proc _S12while_simpleFvE private fastcc {
// +     #0 = 8, align 8
// +
// + entry:
// +     store #0, i64 0, align 8
// +     br bb1
// +
// + bb1:
// +     %0 = load i64, #0, align 8
// +     %1 = icmp slt i64 %0, 10
// +     br %1 to bb2 else bb3
// +
// + bb2:
// +     %2 = load i64, #0, align 8
// +     %3 = add i64 %2, 1
// +     store #0, i64 %3, align 8
// +     br bb1
// +
// + bb3:
// +     ret
// + }
// +
// + proc _S12while_nestedFvE private fastcc {
// +     #0 = 8, align 8
// +     #1 = 8, align 8
// +
// + entry:
// +     store #0, i64 0, align 8
// +     br bb1
// +
// + bb1:
// +     %0 = load i64, #0, align 8
// +     %1 = icmp slt i64 %0, 10
// +     br %1 to bb2 else bb6
// +
// + bb2:
// +     store #1, i64 0, align 8
// +     br bb3
// +
// + bb3:
// +     %2 = load i64, #1, align 8
// +     %3 = icmp slt i64 %2, 10
// +     br %3 to bb4 else bb5
// +
// + bb4:
// +     %4 = load i64, #1, align 8
// +     %5 = add i64 %4, 1
// +     store #1, i64 %5, align 8
// +     br bb3
// +
// + bb5:
// +     %6 = load i64, #0, align 8
// +     %7 = add i64 %6, 1
// +     store #0, i64 %7, align 8
// +     br bb1
// +
// + bb6:
// +     ret
// + }
// +
// + proc _S14while_infiniteFvE private fastcc {
// +     #0 = 8, align 8
// +
// + entry:
// +     store #0, i64 0, align 8
// +     br bb1
// +
// + bb1:
// +     %0 = load i64, #0, align 8
// +     %1 = add i64 %0, 1
// +     store #0, i64 %1, align 8
// +     br bb1
// + }
// +
// + proc _S20while_infinite_emptyFvE private fastcc {
// + entry:
// +     br bb1
// +
// + bb1:
// +     br bb1
// + }

//L * ; ModuleID = 'test'
//L + source_filename = "test"
//L + target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
//L + target triple = "x86_64-unknown-linux-gnu"
//L +
//L + ; Function Attrs: nounwind
//L + define fastcc void @__src_main() #0 {
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc void @_S12while_simpleFvE() #0 {
//L +   %1 = alloca i8, i64 8, align 8
//L +   store i64 0, ptr %1, align 8
//L +   br label %2
//L +
//L + 2:                                                ; preds = %5, %0
//L +   %3 = load i64, ptr %1, align 8
//L +   %4 = icmp slt i64 %3, 10
//L +   br i1 %4, label %5, label %8
//L +
//L + 5:                                                ; preds = %2
//L +   %6 = load i64, ptr %1, align 8
//L +   %7 = add i64 %6, 1
//L +   store i64 %7, ptr %1, align 8
//L +   br label %2
//L +
//L + 8:                                                ; preds = %2
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc void @_S12while_nestedFvE() #0 {
//L +   %1 = alloca i8, i64 8, align 8
//L +   %2 = alloca i8, i64 8, align 8
//L +   store i64 0, ptr %1, align 8
//L +   br label %3
//L +
//L + 3:                                                ; preds = %13, %0
//L +   %4 = load i64, ptr %1, align 8
//L +   %5 = icmp slt i64 %4, 10
//L +   br i1 %5, label %6, label %16
//L +
//L + 6:                                                ; preds = %3
//L +   store i64 0, ptr %2, align 8
//L +   br label %7
//L +
//L + 7:                                                ; preds = %10, %6
//L +   %8 = load i64, ptr %2, align 8
//L +   %9 = icmp slt i64 %8, 10
//L +   br i1 %9, label %10, label %13
//L +
//L + 10:                                               ; preds = %7
//L +   %11 = load i64, ptr %2, align 8
//L +   %12 = add i64 %11, 1
//L +   store i64 %12, ptr %2, align 8
//L +   br label %7
//L +
//L + 13:                                               ; preds = %7
//L +   %14 = load i64, ptr %1, align 8
//L +   %15 = add i64 %14, 1
//L +   store i64 %15, ptr %1, align 8
//L +   br label %3
//L +
//L + 16:                                               ; preds = %3
//L +   ret void
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc void @_S14while_infiniteFvE() #0 {
//L +   %1 = alloca i8, i64 8, align 8
//L +   store i64 0, ptr %1, align 8
//L +   br label %2
//L +
//L + 2:                                                ; preds = %2, %0
//L +   %3 = load i64, ptr %1, align 8
//L +   %4 = add i64 %3, 1
//L +   store i64 %4, ptr %1, align 8
//L +   br label %2
//L + }
//L +
//L + ; Function Attrs: nounwind
//L + define private fastcc void @_S20while_infinite_emptyFvE() #0 {
//L +   br label %1
//L +
//L + 1:                                                ; preds = %1, %0
//L +   br label %1
//L + }
//L +
//L + attributes #0 = { nounwind }
//L +
//L + !llvm.module.flags = !{!0}
//L +
//L + !0 = !{i32 2, !"Debug Info Version", i32 3}
