// R      %srcc --ir -fno-overflow-checks --target x86_64-unknown-linux %s
// R[//L] %srcc --llvm -fno-overflow-checks --target x86_64-unknown-linux %s
program test;

proc f1 -> int {
    int a = 20;
    int b = 2;
    proc g = a;
    proc h = 20;
    return g() + h() + 2;
}

proc f2 -> int {
    int a = 20;
    proc g -> int {
        int b = 30;
        proc h = a + b;
        return h();
    }
    return g();
}

proc f3 -> int {
    int a = 22;
    int b = 20;

    proc h(bool recurse) -> int {
        return if recurse then g(false) else a;
    }

    proc g(bool recurse) -> int {
        return if recurse then h(false) else b;
    }

    return h(true) + g(true);
}

proc f4 -> int {
    int a = 1;
    proc g1 = a;
    proc g2 -> int {
        int b = 2;
        proc g3 = a + b;
        proc g4 = g1() + g3() + a + b;
        return g1() + g3() + g4() + a;
    }
    return g1() + g2();
}

// * proc __src_assert_fail (ptr) external fastcc;
// +
// + proc __src_int_arith_error (ptr) external fastcc;
// +
// + proc __src_main external fastcc {
// + entry:
// +     ret
// + }
// +
// + proc _S2f1FiE private fastcc -> i64 {
// +     #0 = 8, align 8
// +     #1 = 8, align 8
// +     #2 = 8, align 8
// +
// + entry:
// +     store #0, i64 20, align 8
// +     store #1, i64 2, align 8
// +     store #2, ptr #0, align 8
// +     %0 = call fastcc i64 _S2f1$1gFiE(ptr #2 nest)
// +     %1 = call fastcc i64 _S2f1$1hFiE()
// +     %2 = add i64 %0, %1
// +     %3 = add i64 %2, 2
// +     ret i64 %3
// + }
// +
// + proc _S2f1$1gFiE (ptr %0 nest) private fastcc -> i64 {
// + entry:
// +     %1 = load ptr, %0, align 8
// +     %2 = load i64, %1, align 8
// +     ret i64 %2
// + }
// +
// + proc _S2f1$1hFiE private fastcc -> i64 {
// + entry:
// +     ret i64 20
// + }
// +
// + proc _S2f2FiE private fastcc -> i64 {
// +     #0 = 8, align 8
// +     #1 = 8, align 8
// +
// + entry:
// +     store #0, i64 20, align 8
// +     store #1, ptr #0, align 8
// +     %0 = call fastcc i64 _S2f2$1gFiE(ptr #1 nest)
// +     ret i64 %0
// + }
// +
// + proc _S2f2$1gFiE (ptr %0 nest) private fastcc -> i64 {
// +     #0 = 8, align 8
// +     #1 = 16, align 8
// +
// + entry:
// +     store #0, i64 30, align 8
// +     store #1, ptr %0, align 8
// +     %1 = ptradd #1, 8
// +     store %1, ptr #0, align 8
// +     %2 = call fastcc i64 _S2f2$1g$1hFiE(ptr #1 nest)
// +     ret i64 %2
// + }
// +
// + proc _S2f3FiE private fastcc -> i64 {
// +     #0 = 8, align 8
// +     #1 = 8, align 8
// +     #2 = 16, align 8
// +     #3 = 16, align 8
// +
// + entry:
// +     store #0, i64 22, align 8
// +     store #1, i64 20, align 8
// +     store #2, ptr #0, align 8
// +     %0 = ptradd #2, 8
// +     store %0, ptr #1, align 8
// +     %1 = call fastcc i64 _S2f3$1hFibE(i1 true zeroext, ptr #2 nest)
// +     store #3, ptr #0, align 8
// +     %2 = ptradd #3, 8
// +     store %2, ptr #1, align 8
// +     %3 = call fastcc i64 _S2f3$1gFibE(i1 true zeroext, ptr #3 nest)
// +     %4 = add i64 %1, %3
// +     ret i64 %4
// + }
// +
// + proc _S2f3$1hFibE (i1 %0 zeroext, ptr %1 nest) private fastcc -> i64 {
// +     #0 = 1, align 1
// +
// + entry:
// +     %2 = sext i1 %0 to i8
// +     store #0, i8 %2, align 1
// +     %3 = load i8, #0, align 1
// +     %4 = trunc i8 %3 to i1
// +     br %4 to bb1 else bb2
// +
// + bb1:
// +     %5 = call fastcc i64 _S2f3$1gFibE(i1 false zeroext, ptr %1 nest)
// +     br bb3(%5)
// +
// + bb2:
// +     %6 = load ptr, %1, align 8
// +     %7 = load i64, %6, align 8
// +     br bb3(%7)
// +
// + bb3(i64 %8):
// +     ret i64 %8
// + }
// +
// + proc _S2f3$1gFibE (i1 %0 zeroext, ptr %1 nest) private fastcc -> i64 {
// +     #0 = 1, align 1
// +
// + entry:
// +     %2 = sext i1 %0 to i8
// +     store #0, i8 %2, align 1
// +     %3 = load i8, #0, align 1
// +     %4 = trunc i8 %3 to i1
// +     br %4 to bb1 else bb2
// +
// + bb1:
// +     %5 = call fastcc i64 _S2f3$1hFibE(i1 false zeroext, ptr %1 nest)
// +     br bb3(%5)
// +
// + bb2:
// +     %6 = ptradd %1, 8
// +     %7 = load ptr, %6, align 8
// +     %8 = load i64, %7, align 8
// +     br bb3(%8)
// +
// + bb3(i64 %9):
// +     ret i64 %9
// + }
// +
// + proc _S2f4FiE private fastcc -> i64 {
// +     #0 = 8, align 8
// +     #1 = 8, align 8
// +     #2 = 8, align 8
// +
// + entry:
// +     store #0, i64 1, align 8
// +     store #1, ptr #0, align 8
// +     %0 = call fastcc i64 _S2f4$2g1FiE(ptr #1 nest)
// +     store #2, ptr #0, align 8
// +     %1 = call fastcc i64 _S2f4$2g2FiE(ptr #2 nest)
// +     %2 = add i64 %0, %1
// +     ret i64 %2
// + }
// +
// + proc _S2f4$2g1FiE (ptr %0 nest) private fastcc -> i64 {
// + entry:
// +     %1 = load ptr, %0, align 8
// +     %2 = load i64, %1, align 8
// +     ret i64 %2
// + }
// +
// + proc _S2f4$2g2FiE (ptr %0 nest) private fastcc -> i64 {
// +     #0 = 8, align 8
// +     #1 = 16, align 8
// +     #2 = 16, align 8
// +
// + entry:
// +     store #0, i64 2, align 8
// +     %1 = call fastcc i64 _S2f4$2g1FiE(ptr %0 nest)
// +     store #1, ptr %0, align 8
// +     %2 = ptradd #1, 8
// +     store %2, ptr #0, align 8
// +     %3 = call fastcc i64 _S2f4$2g2$2g3FiE(ptr #1 nest)
// +     %4 = add i64 %1, %3
// +     store #2, ptr %0, align 8
// +     %5 = ptradd #2, 8
// +     store %5, ptr #0, align 8
// +     %6 = call fastcc i64 _S2f4$2g2$2g4FiE(ptr #2 nest)
// +     %7 = add i64 %4, %6
// +     %8 = load ptr, %0, align 8
// +     %9 = load i64, %8, align 8
// +     %10 = add i64 %7, %9
// +     ret i64 %10
// + }
// +
// + proc _S2f2$1g$1hFiE (ptr %0 nest) private fastcc -> i64 {
// + entry:
// +     %1 = load ptr, %0, align 8
// +     %2 = load ptr, %1, align 8
// +     %3 = load i64, %2, align 8
// +     %4 = ptradd %0, 8
// +     %5 = load ptr, %4, align 8
// +     %6 = load i64, %5, align 8
// +     %7 = add i64 %3, %6
// +     ret i64 %7
// + }
// +
// + proc _S2f4$2g2$2g3FiE (ptr %0 nest) private fastcc -> i64 {
// + entry:
// +     %1 = load ptr, %0, align 8
// +     %2 = load ptr, %1, align 8
// +     %3 = load i64, %2, align 8
// +     %4 = ptradd %0, 8
// +     %5 = load ptr, %4, align 8
// +     %6 = load i64, %5, align 8
// +     %7 = add i64 %3, %6
// +     ret i64 %7
// + }
// +
// + proc _S2f4$2g2$2g4FiE (ptr %0 nest) private fastcc -> i64 {
// + entry:
// +     %1 = load ptr, %0, align 8
// +     %2 = call fastcc i64 _S2f4$2g1FiE(ptr %1 nest)
// +     %3 = call fastcc i64 _S2f4$2g2$2g3FiE(ptr %0 nest)
// +     %4 = add i64 %2, %3
// +     %5 = load ptr, %0, align 8
// +     %6 = load ptr, %5, align 8
// +     %7 = load i64, %6, align 8
// +     %8 = add i64 %4, %7
// +     %9 = ptradd %0, 8
// +     %10 = load ptr, %9, align 8
// +     %11 = load i64, %10, align 8
// +     %12 = add i64 %8, %11
// +     ret i64 %12
// + }

//L * ; ModuleID = 'test'
//L + source_filename = "test"
//L + target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
//L + target triple = "x86_64-unknown-linux-gnu"
//L +
//L + declare fastcc void @__src_assert_fail(ptr)
//L +
//L + declare fastcc void @__src_int_arith_error(ptr)
//L +
//L + define fastcc void @__src_main() {
//L +   ret void
//L + }
//L +
//L + define private fastcc i64 @_S2f1FiE() {
//L +   %1 = alloca i8, i64 8, align 8
//L +   %2 = alloca i8, i64 8, align 8
//L +   %3 = alloca i8, i64 8, align 8
//L +   store i64 20, ptr %1, align 8
//L +   store i64 2, ptr %2, align 8
//L +   store ptr %1, ptr %3, align 8
//L +   %4 = call fastcc i64 @"_S2f1$1gFiE"(ptr nest %3)
//L +   %5 = call fastcc i64 @"_S2f1$1hFiE"()
//L +   %6 = add i64 %4, %5
//L +   %7 = add i64 %6, 2
//L +   ret i64 %7
//L + }
//L +
//L + define private fastcc i64 @"_S2f1$1gFiE"(ptr nest %0) {
//L +   %2 = load ptr, ptr %0, align 8
//L +   %3 = load i64, ptr %2, align 8
//L +   ret i64 %3
//L + }
//L +
//L + define private fastcc i64 @"_S2f1$1hFiE"() {
//L +   ret i64 20
//L + }
//L +
//L + define private fastcc i64 @_S2f2FiE() {
//L +   %1 = alloca i8, i64 8, align 8
//L +   %2 = alloca i8, i64 8, align 8
//L +   store i64 20, ptr %1, align 8
//L +   store ptr %1, ptr %2, align 8
//L +   %3 = call fastcc i64 @"_S2f2$1gFiE"(ptr nest %2)
//L +   ret i64 %3
//L + }
//L +
//L + define private fastcc i64 @"_S2f2$1gFiE"(ptr nest %0) {
//L +   %2 = alloca i8, i64 8, align 8
//L +   %3 = alloca i8, i64 16, align 8
//L +   store i64 30, ptr %2, align 8
//L +   store ptr %0, ptr %3, align 8
//L +   %4 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   store ptr %2, ptr %4, align 8
//L +   %5 = call fastcc i64 @"_S2f2$1g$1hFiE"(ptr nest %3)
//L +   ret i64 %5
//L + }
//L +
//L + define private fastcc i64 @_S2f3FiE() {
//L +   %1 = alloca i8, i64 8, align 8
//L +   %2 = alloca i8, i64 8, align 8
//L +   %3 = alloca i8, i64 16, align 8
//L +   %4 = alloca i8, i64 16, align 8
//L +   store i64 22, ptr %1, align 8
//L +   store i64 20, ptr %2, align 8
//L +   store ptr %1, ptr %3, align 8
//L +   %5 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   store ptr %2, ptr %5, align 8
//L +   %6 = call fastcc i64 @"_S2f3$1hFibE"(i1 zeroext true, ptr nest %3)
//L +   store ptr %1, ptr %4, align 8
//L +   %7 = getelementptr inbounds nuw i8, ptr %4, i32 8
//L +   store ptr %2, ptr %7, align 8
//L +   %8 = call fastcc i64 @"_S2f3$1gFibE"(i1 zeroext true, ptr nest %4)
//L +   %9 = add i64 %6, %8
//L +   ret i64 %9
//L + }
//L +
//L + define private fastcc i64 @"_S2f3$1hFibE"(i1 zeroext %0, ptr nest %1) {
//L +   %3 = alloca i8, i64 1, align 1
//L +   %4 = sext i1 %0 to i8
//L +   store i8 %4, ptr %3, align 1
//L +   %5 = load i8, ptr %3, align 1
//L +   %6 = trunc i8 %5 to i1
//L +   br i1 %6, label %7, label %9
//L +
//L + 7:                                                ; preds = %2
//L +   %8 = call fastcc i64 @"_S2f3$1gFibE"(i1 zeroext false, ptr nest %1)
//L +   br label %12
//L +
//L + 9:                                                ; preds = %2
//L +   %10 = load ptr, ptr %1, align 8
//L +   %11 = load i64, ptr %10, align 8
//L +   br label %12
//L +
//L + 12:                                               ; preds = %7, %9
//L +   %13 = phi i64 [ %11, %9 ], [ %8, %7 ]
//L +   ret i64 %13
//L + }
//L +
//L + define private fastcc i64 @"_S2f3$1gFibE"(i1 zeroext %0, ptr nest %1) {
//L +   %3 = alloca i8, i64 1, align 1
//L +   %4 = sext i1 %0 to i8
//L +   store i8 %4, ptr %3, align 1
//L +   %5 = load i8, ptr %3, align 1
//L +   %6 = trunc i8 %5 to i1
//L +   br i1 %6, label %7, label %9
//L +
//L + 7:                                                ; preds = %2
//L +   %8 = call fastcc i64 @"_S2f3$1hFibE"(i1 zeroext false, ptr nest %1)
//L +   br label %13
//L +
//L + 9:                                                ; preds = %2
//L +   %10 = getelementptr inbounds nuw i8, ptr %1, i32 8
//L +   %11 = load ptr, ptr %10, align 8
//L +   %12 = load i64, ptr %11, align 8
//L +   br label %13
//L +
//L + 13:                                               ; preds = %7, %9
//L +   %14 = phi i64 [ %12, %9 ], [ %8, %7 ]
//L +   ret i64 %14
//L + }
//L +
//L + define private fastcc i64 @_S2f4FiE() {
//L +   %1 = alloca i8, i64 8, align 8
//L +   %2 = alloca i8, i64 8, align 8
//L +   %3 = alloca i8, i64 8, align 8
//L +   store i64 1, ptr %1, align 8
//L +   store ptr %1, ptr %2, align 8
//L +   %4 = call fastcc i64 @"_S2f4$2g1FiE"(ptr nest %2)
//L +   store ptr %1, ptr %3, align 8
//L +   %5 = call fastcc i64 @"_S2f4$2g2FiE"(ptr nest %3)
//L +   %6 = add i64 %4, %5
//L +   ret i64 %6
//L + }
//L +
//L + define private fastcc i64 @"_S2f4$2g1FiE"(ptr nest %0) {
//L +   %2 = load ptr, ptr %0, align 8
//L +   %3 = load i64, ptr %2, align 8
//L +   ret i64 %3
//L + }
//L +
//L + define private fastcc i64 @"_S2f4$2g2FiE"(ptr nest %0) {
//L +   %2 = alloca i8, i64 8, align 8
//L +   %3 = alloca i8, i64 16, align 8
//L +   %4 = alloca i8, i64 16, align 8
//L +   store i64 2, ptr %2, align 8
//L +   %5 = call fastcc i64 @"_S2f4$2g1FiE"(ptr nest %0)
//L +   store ptr %0, ptr %3, align 8
//L +   %6 = getelementptr inbounds nuw i8, ptr %3, i32 8
//L +   store ptr %2, ptr %6, align 8
//L +   %7 = call fastcc i64 @"_S2f4$2g2$2g3FiE"(ptr nest %3)
//L +   %8 = add i64 %5, %7
//L +   store ptr %0, ptr %4, align 8
//L +   %9 = getelementptr inbounds nuw i8, ptr %4, i32 8
//L +   store ptr %2, ptr %9, align 8
//L +   %10 = call fastcc i64 @"_S2f4$2g2$2g4FiE"(ptr nest %4)
//L +   %11 = add i64 %8, %10
//L +   %12 = load ptr, ptr %0, align 8
//L +   %13 = load i64, ptr %12, align 8
//L +   %14 = add i64 %11, %13
//L +   ret i64 %14
//L + }
//L +
//L + define private fastcc i64 @"_S2f2$1g$1hFiE"(ptr nest %0) {
//L +   %2 = load ptr, ptr %0, align 8
//L +   %3 = load ptr, ptr %2, align 8
//L +   %4 = load i64, ptr %3, align 8
//L +   %5 = getelementptr inbounds nuw i8, ptr %0, i32 8
//L +   %6 = load ptr, ptr %5, align 8
//L +   %7 = load i64, ptr %6, align 8
//L +   %8 = add i64 %4, %7
//L +   ret i64 %8
//L + }
//L +
//L + define private fastcc i64 @"_S2f4$2g2$2g3FiE"(ptr nest %0) {
//L +   %2 = load ptr, ptr %0, align 8
//L +   %3 = load ptr, ptr %2, align 8
//L +   %4 = load i64, ptr %3, align 8
//L +   %5 = getelementptr inbounds nuw i8, ptr %0, i32 8
//L +   %6 = load ptr, ptr %5, align 8
//L +   %7 = load i64, ptr %6, align 8
//L +   %8 = add i64 %4, %7
//L +   ret i64 %8
//L + }
//L +
//L + define private fastcc i64 @"_S2f4$2g2$2g4FiE"(ptr nest %0) {
//L +   %2 = load ptr, ptr %0, align 8
//L +   %3 = call fastcc i64 @"_S2f4$2g1FiE"(ptr nest %2)
//L +   %4 = call fastcc i64 @"_S2f4$2g2$2g3FiE"(ptr nest %0)
//L +   %5 = add i64 %3, %4
//L +   %6 = load ptr, ptr %0, align 8
//L +   %7 = load ptr, ptr %6, align 8
//L +   %8 = load i64, ptr %7, align 8
//L +   %9 = add i64 %5, %8
//L +   %10 = getelementptr inbounds nuw i8, ptr %0, i32 8
//L +   %11 = load ptr, ptr %10, align 8
//L +   %12 = load i64, ptr %11, align 8
//L +   %13 = add i64 %9, %12
//L +   ret i64 %13
//L + }
//L +
//L + !llvm.module.flags = !{!0}
//L +
//L + !0 = !{i32 2, !"Debug Info Version", i32 3}
