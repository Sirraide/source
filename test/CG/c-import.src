// R %srcc --llvm -fno-overflow-checks %s
program test;

import <cstdio> as stdio;

stdio::putchar("7"[0]);
stdio::puts("foo".data);
stdio::printf("bar: %d\n".data, 12);

// * ; ModuleID = 'test'
// + source_filename = "test"
// + target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
// + target triple = "x86_64-unknown-linux-gnu"
// +
// + @__srcc_str.2 = private constant [9 x i8] c"bar: %d\0A\00", align 1
// + @__srcc_str.1 = private constant [4 x i8] c"foo\00", align 1
// + @__srcc_str.0 = private constant [2 x i8] c"7\00", align 1
// +
// + declare fastcc void @__src_assert_fail(ptr)
// +
// + declare fastcc void @__src_int_arith_error(ptr)
// +
// + define fastcc void @__src_main() {
// +   %1 = load i8, ptr @__srcc_str.0, align 1
// +   %2 = sext i8 %1 to i32
// +   %3 = call i32 @putchar(i32 %2)
// +   %4 = call i32 @puts(ptr @__srcc_str.1)
// +   %5 = call i32 (ptr, i64, ...) @printf(ptr @__srcc_str.2, i64 12)
// +   ret void
// + }
// +
// + declare i32 @putchar(i32)
// +
// + declare i32 @puts(ptr)
// +
// + declare i32 @printf(ptr, ...)
// +
// + !llvm.module.flags = !{!0}
// +
// + !0 = !{i32 2, !"Debug Info Version", i32 3}
