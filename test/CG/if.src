// R      %srcc --ir --target x86_64-unknown-linux %s
// R[//L] %srcc --llvm --target x86_64-unknown-linux %s
program test;

x(1, 2, true);
x(2, 1, false);

proc x(int a, int b, bool d) {
    if d then __srcc_print("d = true\n");
    else __srcc_print("d = false\n");
    __srcc_print(if d "d = true\n" else "d = false\n");

    (if d then d else d) = (if a < b then false else true);

    if d then __srcc_print("d = true\n");
    else __srcc_print("d = false\n");
    __srcc_print(if d "d = true\n" else "d = false\n");

    __srcc_print("\n");
}

// * @0 = "\0A\00"
// + @1 = "d = false\0A\00"
// + @2 = "d = true\0A\00"
// + @3 = "%.*s\00"
// +
// + proc __src_assert_fail (ptr) external fastcc;
// +
// + proc __src_int_arith_error (ptr) external fastcc;
// +
// + proc __src_main external fastcc {
// + entry:
// +     call fastcc void _S1xFviibE(i64 1, i64 2, i1 true zeroext)
// +     call fastcc void _S1xFviibE(i64 2, i64 1, i1 false zeroext)
// +     ret
// + }
// +
// + proc _S1xFviibE (i64 %0, i64 %1, i1 %2 zeroext) private fastcc {
// +     #0 = 8, align 8
// +     #1 = 8, align 8
// +     #2 = 1, align 1
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     store #1, i64 %0, align 8
// +     store #2, i64 %0, align 1
// +     %3 = load i8, #2, align 1
// +     %4 = trunc i8 %3 to i1
// +     br %4 to bb1 else bb2
// +
// + bb1:
// +     %5 = call variadic ccc i32 printf(ptr @3, i32 9, ptr @2)
// +     br bb3
// +
// + bb2:
// +     %6 = call variadic ccc i32 printf(ptr @3, i32 10, ptr @1)
// +     br bb3
// +
// + bb3:
// +     %7 = load i8, #2, align 1
// +     %8 = trunc i8 %7 to i1
// +     %9 = select %8, ptr @2, @1
// +     %10 = select %8, i64 9, 10
// +     %11 = trunc i64 %10 to i32
// +     %12 = call variadic ccc i32 printf(ptr @3, i32 %11, ptr %9)
// +     %13 = load i8, #2, align 1
// +     %14 = load i64, #0, align 8
// +     %15 = load i64, #1, align 8
// +     %16 = icmp sge i64 %14, %15
// +     %17 = sext i1 %16 to i8
// +     store #2, i8 %17, align 1
// +     %18 = load i8, #2, align 1
// +     %19 = trunc i8 %18 to i1
// +     br %19 to bb4 else bb5
// +
// + bb4:
// +     %20 = call variadic ccc i32 printf(ptr @3, i32 9, ptr @2)
// +     br bb6
// +
// + bb5:
// +     %21 = call variadic ccc i32 printf(ptr @3, i32 10, ptr @1)
// +     br bb6
// +
// + bb6:
// +     %22 = load i8, #2, align 1
// +     %23 = trunc i8 %22 to i1
// +     %24 = select %23, ptr @2, @1
// +     %25 = select %23, i64 9, 10
// +     %26 = trunc i64 %25 to i32
// +     %27 = call variadic ccc i32 printf(ptr @3, i32 %26, ptr %24)
// +     %28 = call variadic ccc i32 printf(ptr @3, i32 1, ptr @0)
// +     ret
// + }
// +
// + proc printf (ptr) variadic external ccc -> i32;

//L * ; ModuleID = 'test'
//L + source_filename = "test"
//L + target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
//L + target triple = "x86_64-unknown-linux-gnu"
//L +
//L + @__srcc_str.3 = private constant [2 x i8] c"\0A\00", align 1
//L + @__srcc_str.2 = private constant [11 x i8] c"d = false\0A\00", align 1
//L + @__srcc_str.1 = private constant [10 x i8] c"d = true\0A\00", align 1
//L + @__srcc_str.0 = private constant [5 x i8] c"%.*s\00", align 1
//L +
//L + declare fastcc void @__src_assert_fail(ptr)
//L +
//L + declare fastcc void @__src_int_arith_error(ptr)
//L +
//L + define fastcc void @__src_main() {
//L +   call fastcc void @_S1xFviibE(i64 1, i64 2, i1 zeroext true)
//L +   call fastcc void @_S1xFviibE(i64 2, i64 1, i1 zeroext false)
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S1xFviibE(i64 %0, i64 %1, i1 zeroext %2) {
//L +   %4 = alloca i8, i64 8, align 8
//L +   %5 = alloca i8, i64 8, align 8
//L +   %6 = alloca i8, i64 1, align 1
//L +   store i64 %0, ptr %4, align 8
//L +   store i64 %0, ptr %5, align 8
//L +   store i64 %0, ptr %6, align 1
//L +   %7 = load i8, ptr %6, align 1
//L +   %8 = trunc i8 %7 to i1
//L +   br i1 %8, label %9, label %11
//L +
//L + 9:                                                ; preds = %3
//L +   %10 = call i32 (ptr, ...) @printf(ptr @__srcc_str.0, i32 9, ptr @__srcc_str.1)
//L +   br label %13
//L +
//L + 11:                                               ; preds = %3
//L +   %12 = call i32 (ptr, ...) @printf(ptr @__srcc_str.0, i32 10, ptr @__srcc_str.2)
//L +   br label %13
//L +
//L + 13:                                               ; preds = %9, %11
//L +   %14 = load i8, ptr %6, align 1
//L +   %15 = trunc i8 %14 to i1
//L +   %16 = select i1 %15, ptr @__srcc_str.1, ptr @__srcc_str.2
//L +   %17 = select i1 %15, i64 9, i64 10
//L +   %18 = trunc i64 %17 to i32
//L +   %19 = call i32 (ptr, ...) @printf(ptr @__srcc_str.0, i32 %18, ptr %16)
//L +   %20 = load i8, ptr %6, align 1
//L +   %21 = load i64, ptr %4, align 8
//L +   %22 = load i64, ptr %5, align 8
//L +   %23 = icmp sge i64 %21, %22
//L +   %24 = sext i1 %23 to i8
//L +   store i8 %24, ptr %6, align 1
//L +   %25 = load i8, ptr %6, align 1
//L +   %26 = trunc i8 %25 to i1
//L +   br i1 %26, label %27, label %29
//L +
//L + 27:                                               ; preds = %13
//L +   %28 = call i32 (ptr, ...) @printf(ptr @__srcc_str.0, i32 9, ptr @__srcc_str.1)
//L +   br label %31
//L +
//L + 29:                                               ; preds = %13
//L +   %30 = call i32 (ptr, ...) @printf(ptr @__srcc_str.0, i32 10, ptr @__srcc_str.2)
//L +   br label %31
//L +
//L + 31:                                               ; preds = %27, %29
//L +   %32 = load i8, ptr %6, align 1
//L +   %33 = trunc i8 %32 to i1
//L +   %34 = select i1 %33, ptr @__srcc_str.1, ptr @__srcc_str.2
//L +   %35 = select i1 %33, i64 9, i64 10
//L +   %36 = trunc i64 %35 to i32
//L +   %37 = call i32 (ptr, ...) @printf(ptr @__srcc_str.0, i32 %36, ptr %34)
//L +   %38 = call i32 (ptr, ...) @printf(ptr @__srcc_str.0, i32 1, ptr @__srcc_str.3)
//L +   ret void
//L + }
//L +
//L + declare i32 @printf(ptr, ...)
//L +
//L + !llvm.module.flags = !{!0}
//L +
//L + !0 = !{i32 2, !"Debug Info Version", i32 3}
