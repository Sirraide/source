// R %srcc --llvm %s
program test;

// * @0 = private unnamed_addr constant [5 x i8] c"%.*s\00", align 1
// + @1 = private unnamed_addr constant [10 x i8] c"d = true\0A\00", align 1
// + @2 = private unnamed_addr constant [11 x i8] c"d = false\0A\00", align 1
// + @3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

// * define fastcc void @__src_main() {
// + entry:
// +   call fastcc void @_S1xFviibE(i64 1, i64 2, i1 true)
// +   call fastcc void @_S1xFviibE(i64 2, i64 1, i1 false)
// +   ret void
// + }
x(1, 2, true);
x(2, 1, false);

// * define private fastcc void @_S1xFviibE(i64 %0, i64 %1, i1 %2) {
// + entry:
// +   %3 = alloca i64, align 8
// +   %4 = alloca i64, align 8
// +   %5 = alloca i1, align 1
// +   store i64 %0, ptr %3, align 4
// +   store i64 %1, ptr %4, align 4
// +   store i1 %2, ptr %5, align 1
// +   %l2sr = load i1, ptr %5, align 1
// +   br i1 %l2sr, label %6, label %8
// +
// + 6:
// +   %7 = call i32 (ptr, ...) @printf(ptr @0, i32 9, ptr @1)
// +   br label %10
// +
// + 8:
// +   %9 = call i32 (ptr, ...) @printf(ptr @0, i32 10, ptr @2)
// +   br label %10
// +
// + 10:
// +   %l2sr1 = load i1, ptr %5, align 1
// +   br i1 %l2sr1, label %11, label %12
// +
// + 11:
// +   br label %13
// +
// + 12:
// +   br label %13
// +
// + 13:
// +   %14 = phi { ptr, i64 } [ { ptr @1, i64 9 }, %11 ], [ { ptr @2, i64 10 }, %12 ]
// +   %15 = extractvalue { ptr, i64 } %14, 0
// +   %16 = extractvalue { ptr, i64 } %14, 1
// +   %17 = trunc i64 %16 to i32
// +   %18 = call i32 (ptr, ...) @printf(ptr @0, i32 %17, ptr %15)
// +   %l2sr2 = load i1, ptr %5, align 1
// +   br i1 %l2sr2, label %19, label %20
// +
// + 19:
// +   br label %21
// +
// + 20:
// +   br label %21
// +
// + 21:
// +   %22 = phi ptr [ %5, %19 ], [ %5, %20 ]
// +   %l2sr3 = load i64, ptr %3, align 4
// +   %l2sr4 = load i64, ptr %4, align 4
// +   %slt = icmp slt i64 %l2sr3, %l2sr4
// +   br i1 %slt, label %23, label %24
// +
// + 23:
// +   br label %25
// +
// + 24:
// +   br label %25
// +
// + 25:
// +   %26 = phi i1 [ false, %23 ], [ true, %24 ]
// +   store i1 %26, ptr %22, align 1
// +   %l2sr5 = load i1, ptr %5, align 1
// +   br i1 %l2sr5, label %27, label %29
// +
// + 27:
// +   %28 = call i32 (ptr, ...) @printf(ptr @0, i32 9, ptr @1)
// +   br label %31
// +
// + 29:
// +   %30 = call i32 (ptr, ...) @printf(ptr @0, i32 10, ptr @2)
// +   br label %31
// +
// + 31:
// +   %l2sr6 = load i1, ptr %5, align 1
// +   br i1 %l2sr6, label %32, label %33
// +
// + 32:
// +   br label %34
// +
// + 33:
// +   br label %34
// +
// + 34:
// +   %35 = phi { ptr, i64 } [ { ptr @1, i64 9 }, %32 ], [ { ptr @2, i64 10 }, %33 ]
// +   %36 = extractvalue { ptr, i64 } %35, 0
// +   %37 = extractvalue { ptr, i64 } %35, 1
// +   %38 = trunc i64 %37 to i32
// +   %39 = call i32 (ptr, ...) @printf(ptr @0, i32 %38, ptr %36)
// +   %40 = call i32 (ptr, ...) @printf(ptr @0, i32 1, ptr @3)
// +   ret void
// + }
proc x(int a, int b, bool d) {
    if d then __srcc_print("d = true\n")
    else __srcc_print("d = false\n");
    __srcc_print(if d "d = true\n" else "d = false\n");

    (if d then d else d) = (if a < b then false else true);

    if d then __srcc_print("d = true\n")
    else __srcc_print("d = false\n");
    __srcc_print(if d "d = true\n" else "d = false\n");

    __srcc_print("\n");
}


