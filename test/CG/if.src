// R      %srcc --ir %s
// R[//L] %srcc --llvm %s
program test;

x(1, 2, true);
x(2, 1, false);

proc x(int a, int b, bool d) {
    if d then __srcc_print("d = true\n");
    else __srcc_print("d = false\n");
    __srcc_print(if d "d = true\n" else "d = false\n");

    (if d then d else d) = (if a < b then false else true);

    if d then __srcc_print("d = true\n");
    else __srcc_print("d = false\n");
    __srcc_print(if d "d = true\n" else "d = false\n");

    __srcc_print("\n");
}

// * @0 = "\0A\00"
// + @1 = "d = false\0A\00"
// + @2 = "d = true\0A\00"
// + @3 = "%.*s\00"
// +
// + proc __src_assert_fail (ptr) external fastcc;
// +
// + proc __src_int_arith_error (ptr) external fastcc;
// +
// + proc __src_main external fastcc {
// + entry:
// +     call fastcc void _S1xFviibE(i64 1, i64 2, i1 -1)
// +     call fastcc void _S1xFviibE(i64 2, i64 1, i1 0)
// +     ret
// + }
// +
// + proc _S1xFviibE (i64 %0, i64 %1, i1 %2) private fastcc {
// +     #0 = 8, align 8
// +     #1 = 8, align 8
// +     #2 = 1, align 1
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     store #1, i64 %1, align 8
// +     store #2, i1 %2, align 1
// +     %3 = load i1, #2, align 1
// +     br %3 to bb1 else bb2
// +
// + bb1:
// +     %4 = call variadic ccc i32 printf(ptr @3, i32 9, ptr @2)
// +     br bb3
// +
// + bb2:
// +     %5 = call variadic ccc i32 printf(ptr @3, i32 10, ptr @1)
// +     br bb3
// +
// + bb3:
// +     %6 = load i1, #2, align 1
// +     br %6 to bb4 else bb5
// +
// + bb4:
// +     br bb6((@2, 9))
// +
// + bb5:
// +     br bb6((@1, 10))
// +
// + bb6((ptr, i64) %7):
// +     %8 = extract (ptr, i64) %7, 0
// +     %9 = extract (ptr, i64) %7, 1
// +     %10 = trunc i64 %9 to i32
// +     %11 = call variadic ccc i32 printf(ptr @3, i32 %10, ptr %8)
// +     %12 = load i1, #2, align 1
// +     %13 = load i64, #0, align 8
// +     %14 = load i64, #1, align 8
// +     %15 = icmp sge i64 %13, %14
// +     store #2, i1 %15, align 1
// +     %16 = load i1, #2, align 1
// +     br %16 to bb7 else bb8
// +
// + bb7:
// +     %17 = call variadic ccc i32 printf(ptr @3, i32 9, ptr @2)
// +     br bb9
// +
// + bb8:
// +     %18 = call variadic ccc i32 printf(ptr @3, i32 10, ptr @1)
// +     br bb9
// +
// + bb9:
// +     %19 = load i1, #2, align 1
// +     br %19 to bb10 else bb11
// +
// + bb10:
// +     br bb12((@2, 9))
// +
// + bb11:
// +     br bb12((@1, 10))
// +
// + bb12((ptr, i64) %20):
// +     %21 = extract (ptr, i64) %20, 0
// +     %22 = extract (ptr, i64) %20, 1
// +     %23 = trunc i64 %22 to i32
// +     %24 = call variadic ccc i32 printf(ptr @3, i32 %23, ptr %21)
// +     %25 = call variadic ccc i32 printf(ptr @3, i32 1, ptr @0)
// +     ret
// + }
// +
// + proc printf (ptr) variadic external ccc -> i32;

//L * ; ModuleID = 'test'
//L + source_filename = "test"
//L + target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
//L + target triple = "x86_64-unknown-linux-gnu"
//L +
//L + @__srcc_str.3 = private constant [2 x i8] c"\0A\00", align 1
//L + @__srcc_str.2 = private constant [11 x i8] c"d = false\0A\00", align 1
//L + @__srcc_str.1 = private constant [10 x i8] c"d = true\0A\00", align 1
//L + @__srcc_str.0 = private constant [5 x i8] c"%.*s\00", align 1
//L +
//L + declare fastcc void @__src_assert_fail(ptr)
//L +
//L + declare fastcc void @__src_int_arith_error(ptr)
//L +
//L + define fastcc void @__src_main() {
//L +   call fastcc void @_S1xFviibE(i64 1, i64 2, i1 true)
//L +   call fastcc void @_S1xFviibE(i64 2, i64 1, i1 false)
//L +   ret void
//L + }
//L +
//L + define private fastcc void @_S1xFviibE(i64 %0, i64 %1, i1 %2) {
//L +   %4 = alloca i8, i64 8, align 8
//L +   %5 = alloca i8, i64 8, align 8
//L +   %6 = alloca i8, i64 1, align 1
//L +   store i64 %0, ptr %4, align 8
//L +   store i64 %1, ptr %5, align 8
//L +   store i1 %2, ptr %6, align 1
//L +   %7 = load i1, ptr %6, align 1
//L +   br i1 %7, label %8, label %10
//L +
//L + 8:                                                ; preds = %3
//L +   %9 = call i32 (ptr, i32, ptr, ...) @printf(ptr @__srcc_str.0, i32 9, ptr @__srcc_str.1)
//L +   br label %12
//L +
//L + 10:                                               ; preds = %3
//L +   %11 = call i32 (ptr, i32, ptr, ...) @printf(ptr @__srcc_str.0, i32 10, ptr @__srcc_str.2)
//L +   br label %12
//L +
//L + 12:                                               ; preds = %8, %10
//L +   %13 = load i1, ptr %6, align 1
//L +   br i1 %13, label %14, label %15
//L +
//L + 14:                                               ; preds = %12
//L +   br label %16
//L +
//L + 15:                                               ; preds = %12
//L +   br label %16
//L +
//L + 16:                                               ; preds = %14, %15
//L +   %17 = phi { ptr, i64 } [ { ptr @__srcc_str.2, i64 10 }, %15 ], [ { ptr @__srcc_str.1, i64 9 }, %14 ]
//L +   %18 = extractvalue { ptr, i64 } %17, 0
//L +   %19 = extractvalue { ptr, i64 } %17, 1
//L +   %20 = trunc i64 %19 to i32
//L +   %21 = call i32 (ptr, i32, ptr, ...) @printf(ptr @__srcc_str.0, i32 %20, ptr %18)
//L +   %22 = load i1, ptr %6, align 1
//L +   %23 = load i64, ptr %4, align 8
//L +   %24 = load i64, ptr %5, align 8
//L +   %25 = icmp sge i64 %23, %24
//L +   store i1 %25, ptr %6, align 1
//L +   %26 = load i1, ptr %6, align 1
//L +   br i1 %26, label %27, label %29
//L +
//L + 27:                                               ; preds = %16
//L +   %28 = call i32 (ptr, i32, ptr, ...) @printf(ptr @__srcc_str.0, i32 9, ptr @__srcc_str.1)
//L +   br label %31
//L +
//L + 29:                                               ; preds = %16
//L +   %30 = call i32 (ptr, i32, ptr, ...) @printf(ptr @__srcc_str.0, i32 10, ptr @__srcc_str.2)
//L +   br label %31
//L +
//L + 31:                                               ; preds = %27, %29
//L +   %32 = load i1, ptr %6, align 1
//L +   br i1 %32, label %33, label %34
//L +
//L + 33:                                               ; preds = %31
//L +   br label %35
//L +
//L + 34:                                               ; preds = %31
//L +   br label %35
//L +
//L + 35:                                               ; preds = %33, %34
//L +   %36 = phi { ptr, i64 } [ { ptr @__srcc_str.2, i64 10 }, %34 ], [ { ptr @__srcc_str.1, i64 9 }, %33 ]
//L +   %37 = extractvalue { ptr, i64 } %36, 0
//L +   %38 = extractvalue { ptr, i64 } %36, 1
//L +   %39 = trunc i64 %38 to i32
//L +   %40 = call i32 (ptr, i32, ptr, ...) @printf(ptr @__srcc_str.0, i32 %39, ptr %37)
//L +   %41 = call i32 (ptr, i32, ptr, ...) @printf(ptr @__srcc_str.0, i32 1, ptr @__srcc_str.3)
//L +   ret void
//L + }
//L +
//L + declare i32 @printf(ptr, ...)
//L +
//L + !llvm.module.flags = !{!0}
//L +
//L + !0 = !{i32 2, !"Debug Info Version", i32 3}
