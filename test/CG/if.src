// R %srcc --llvm %s
program test;

// * @0 = private unnamed_addr constant [5 x i8] c"%.*s\00", align 1
// + @1 = private unnamed_addr constant [10 x i8] c"d = true\0A\00", align 1
// + @2 = private unnamed_addr constant [11 x i8] c"d = false\0A\00", align 1
// + @3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

// * define fastcc void @__src_main() {
// + entry:
// +   call fastcc void @_S1xFviibE(i64 1, i64 2, i1 true)
// +   call fastcc void @_S1xFviibE(i64 2, i64 1, i1 false)
// +   ret void
// + }
x(1, 2, true);
x(2, 1, false);

// * define private fastcc void @_S1xFviibE(i64 %0, i64 %1, i1 %2) {
// + entry:
// +   %3 = alloca i64, align 8
// +   %4 = alloca i64, align 8
// +   %5 = alloca i1, align 1
// +   store i64 %0, ptr %3, align 8
// +   store i64 %1, ptr %4, align 8
// +   store i1 %2, ptr %5, align 1
// +   %6 = load i1, ptr %5, align 1
// +   br i1 %6, label %bb1, label %bb2
// +
// + bb1:
// +   %7 = call i32 (ptr, ...) @printf(ptr @0, i32 9, ptr @1)
// +   br label %bb3
// +
// + bb2:
// +   %8 = call i32 (ptr, ...) @printf(ptr @0, i32 10, ptr @2)
// +   br label %bb3
// +
// + bb3:
// +   %9 = load i1, ptr %5, align 1
// +   br i1 %9, label %bb4, label %bb5
// +
// + bb4:
// +   br label %bb6
// +
// + bb5:
// +   br label %bb6
// +
// + bb6:
// +   %10 = phi { ptr, i64 } [ { ptr @1, i64 9 }, %bb4 ], [ { ptr @2, i64 10 }, %bb5 ]
// +   %11 = extractvalue { ptr, i64 } %10, 1
// +   %12 = trunc i64 %11 to i32
// +   %13 = extractvalue { ptr, i64 } %10, 0
// +   %14 = call i32 (ptr, ...) @printf(ptr @0, i32 %12, ptr %13)
// +   %15 = load i1, ptr %5, align 1
// +   br i1 %15, label %bb7, label %bb8
// +
// + bb7:
// +   br label %bb9
// +
// + bb8:
// +   br label %bb9
// +
// + bb9:
// +   %16 = phi ptr [ %5, %bb7 ], [ %5, %bb8 ]
// +   %17 = load i64, ptr %3, align 8
// +   %18 = load i64, ptr %4, align 8
// +   %19 = icmp slt i64 %17, %18
// +   br i1 %19, label %bb10, label %bb11
// +
// + bb10:
// +   br label %bb12
// +
// + bb11:
// +   br label %bb12
// +
// + bb12:
// +   %20 = phi i1 [ false, %bb10 ], [ true, %bb11 ]
// +   store i1 %20, ptr %16, align 1
// +   %21 = load i1, ptr %5, align 1
// +   br i1 %21, label %bb13, label %bb14
// +
// + bb13:
// +   %22 = call i32 (ptr, ...) @printf(ptr @0, i32 9, ptr @1)
// +   br label %bb15
// +
// + bb14:
// +   %23 = call i32 (ptr, ...) @printf(ptr @0, i32 10, ptr @2)
// +   br label %bb15
// +
// + bb15:
// +   %24 = load i1, ptr %5, align 1
// +   br i1 %24, label %bb16, label %bb17
// +
// + bb16:
// +   br label %bb18
// +
// + bb17:
// +   br label %bb18
// +
// + bb18:
// +   %25 = phi { ptr, i64 } [ { ptr @1, i64 9 }, %bb16 ], [ { ptr @2, i64 10 }, %bb17 ]
// +   %26 = extractvalue { ptr, i64 } %25, 1
// +   %27 = trunc i64 %26 to i32
// +   %28 = extractvalue { ptr, i64 } %25, 0
// +   %29 = call i32 (ptr, ...) @printf(ptr @0, i32 %27, ptr %28)
// +   %30 = call i32 (ptr, ...) @printf(ptr @0, i32 1, ptr @3)
// +   ret void
// + }
proc x(int a, int b, bool d) {
    if d then __srcc_print("d = true\n")
    else __srcc_print("d = false\n");
    __srcc_print(if d "d = true\n" else "d = false\n");

    (if d then d else d) = (if a < b then false else true);

    if d then __srcc_print("d = true\n")
    else __srcc_print("d = false\n");
    __srcc_print(if d "d = true\n" else "d = false\n");

    __srcc_print("\n");
}


