// R %srcc --ir --target x86_64-unknown-linux %s
program test;

proc f1 (int... x) {}
proc q1 {
    f1();
    f1(1);
    f1(1, 2);
    f1(1, 2, 3);
}

proc f2 (i32 y, i32... x) {}
proc q2 {
    f2(42);
    f2(42, 1);
    f2(42, 1, 2);
    f2(42, 1, 2, 3);
}

proc f3 ($T... x) {}
proc q3 {
    f3();
    f3(1);
    f3(1, 2);
    f3(1, 2, 3);
}

proc f4 ($T, $T... x) {}
proc q4 {
    f4(42);
    f4(42, 1);
    f4(42, 1, 2);
    f4(42, 1, 2, 3);
}

proc f5 (var ...x) {}
proc q5 {
    f5();
    f5(1);
    f5(1, 2);
    f5(1, 2);
    f5(1, "");
    f5(1, "");
}

proc f6 (var y, var ...x) {}
proc q6 {
    f6(1);
    f6("", 1);
    f6(4 as i32, 1, 2);
    f6(7 as i47, 1, 2);
    f6(3 as i16, 1, "");
    f6(2 as i128, 1, "");
}

// * @0 = "\00"
// +
// + proc __src_main external fastcc {
// + entry:
// +     ret
// + }
// +
// + proc _S2f1FvSiE (ptr %0, i64 %1) private fastcc {
// +     #0 = 16, align 8
// +
// + entry:
// +     store #0, ptr %0, align 8
// +     %2 = ptradd #0, 8
// +     store %2, i64 %1, align 8
// +     ret
// + }
// +
// + proc _S2q1FvE private fastcc {
// +     #0 = 8, align 8
// +     #1 = 16, align 8
// +     #2 = 24, align 8
// +
// + entry:
// +     call fastcc void _S2f1FvSiE(ptr nil, i64 0)
// +     store #0, i64 1, align 8
// +     call fastcc void _S2f1FvSiE(ptr #0, i64 1)
// +     store #1, i64 1, align 8
// +     %0 = ptradd #1, 8
// +     store %0, i64 2, align 8
// +     call fastcc void _S2f1FvSiE(ptr #1, i64 2)
// +     store #2, i64 1, align 8
// +     %1 = ptradd #2, 8
// +     store %1, i64 2, align 8
// +     %2 = ptradd %1, 8
// +     store %2, i64 3, align 8
// +     call fastcc void _S2f1FvSiE(ptr #2, i64 3)
// +     ret
// + }
// +
// + proc _S2f2FvI32SI32E (i32 %0, ptr %1, i64 %2) private fastcc {
// +     #0 = 4, align 4
// +     #1 = 16, align 8
// +
// + entry:
// +     store #0, i32 %0, align 4
// +     store #1, ptr %1, align 8
// +     %3 = ptradd #1, 8
// +     store %3, i64 %2, align 8
// +     ret
// + }
// +
// + proc _S2q2FvE private fastcc {
// +     #0 = 4, align 4
// +     #1 = 8, align 4
// +     #2 = 12, align 4
// +
// + entry:
// +     call fastcc void _S2f2FvI32SI32E(i32 42, ptr nil, i64 0)
// +     store #0, i32 1, align 4
// +     call fastcc void _S2f2FvI32SI32E(i32 42, ptr #0, i64 1)
// +     store #1, i32 1, align 4
// +     %0 = ptradd #1, 4
// +     store %0, i32 2, align 4
// +     call fastcc void _S2f2FvI32SI32E(i32 42, ptr #1, i64 2)
// +     store #2, i32 1, align 4
// +     %1 = ptradd #2, 4
// +     store %1, i32 2, align 4
// +     %2 = ptradd %1, 4
// +     store %2, i32 3, align 4
// +     call fastcc void _S2f2FvI32SI32E(i32 42, ptr #2, i64 3)
// +     ret
// + }
// +
// + proc _S2q3FvE private fastcc {
// +     #0 = 8, align 8
// +     #1 = 16, align 8
// +     #2 = 24, align 8
// +
// + entry:
// +     call fastcc void _S2f3FvSvE(ptr nil, i64 0)
// +     store #0, i64 1, align 8
// +     call fastcc void _S2f3FvSiE(ptr #0, i64 1)
// +     store #1, i64 1, align 8
// +     %0 = ptradd #1, 8
// +     store %0, i64 2, align 8
// +     call fastcc void _S2f3FvSiE(ptr #1, i64 2)
// +     store #2, i64 1, align 8
// +     %1 = ptradd #2, 8
// +     store %1, i64 2, align 8
// +     %2 = ptradd %1, 8
// +     store %2, i64 3, align 8
// +     call fastcc void _S2f3FvSiE(ptr #2, i64 3)
// +     ret
// + }
// +
// + proc _S2f3FvSvE (ptr %0, i64 %1) private fastcc {
// +     #0 = 16, align 8
// +
// + entry:
// +     store #0, ptr %0, align 8
// +     %2 = ptradd #0, 8
// +     store %2, i64 %1, align 8
// +     ret
// + }
// +
// + proc _S2f3FvSiE (ptr %0, i64 %1) private fastcc {
// +     #0 = 16, align 8
// +
// + entry:
// +     store #0, ptr %0, align 8
// +     %2 = ptradd #0, 8
// +     store %2, i64 %1, align 8
// +     ret
// + }
// +
// + proc _S2q4FvE private fastcc {
// +     #0 = 8, align 8
// +     #1 = 16, align 8
// +     #2 = 24, align 8
// +
// + entry:
// +     call fastcc void _S2f4FviSiE(i64 42, ptr nil, i64 0)
// +     store #0, i64 1, align 8
// +     call fastcc void _S2f4FviSiE(i64 42, ptr #0, i64 1)
// +     store #1, i64 1, align 8
// +     %0 = ptradd #1, 8
// +     store %0, i64 2, align 8
// +     call fastcc void _S2f4FviSiE(i64 42, ptr #1, i64 2)
// +     store #2, i64 1, align 8
// +     %1 = ptradd #2, 8
// +     store %1, i64 2, align 8
// +     %2 = ptradd %1, 8
// +     store %2, i64 3, align 8
// +     call fastcc void _S2f4FviSiE(i64 42, ptr #2, i64 3)
// +     ret
// + }
// +
// + proc _S2f4FviSiE (i64 %0, ptr %1, i64 %2) private fastcc {
// +     #0 = 8, align 8
// +     #1 = 16, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     store #1, ptr %1, align 8
// +     %3 = ptradd #1, 8
// +     store %3, i64 %2, align 8
// +     ret
// + }
// +
// + proc _S2q5FvE private fastcc {
// +     #0 = 8, align 8
// +     #1 = 16, align 8
// +     #2 = 16, align 8
// +     #3 = 24, align 8
// +     #4 = 24, align 8
// +
// + entry:
// +     call fastcc void _S2f5FvQEE()
// +     store #0, i64 1, align 8
// +     %0 = load i64, #0, align 8
// +     call fastcc void _S2f5FvQiEE(i64 %0)
// +     store #1, i64 1, align 8
// +     %1 = ptradd #1, 8
// +     store %1, i64 2, align 8
// +     %2 = load i64, #1, align 8
// +     %3 = ptradd #1, 8
// +     %4 = load i64, %3, align 8
// +     call fastcc void _S2f5FvQiiEE(i64 %2, i64 %4)
// +     store #2, i64 1, align 8
// +     %5 = ptradd #2, 8
// +     store %5, i64 2, align 8
// +     %6 = load i64, #2, align 8
// +     %7 = ptradd #2, 8
// +     %8 = load i64, %7, align 8
// +     call fastcc void _S2f5FvQiiEE(i64 %6, i64 %8)
// +     store #3, i64 1, align 8
// +     %9 = ptradd #3, 8
// +     store %9, ptr @0, align 8
// +     %10 = ptradd %9, 8
// +     store %10, i64 0, align 8
// +     call fastcc void _S2f5FvQiSI8EE(ptr #3 byval i8[24])
// +     store #4, i64 1, align 8
// +     %11 = ptradd #4, 8
// +     store %11, ptr @0, align 8
// +     %12 = ptradd %11, 8
// +     store %12, i64 0, align 8
// +     call fastcc void _S2f5FvQiSI8EE(ptr #4 byval i8[24])
// +     ret
// + }
// +
// + proc _S2f5FvQEE private fastcc {
// + entry:
// +     ret
// + }
// +
// + proc _S2f5FvQiEE (i64 %0) private fastcc {
// +     #0 = 8, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     ret
// + }
// +
// + proc _S2f5FvQiiEE (i64 %0, i64 %1) private fastcc {
// +     #0 = 16, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     %2 = ptradd #0, 8
// +     store %2, i64 %1, align 8
// +     ret
// + }
// +
// + proc _S2f5FvQiSI8EE (ptr %0 byval i8[24]) private fastcc {
// + entry:
// +     ret
// + }
// +
// + proc _S2q6FvE private fastcc {
// +     #0 = 8, align 8
// +     #1 = 16, align 8
// +     #2 = 16, align 8
// +     #3 = 24, align 8
// +     #4 = 16, align 16
// +     #5 = 24, align 8
// +
// + entry:
// +     call fastcc void _S2f6FviQEE(i64 1)
// +     store #0, i64 1, align 8
// +     %0 = load i64, #0, align 8
// +     call fastcc void _S2f6FvSI8QiEE(ptr @0, i64 0, i64 %0)
// +     store #1, i64 1, align 8
// +     %1 = ptradd #1, 8
// +     store %1, i64 2, align 8
// +     %2 = load i64, #1, align 8
// +     %3 = ptradd #1, 8
// +     %4 = load i64, %3, align 8
// +     call fastcc void _S2f6FvI32QiiEE(i32 4, i64 %2, i64 %4)
// +     store #2, i64 1, align 8
// +     %5 = ptradd #2, 8
// +     store %5, i64 2, align 8
// +     %6 = load i64, #2, align 8
// +     %7 = ptradd #2, 8
// +     %8 = load i64, %7, align 8
// +     call fastcc void _S2f6FvI47QiiEE(i47 7 signext, i64 %6, i64 %8)
// +     store #3, i64 1, align 8
// +     %9 = ptradd #3, 8
// +     store %9, ptr @0, align 8
// +     %10 = ptradd %9, 8
// +     store %10, i64 0, align 8
// +     call fastcc void _S2f6FvI16QiSI8EE(i16 3, ptr #3 byval i8[24])
// +     store #4, i128 2, align 16
// +     %11 = load i128, #4, align 16
// +     store #5, i64 1, align 8
// +     %12 = ptradd #5, 8
// +     store %12, ptr @0, align 8
// +     %13 = ptradd %12, 8
// +     store %13, i64 0, align 8
// +     call fastcc void _S2f6FvI128QiSI8EE(i128 %11, ptr #5 byval i8[24])
// +     ret
// + }
// +
// + proc _S2f6FviQEE (i64 %0) private fastcc {
// +     #0 = 8, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     ret
// + }
// +
// + proc _S2f6FvSI8QiEE (ptr %0, i64 %1, i64 %2) private fastcc {
// +     #0 = 16, align 8
// +     #1 = 8, align 8
// +
// + entry:
// +     store #0, ptr %0, align 8
// +     %3 = ptradd #0, 8
// +     store %3, i64 %1, align 8
// +     store #1, i64 %2, align 8
// +     ret
// + }
// +
// + proc _S2f6FvI32QiiEE (i32 %0, i64 %1, i64 %2) private fastcc {
// +     #0 = 4, align 4
// +     #1 = 16, align 8
// +
// + entry:
// +     store #0, i32 %0, align 4
// +     store #1, i64 %1, align 8
// +     %3 = ptradd #1, 8
// +     store %3, i64 %2, align 8
// +     ret
// + }
// +
// + proc _S2f6FvI47QiiEE (i47 %0 signext, i64 %1, i64 %2) private fastcc {
// +     #0 = 8, align 8
// +     #1 = 16, align 8
// +
// + entry:
// +     %3 = sext i47 %0 to i64
// +     store #0, i64 %3, align 8
// +     store #1, i64 %1, align 8
// +     %4 = ptradd #1, 8
// +     store %4, i64 %2, align 8
// +     ret
// + }
// +
// + proc _S2f6FvI16QiSI8EE (i16 %0, ptr %1 byval i8[24]) private fastcc {
// +     #0 = 2, align 2
// +
// + entry:
// +     store #0, i16 %0, align 2
// +     ret
// + }
// +
// + proc _S2f6FvI128QiSI8EE (i128 %0, ptr %1 byval i8[24]) private fastcc {
// +     #0 = 16, align 16
// +
// + entry:
// +     store #0, i128 %0, align 16
// +     ret
// + }
