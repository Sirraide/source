// R %srcc --ir --target x86_64-unknown-linux %s
program test;

proc f1 (int... x) {}
proc q1 {
    f1();
    f1(1);
    f1(1, 2);
    f1(1, 2, 3);
}

proc f2 (i32 y, i32... x) {}
proc q2 {
    f2(42);
    f2(42, 1);
    f2(42, 1, 2);
    f2(42, 1, 2, 3);
}

proc f3 ($T... x) {}
proc q3 {
    f3();
    f3(1);
    f3(1, 2);
    f3(1, 2, 3);
}

proc f4 ($T, $T... x) {}
proc q4 {
    f4(42);
    f4(42, 1);
    f4(42, 1, 2);
    f4(42, 1, 2, 3);
}

// * proc __src_assert_fail (ptr) external fastcc;
// +
// + proc __src_int_arith_error (ptr) external fastcc;
// +
// + proc __src_main external fastcc {
// + entry:
// +     ret
// + }
// +
// + proc _S2f1FvSiE (ptr %0, i64 %1) private fastcc {
// +     #0 = 16, align 8
// +
// + entry:
// +     store #0, ptr %0, align 8
// +     %2 = ptradd #0, 8
// +     store %2, i64 %1, align 8
// +     ret
// + }
// +
// + proc _S2q1FvE private fastcc {
// +     #0 = 8, align 8
// +     #1 = 16, align 8
// +     #2 = 24, align 8
// +
// + entry:
// +     call fastcc void _S2f1FvSiE(ptr nil, i64 0)
// +     store #0, i64 1, align 8
// +     call fastcc void _S2f1FvSiE(ptr #0, i64 1)
// +     store #1, i64 1, align 8
// +     %0 = ptradd #1, 8
// +     store %0, i64 2, align 8
// +     call fastcc void _S2f1FvSiE(ptr #1, i64 2)
// +     store #2, i64 1, align 8
// +     %1 = ptradd #2, 8
// +     store %1, i64 2, align 8
// +     %2 = ptradd %1, 8
// +     store %2, i64 3, align 8
// +     call fastcc void _S2f1FvSiE(ptr #2, i64 3)
// +     ret
// + }
// +
// + proc _S2f2FvI32SI32E (i32 %0, ptr %1, i64 %2) private fastcc {
// +     #0 = 4, align 4
// +     #1 = 16, align 8
// +
// + entry:
// +     store #0, i32 %0, align 4
// +     store #1, ptr %1, align 8
// +     %3 = ptradd #1, 8
// +     store %3, i64 %2, align 8
// +     ret
// + }
// +
// + proc _S2q2FvE private fastcc {
// +     #0 = 4, align 4
// +     #1 = 8, align 4
// +     #2 = 12, align 4
// +
// + entry:
// +     call fastcc void _S2f2FvI32SI32E(i32 42, ptr nil, i64 0)
// +     store #0, i32 1, align 4
// +     call fastcc void _S2f2FvI32SI32E(i32 42, ptr #0, i64 1)
// +     store #1, i32 1, align 4
// +     %0 = ptradd #1, 4
// +     store %0, i32 2, align 4
// +     call fastcc void _S2f2FvI32SI32E(i32 42, ptr #1, i64 2)
// +     store #2, i32 1, align 4
// +     %1 = ptradd #2, 4
// +     store %1, i32 2, align 4
// +     %2 = ptradd %1, 4
// +     store %2, i32 3, align 4
// +     call fastcc void _S2f2FvI32SI32E(i32 42, ptr #2, i64 3)
// +     ret
// + }
// +
// + proc _S2q3FvE private fastcc {
// +     #0 = 8, align 8
// +     #1 = 16, align 8
// +     #2 = 24, align 8
// +
// + entry:
// +     call fastcc void _S2f3FvSvE(ptr nil, i64 0)
// +     store #0, i64 1, align 8
// +     call fastcc void _S2f3FvSiE(ptr #0, i64 1)
// +     store #1, i64 1, align 8
// +     %0 = ptradd #1, 8
// +     store %0, i64 2, align 8
// +     call fastcc void _S2f3FvSiE(ptr #1, i64 2)
// +     store #2, i64 1, align 8
// +     %1 = ptradd #2, 8
// +     store %1, i64 2, align 8
// +     %2 = ptradd %1, 8
// +     store %2, i64 3, align 8
// +     call fastcc void _S2f3FvSiE(ptr #2, i64 3)
// +     ret
// + }
// +
// + proc _S2f3FvSvE (ptr %0, i64 %1) private fastcc {
// +     #0 = 16, align 8
// +
// + entry:
// +     store #0, ptr %0, align 8
// +     %2 = ptradd #0, 8
// +     store %2, i64 %1, align 8
// +     ret
// + }
// +
// + proc _S2f3FvSiE (ptr %0, i64 %1) private fastcc {
// +     #0 = 16, align 8
// +
// + entry:
// +     store #0, ptr %0, align 8
// +     %2 = ptradd #0, 8
// +     store %2, i64 %1, align 8
// +     ret
// + }
// +
// + proc _S2q4FvE private fastcc {
// +     #0 = 8, align 8
// +     #1 = 16, align 8
// +     #2 = 24, align 8
// +
// + entry:
// +     call fastcc void _S2f4FviSiE(i64 42, ptr nil, i64 0)
// +     store #0, i64 1, align 8
// +     call fastcc void _S2f4FviSiE(i64 42, ptr #0, i64 1)
// +     store #1, i64 1, align 8
// +     %0 = ptradd #1, 8
// +     store %0, i64 2, align 8
// +     call fastcc void _S2f4FviSiE(i64 42, ptr #1, i64 2)
// +     store #2, i64 1, align 8
// +     %1 = ptradd #2, 8
// +     store %1, i64 2, align 8
// +     %2 = ptradd %1, 8
// +     store %2, i64 3, align 8
// +     call fastcc void _S2f4FviSiE(i64 42, ptr #2, i64 3)
// +     ret
// + }
// +
// + proc _S2f4FviSiE (i64 %0, ptr %1, i64 %2) private fastcc {
// +     #0 = 8, align 8
// +     #1 = 16, align 8
// +
// + entry:
// +     store #0, i64 %0, align 8
// +     store #1, ptr %1, align 8
// +     %3 = ptradd #1, 8
// +     store %3, i64 %2, align 8
// +     ret
// + }
