// R %srcc --eval %s
program test;

import <cstdio> as *;

proc printb(bool b) {
    printf("%s\n", (if b then "true" else "false").data);
}

proc arith(int a, int b) {
    printf("%zi, %zi\n", a, b);
    printf("%zi\n", a + b);
    printf("%zi\n", a +~ b);

    printf("%zi\n", a - b);
    printf("%zi\n", a -~ b);

    printf("%zi\n", a * b);
    printf("%zi\n", a *~ b);

    printf("%zi\n", a / b);
    printf("%zi\n", a % b);
    printf("%zi\n", a :/ b);
    printf("%zi\n", a :% b);

    printf("%zi\n", a >> b);
    printf("%zi\n", a >>> b);
    printf("%zi\n", a << b);
    printf("%zi\n", a <<< b);

    printf("%zi\n", a & b);
    printf("%zi\n", a | b);

    printb(a < b);
    printb(a <= b);
    printb(a > b);
    printb(a >= b);

    printb(a <: b);
    printb(a <=: b);
    printb(a :> b);
    printb(a :>= b);

    printb(a == b);
    printb(a != b);

    printf("%zi\n", a ** b);
}

proc arith_template($T a, T b) {
    printf("%zi, %zi\n", a, b);
    printf("%zi\n", a + b);
    printf("%zi\n", a +~ b);

    printf("%zi\n", a - b);
    printf("%zi\n", a -~ b);

    printf("%zi\n", a * b);
    printf("%zi\n", a *~ b);

    printf("%zi\n", a / b);
    printf("%zi\n", a % b);
    printf("%zi\n", a :/ b);
    printf("%zi\n", a :% b);

    printf("%zi\n", a >> b);
    printf("%zi\n", a >>> b);
    printf("%zi\n", a << b);
    printf("%zi\n", a <<< b);

    printf("%zi\n", a & b);
    printf("%zi\n", a | b);

    printb(a < b);
    printb(a <= b);
    printb(a > b);
    printb(a >= b);

    printb(a <: b);
    printb(a <=: b);
    printb(a :> b);
    printb(a :>= b);

    printb(a == b);
    printb(a != b);

    printf("%zi\n", a ** b);
}

// * 20, 5
// + 25
// + 25
// + 15
// + 15
// + 100
// + 100
// + 4
// + 0
// + 4
// + 0
// + 0
// + 0
// + 640
// + 640
// + 4
// + 21
// + false
// + false
// + true
// + true
// + false
// + false
// + true
// + true
// + false
// + true
// + 3200000
arith(20, 5);

// + 20, 5
// + 25
// + 25
// + 15
// + 15
// + 100
// + 100
// + 4
// + 0
// + 4
// + 0
// + 0
// + 0
// + 640
// + 640
// + 4
// + 21
// + false
// + false
// + true
// + true
// + false
// + false
// + true
// + true
// + false
// + true
// + 3200000
arith_template(20, 5);
