module;

#include <srcc/Macros.hh>

export module srcc.driver;
import srcc.utils;

export namespace srcc {
class Driver;
enum struct Action : u8;
}

enum struct srcc::Action : srcc::u8 {
    /// Does what youâ€™d expect: compile all input files to
    /// executables and modules and save them to disk.
    Compile,

    /// Print parse tree only and exit.
    Parse,

    /// Print the AST only and exit.
    AST,
};

class srcc::Driver {
    SRCC_DECLARE_HIDDEN_IMPL(Driver);

public:
    /// Create a new driver with default options.
    explicit Driver();

    /// Add a file to the list of files to compile.
    void add_file(std::string_view file_path);

    /// Run compile jobs.
    ///
    /// \return 0 on success, non-zero on failure.
    int run_job(Action action = Action::Compile);

    /// Enable colours.
    void enable_colours(bool enable);
};
