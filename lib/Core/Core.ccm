module;

#include <algorithm>
#include <bit>
#include <expected>
#include <filesystem>
#include <print>
#include <llvm/ADT/IntrusiveRefCntPtr.h>
#include <llvm/Support/Error.h>
#include <llvm/Support/MemoryBuffer.h>
#include <mutex>
#include <srcc/Macros.hh>
#include <string>
#include <string_view>

export module srcc;
export import srcc.utils;

export namespace srcc {
class Context;
class Diagnostic;
class DiagnosticsEngine;
class File;
class StreamingDiagnosticsEngine;

template <typename ErrRetTy>
class DiagsProducer;

struct Location;
struct LocInfo;
struct LocInfoShort;
} // namespace srcc

/// A decoded source location.
struct srcc::LocInfo {
    usz line;
    usz col;
    const char* line_start;
    const char* line_end;
};

/// A short decoded source location.
struct srcc::LocInfoShort {
    usz line;
    usz col;
};

/// A source range in a file.
struct srcc::Location {
    u32 pos{};
    u16 len{};
    u16 file_id{};

    constexpr Location() = default;
    constexpr Location(u32 pos, u16 len, u16 file_id)
        : pos(pos), len(len), file_id(file_id) {}

    /// Create a new location that spans two locations.
    constexpr Location(Location a, Location b) {
        if (a.file_id != b.file_id) return;
        if (not a.is_valid() or not b.is_valid()) return;
        pos = std::min<u32>(a.pos, b.pos);
        len = u16(std::max<u32>(a.pos + a.len, b.pos + b.len) - pos);
    }

    /// Shift a source location to the left.
    [[nodiscard]] constexpr auto operator<<(isz amount) const -> Location {
        Location l = *this;
        if (not is_valid()) return l;
        l.pos = std::min(pos, u32(pos - u32(amount)));
        return l;
    }

    /// Shift a source location to the right.
    [[nodiscard]] constexpr auto operator>>(isz amount) const -> Location {
        Location l = *this;
        l.pos = std::max(pos, u32(pos + u32(amount)));
        return l;
    }

    /// Extend a source location to the left.
    [[nodiscard]] constexpr auto operator<<=(isz amount) const -> Location {
        Location l = *this << amount;
        l.len = std::max(l.len, u16(l.len + amount));
        return l;
    }

    /// Extend a source location to the right.
    [[nodiscard]] constexpr auto operator>>=(isz amount) const -> Location {
        Location l = *this;
        l.len = std::max(l.len, u16(l.len + amount));
        return l;
    }

    /// Contract a source location to the left.
    [[nodiscard]] constexpr auto contract_left(isz amount) const -> Location {
        if (amount > len) return {};
        Location l = *this;
        l.len = u16(l.len - amount);
        return l;
    }

    /// Contract a source location to the right.
    [[nodiscard]] constexpr auto contract_right(isz amount) const -> Location {
        if (amount > len) return {};
        Location l = *this;
        l.pos = u32(l.pos + u32(amount));
        l.len = u16(l.len - amount);
        return l;
    }

    /// Encode a location as a 64-bit number.
    [[nodiscard]] constexpr u64 encode() const { return std::bit_cast<u64>(*this); }

    [[nodiscard]] constexpr bool is_valid() const { return len != 0; }

    /// Seek to a source location.
    [[nodiscard]] auto seek(const Context& ctx) const -> std::optional<LocInfo>;

    /// Seek to a source location, but only return the line and column.
    [[nodiscard]] auto seek_line_column(const Context& ctx) const -> std::optional<LocInfoShort>;

    /// Get the text pointed to by this source location.
    ///
    /// This returns a StringRef instead of a String because the returned
    /// range is almost certainly not null-terminated.
    [[nodiscard]] auto text(const Context& ctx) const -> String;

    /// Decode a source location from a 64-bit number.
    static constexpr auto Decode(u64 loc) -> Location {
        return std::bit_cast<Location>(loc);
    }

private:
    [[nodiscard]] bool seekable(const Context& ctx) const;
};

/// All members of 'Context' are thread-safe.
class srcc::Context {
    SRCC_DECLARE_HIDDEN_IMPL(Context);

public:
    /// Create a new context with default options.
    explicit Context();

    /// Get diagnostics engine.
    [[nodiscard]] auto diags() const -> DiagnosticsEngine&;

    /// Enable or disable coloured output.
    void enable_colours(bool enable);

    /// Get a file by index. Returns nullptr if the index is out of bounds.
    [[nodiscard]] auto file(usz idx) const -> const File*;

    /// Get a file from disk.
    ///
    /// This will load the file the first time it is requested.
    [[nodiscard]] auto get_file(const fs::path& path) -> const File&;

    /// Set the diagnostics engine.
    void set_diags(llvm::IntrusiveRefCntPtr<DiagnosticsEngine> diags);

    /// Whether to enable coloured output.
    [[nodiscard]] bool use_colours() const;
};

/// A diagnostic.
///
/// This holds the data associated with a diagnostic, i.e. the source
/// location, level, and message.
class srcc::Diagnostic {
public:
    /// Diagnostic severity.
    enum struct Level : u8 {
        Note,    ///< Informational note.
        Warning, ///< Warning, but no hard error.
        Error,   ///< Hard error. Program is ill-formed.
        ICE,     ///< Internal compiler error. Usually used for things we don’t support yet.
    };

    Level level;
    Location where;
    std::string msg; // Main diagnostic message.
    std::string extra; // Extra data to print after the location.

    /// Create a diagnostic.
    Diagnostic(Level lvl, Location where, std::string msg, std::string extra = "")
        : level(lvl),
          where(where),
          msg(std::move(msg)),
          extra(std::move(extra)) {}

    /// Create a diagnostic with a format string and arguments.
    template <typename... Args>
    Diagnostic(
        Level lvl,
        Location where,
        std::format_string<Args...> fmt,
        Args&&... args
    ) : Diagnostic{lvl, where, std::format(fmt, std::forward<Args>(args)...)} {}

    /// Get the colour of a diagnostic.
    static constexpr auto Colour(utils::Colours C, Level kind) -> std::string_view {
        using Kind = Level;
        using enum utils::Colour;
        switch (kind) {
            case Kind::ICE: return C(Magenta);
            case Kind::Warning: return C(Yellow);
            case Kind::Note: return C(Green);
            case Kind::Error: return C(Red);
        }
        return C(None);
    }

    /// Get the name of a diagnostic.
    static constexpr auto Name(Level kind) -> std::string_view {
        using Kind = Level;
        switch (kind) {
            case Kind::ICE: return "Internal Compiler Error";
            case Kind::Error: return "Error";
            case Kind::Warning: return "Warning";
            case Kind::Note: return "Note";
        }
        return "<Invalid Diagnostic Level>";
    }
};

/// This class handles dispatching diagnostics. Objects of this
/// type are thread-safe.
class srcc::DiagnosticsEngine : public llvm::RefCountedBase<DiagnosticsEngine> {
    SRCC_IMMOVABLE(DiagnosticsEngine);
    std::mutex mtx;

protected:
    /// The context that owns this engine.
    const Context& ctx;
    std::atomic<bool> error_flag = false;

public:
    using Ptr = llvm::IntrusiveRefCntPtr<DiagnosticsEngine>;
    virtual ~DiagnosticsEngine() = default;
    explicit DiagnosticsEngine(const Context& ctx) : ctx(ctx) {}

    /// How many columns the output we’re printing to has. Returns
    /// 0 if there is no column limit.
    virtual u32 cols() = 0;

    /// Issue a diagnostic.
    template <typename... Args>
    void diag(
        Diagnostic::Level lvl,
        Location where,
        std::format_string<Args...> fmt,
        Args&&... args
    ) {
        report(Diagnostic{lvl, where, std::format(fmt, std::forward<Args>(args)...)});
    }

    /// Emit pending diagnostics.
    virtual void flush() { }

    /// Check whether any diagnostics have been issued.
    [[nodiscard]] bool has_error() const { return error_flag.load(std::memory_order_relaxed); }

    /// Issue a diagnostic.
    void report(Diagnostic&& diag) {
        if (diag.level == Diagnostic::Level::Error or diag.level == Diagnostic::Level::ICE)
            error_flag.store(true, std::memory_order_relaxed);

        // Use a lock to avoid interleaving diagnostics.
        std::unique_lock _{mtx};
        report_impl(std::move(diag));
    }

protected:
    /// Override this to implement the actual reporting.
    virtual void report_impl(Diagnostic&& diag) = 0;
};

/// Diagnostics engine that outputs to a stream.
class srcc::StreamingDiagnosticsEngine final : public DiagnosticsEngine {
    llvm::raw_ostream& stream;

    /// Used to limit how many errors we print before giving up.
    u32 error_limit;
    u32 printed = 0;
    bool has_flushed_backlog = false;

    /// Backlog of diagnostics so we can group notes with errors/warnings.
    SmallVector<Diagnostic, 20> backlog;

    StreamingDiagnosticsEngine(const Context& ctx, u32 error_limit, llvm::raw_ostream& output_stream)
        : DiagnosticsEngine(ctx), stream(output_stream), error_limit(error_limit) {}
    ~StreamingDiagnosticsEngine();

public:
    /// Create a new diagnostic engine.
    [[nodiscard]] static auto Create(
        const Context& ctx,
        u32 error_limit = 0,
        llvm::raw_ostream& output_stream = llvm::errs()
    ) -> Ptr {
        return llvm::IntrusiveRefCntPtr(new StreamingDiagnosticsEngine(ctx, error_limit, output_stream));
    }

    u32 cols() override;
    void flush() override;

private:
    void report_impl(Diagnostic&&) override;
    void EmitDiagnostics();
};

/// Mixin to provide helper functions to issue diagnostics.
template <typename ErrRetTy = void>
class srcc::DiagsProducer {
public:
    template <typename... Args>
    auto Error(this auto& This, Location where, std::format_string<Args...> fmt, Args&&... args) -> ErrRetTy {
        This.Diag(Diagnostic::Level::Error, where, fmt, std::forward<Args>(args)...);
        return ErrRetTy();
    }

    template <typename... Args>
    auto ICE(this auto& This, Location where, std::format_string<Args...> fmt, Args&&... args) -> ErrRetTy {
        This.Diag(Diagnostic::Level::ICE, where, fmt, std::forward<Args>(args)...);
        return ErrRetTy();
    }

    template <typename... Args>
    void Note(this auto& This, Location loc, std::format_string<Args...> fmt, Args&&... args) {
        This.Diag(Diagnostic::Level::Note, loc, fmt, std::forward<Args>(args)...);
    }

    template <typename... Args>
    void Warn(this auto& This, Location loc, std::format_string<Args...> fmt, Args&&... args) {
        This.Diag(Diagnostic::Level::Warning, loc, fmt, std::forward<Args>(args)...);
    }
};

/// A file in the context.
class srcc::File {
    SRCC_IMMOVABLE(File);

public:
    /// Path type used by the file system.
    using Path = fs::path;

private:
    /// Context handle.
    Context& ctx;

    /// The absolute file path.
    Path file_path;

    /// The name of the file as specified on the command line.
    std::string file_name;

    /// The contents of the file.
    std::unique_ptr<llvm::MemoryBuffer> contents;

    /// The id of the file.
    const i32 id;

public:
    /// Get an iterator to the beginning of the file.
    [[nodiscard]] auto begin() const { return contents->getBufferStart(); }

    /// Get the owning context.
    [[nodiscard]] auto context() const -> Context& { return ctx; }

    /// Get the file data.
    [[nodiscard]] auto data() const -> const char* { return contents->getBufferStart(); }

    /// Get an iterator to the end of the file.
    [[nodiscard]] auto end() const { return contents->getBufferEnd(); }

    /// Get the id of this file.
    [[nodiscard]] auto file_id() const { return id; }

    /// Get the short file name.
    [[nodiscard]] auto name() const -> StringRef { return file_name; }

    /// Get the file path.
    [[nodiscard]] auto path() const -> const Path& { return file_path; }

    /// Get the size of the file.
    [[nodiscard]] auto size() const -> isz { return isz(contents->getBufferSize()); }

    /// Get a temporary file path.
    [[nodiscard]] static auto TempPath(StringRef extension) -> Path;

    /// Write to a file on disk.
    [[nodiscard]] static auto Write(
        const void* data,
        usz size,
        const Path& file
    ) -> std::expected<void, std::string>;

    /// Write to a file on disk and terminate on error.
    static void WriteOrDie(void* data, usz size, const Path& file);

private:
    /// The context is the only thing that can create files.
    friend Context;

    /// Construct a file from a name and source.
    explicit File(
        Context& ctx,
        Path path,
        std::string name,
        std::unique_ptr<llvm::MemoryBuffer> contents,
        u16 id
    );

    /// Load a file from disk.
    static auto LoadFileData(const Path& path) -> std::unique_ptr<llvm::MemoryBuffer>;
};
