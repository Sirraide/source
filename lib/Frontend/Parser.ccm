module;

#include <llvm/ADT/ArrayRef.h>
#include <llvm/Support/Allocator.h>
#include <llvm/Support/TrailingObjects.h>
#include <srcc/Macros.hh>

export module srcc.frontend.parser;
import srcc.ast;
import srcc.frontend.token;
import srcc;
import srcc.utils;

export namespace srcc {
class Parser;
class ParsedModule;
class ParsedStmt;
struct LexedTokenStream;
struct ImportedModule;

#define PARSE_TREE_NODE(node) class SRCC_CAT(Parsed, node);
#include "srcc/ParseTree.inc"
} // namespace srcc

/// Parsed representation of a single file. NOT thread-safe.
class srcc::ParsedModule {
    SRCC_IMMOVABLE(ParsedModule);
    friend Parser;
    const File& file;

    /// Allocator used for allocating the parse tree.
    ///
    /// While strings need to stick around for longer, this can be deleted
    /// once we’re done building the AST.
    llvm::BumpPtrAllocator alloc;

public:
    using Ptr = std::unique_ptr<ParsedModule>;

    /// Allocator used for allocating strings.
    std::unique_ptr<llvm::BumpPtrAllocator> string_alloc = std::make_unique<llvm::BumpPtrAllocator>();

    /// Allocator used for integer literals.
    IntegerStorage integers;

    /// Top-level statements.
    std::vector<ParsedStmt*> top_level;

    /// The name of this program or module.
    Location name_loc;
    String name;

    /// Whether this is a program or module.
    Location program_or_module_loc;
    bool is_module = false;

    /// Imported modules.
    struct Import {
        String linkage_name; ///< The name of the module on disk and for linking.
        String import_name;  ///< The name it is imported as.
        Location loc;        ///< The location of the import
    };
    std::vector<Import> imports;

    /// Create a new parse context for a file.
    explicit ParsedModule(const File& file) : file(file) {}

    /// Get the module’s allocator.
    auto allocator() -> llvm::BumpPtrAllocator& { return alloc; }

    /// Get the owning context.
    Context& context() const { return file.context(); }

    /// Dump the contents of the module.
    void dump() const;
};

// ============================================================================
//  Statements
// ============================================================================
/// Root of the parse tree hierarchy.
class srcc::ParsedStmt {
    struct Printer;
    friend Printer;

public:
    enum struct Kind : u8 {
#define PARSE_TREE_LEAF_NODE(node)             node,
#define PARSE_TREE_INHERITANCE_MARKER(m, node) m = node,
#include "srcc/ParseTree.inc"

    };

    const Kind expr_kind;
    Location loc;

protected:
    ParsedStmt(Kind kind, Location loc) : expr_kind{kind}, loc{loc} {}

public:
    // Only allow allocating these in the parser.
    void* operator new(usz) = SRCC_DELETED("Use `new (parser) { ... }` instead");
    void* operator new(usz size, Parser& parser);

    auto kind() const -> Kind { return expr_kind; }

    void dump(const ParsedModule* owner, bool use_colour) const;
    void dump(bool use_colour = false) const;
    void dump_color() const { dump(true); }
    auto dump_as_type(utils::Colours C) -> std::string;
};

// ============================================================================
//  Types
// ============================================================================
class srcc::ParsedBuiltinType final : public ParsedStmt {
public:
    BuiltinType* const ty;

    ParsedBuiltinType(BuiltinType* ty, Location loc)
        : ParsedStmt{Kind::BuiltinType, loc},
          ty{ty} {}

    static bool classof(const ParsedStmt* e) {
        return e->kind() == Kind::BuiltinType;
    }
};

class srcc::ParsedProcType final : public ParsedStmt
    , llvm::TrailingObjects<ParsedProcType, ParsedStmt*> {
    friend TrailingObjects;
    const u32 num_params;
    auto numTrailingObjects(OverloadToken<ParsedStmt*>) -> usz { return num_params; }
    ParsedProcType(ParsedStmt* ret_type, ArrayRef<ParsedStmt*> params, Location loc);

public:
    ParsedStmt* const ret_type;

    static auto Create(
        Parser& parser,
        ParsedStmt* ret_type,
        ArrayRef<ParsedStmt*> params,
        Location loc
    ) -> ParsedProcType*;

    auto param_types() -> ArrayRef<ParsedStmt*> {
        return {getTrailingObjects<ParsedStmt*>(), num_params};
    }

    static bool classof(const ParsedStmt* e) { return e->kind() == Kind::ProcType; }
};

class srcc::ParsedTemplateType final : public ParsedStmt {
public:
    String name;

    ParsedTemplateType(String name, Location loc)
        : ParsedStmt{Kind::TemplateType, loc},
          name{name} {}

    static bool classof(const ParsedStmt* e) {
        return e->kind() == Kind::TemplateType;
    }
};

// ============================================================================
//  Expressions
// ============================================================================
class srcc::ParsedBinaryExpr final : public ParsedStmt {
public:
    Tk op;
    ParsedStmt* lhs;
    ParsedStmt* rhs;

    ParsedBinaryExpr(
        Tk op,
        ParsedStmt* lhs,
        ParsedStmt* rhs,
        Location location
    ) : ParsedStmt{Kind::BinaryExpr, location}, op{op}, lhs{lhs}, rhs{rhs} {}

    static bool classof(const ParsedStmt* e) { return e->kind() == Kind::BinaryExpr; }
};

/// A syntactic block that contains other expressions.
class srcc::ParsedBlockExpr final : public ParsedStmt
    , TrailingObjects<ParsedBlockExpr, ParsedStmt*> {
    friend TrailingObjects;
    const u32 num_stmts;
    auto numTrailingObjects(OverloadToken<ParsedStmt*>) -> usz { return num_stmts; }
    ParsedBlockExpr(ArrayRef<ParsedStmt*> stmts, Location location);

public:
    static auto Create(
        Parser& parser,
        ArrayRef<ParsedStmt*> stmts,
        Location location
    ) -> ParsedBlockExpr*;

    /// Get the statements stored in this block.
    auto stmts() -> ArrayRef<ParsedStmt*> {
        return {getTrailingObjects<ParsedStmt*>(), num_stmts};
    }

    static bool classof(const ParsedStmt* e) {
        return e->kind() == Kind::BlockExpr;
    }
};

/// A call to a function, or anything that syntactically
/// resembles one.
class srcc::ParsedCallExpr final : public ParsedStmt
    , TrailingObjects<ParsedCallExpr, ParsedStmt*> {
    friend TrailingObjects;

public:
    /// The expression that is called.
    ParsedStmt* callee;

private:
    const u32 num_args;

    auto numTrailingObjects(OverloadToken<ParsedStmt*>) -> usz { return num_args; }

    ParsedCallExpr(
        ParsedStmt* callee,
        ArrayRef<ParsedStmt*> args,
        Location location
    );

public:
    static auto Create(
        Parser& parser,
        ParsedStmt* callee,
        ArrayRef<ParsedStmt*> args,
        Location location
    ) -> ParsedCallExpr*;

    /// Get the arguments to the call.
    auto args() -> ArrayRef<ParsedStmt*> {
        return {getTrailingObjects<ParsedStmt*>(), num_args};
    }

    static bool classof(const ParsedStmt* e) { return e->kind() == Kind::CallExpr; }
};

/// A reference to a declaration.
class srcc::ParsedDeclRefExpr final : public ParsedStmt
    , TrailingObjects<ParsedDeclRefExpr, String> {
    friend TrailingObjects;

    u32 num_parts;
    auto numTrailingObjects(OverloadToken<String>) -> usz { return num_parts; }

    ParsedDeclRefExpr(
        ArrayRef<String> names,
        Location location
    );

public:
    static auto Create(
        Parser& parser,
        ArrayRef<String> names,
        Location location
    ) -> ParsedDeclRefExpr*;

    /// Get the parts of the declaration reference.
    auto names() -> ArrayRef<String> { return {getTrailingObjects<String>(), num_parts}; }

    static bool classof(const ParsedStmt* e) { return e->kind() == Kind::DeclRefExpr; }
};

/// A statement to evaluate.
class srcc::ParsedEvalExpr final : public ParsedStmt {
public:
    ParsedStmt* expr;

    ParsedEvalExpr(
        ParsedStmt* expr,
        Location location
    ) : ParsedStmt{Kind::EvalExpr, location}, expr{expr} {}

    static bool classof(const ParsedStmt* e) { return e->kind() == Kind::EvalExpr; }
};

/// A string literal.
class srcc::ParsedStrLitExpr final : public ParsedStmt {
public:
    String value;

    ParsedStrLitExpr(
        String value,
        Location location
    ) : ParsedStmt{Kind::StrLitExpr, location}, value{value} {}

    static bool classof(const ParsedStmt* e) { return e->kind() == Kind::StrLitExpr; }
};

/// An integer literal.
class srcc::ParsedIntLitExpr final : public ParsedStmt {
public:
    StoredInteger storage;

    ParsedIntLitExpr(
        Parser& p,
        APInt value,
        Location location
    );

    static bool classof(const ParsedStmt* e) { return e->kind() == Kind::IntLitExpr; }
};

/// A member access.
class srcc::ParsedMemberExpr final : public ParsedStmt {
public:
    ParsedStmt* base;
    String member;

    ParsedMemberExpr(
        ParsedStmt* base,
        String member,
        Location location
    ) : ParsedStmt{Kind::MemberExpr, location}, base{base}, member{member} {}

    static bool classof(const ParsedStmt* e) { return e->kind() == Kind::MemberExpr; }
};

/// A return from a function.
class srcc::ParsedReturnExpr final : public ParsedStmt {
public:
    const Ptr<ParsedStmt> value;

    ParsedReturnExpr(
        Ptr<ParsedStmt> value,
        Location location
    ) : ParsedStmt{Kind::ReturnExpr, location}, value{std::move(value)} {}

    static bool classof(const ParsedStmt* e) { return e->kind() == Kind::ReturnExpr; }
};

class srcc::ParsedUnaryExpr final : public ParsedStmt {
public:
    Tk op;
    ParsedStmt* arg;
    bool postfix;

    ParsedUnaryExpr(
        Tk op,
        ParsedStmt* arg,
        bool postfix,
        Location location
    ) : ParsedStmt{Kind::UnaryExpr, location}, op{op}, arg{arg}, postfix{postfix} {}

    static bool classof(const ParsedStmt* e) { return e->kind() == Kind::UnaryExpr; }
};

// ============================================================================
//  Declarations
// ============================================================================
/// Base class for declarations.
class srcc::ParsedDecl : public ParsedStmt {
public:
    /// The name of the declaration; may be empty if it is
    /// compiler-generated.
    String name;

protected:
    ParsedDecl(
        Kind kind,
        String name,
        Location location
    ) : ParsedStmt{kind, location}, name{name} {}

public:
    static bool classof(const ParsedStmt* e) {
        return e->kind() >= Kind::Decl$Start and e->kind() <= Kind::Decl$End;
    }
};

class srcc::ParsedLocalDecl final : public ParsedDecl {
public:
    ParsedStmt* type;
    Ptr<ParsedStmt> init;

    ParsedLocalDecl(
        String name,
        ParsedStmt* param_type,
        Location location
    ) : ParsedDecl{Kind::LocalDecl, name, location}, type{param_type} {}

    static bool classof(const ParsedStmt* e) { return e->kind() == Kind::LocalDecl; }
};

/// A procedure declaration.
class srcc::ParsedProcDecl final : public ParsedDecl
    , llvm::TrailingObjects<ParsedProcDecl, ParsedLocalDecl*> {
    friend TrailingObjects;

public:
    /// The body of the procedure.
    ///
    /// This is not present if the procedure is only declared,
    /// not defined.
    ParsedStmt* body;

    /// The type of the procedure.
    ParsedProcType* type;

private:
    auto numTrailingObjects(OverloadToken<ParsedLocalDecl*>) -> usz { return type->param_types().size(); }
    ParsedProcDecl(
        String name,
        ParsedProcType* type,
        ArrayRef<ParsedLocalDecl*> param_decls,
        ParsedStmt* body,
        Location location
    );

public:
    static auto Create(
        Parser& parser,
        String name,
        ParsedProcType* type,
        ArrayRef<ParsedLocalDecl*> param_names,
        ParsedStmt* body,
        Location location
    ) -> ParsedProcDecl*;

    auto params() -> ArrayRef<ParsedLocalDecl*> {
        return {getTrailingObjects<ParsedLocalDecl*>(), type->param_types().size()};
    }

    static bool classof(const ParsedStmt* e) { return e->kind() == Kind::ProcDecl; }
};

// ============================================================================
//  Parser
// ============================================================================
struct srcc::LexedTokenStream {
    llvm::BumpPtrAllocator alloc;
    TokenStream tokens{alloc};
};

class srcc::Parser : DiagsProducer<std::nullptr_t> {
    SRCC_IMMOVABLE(Parser);

public:
    /// Type of the callback used to handle comment tokens.
    using CommentTokenCallback = std::function<void(const Token&)>;

private:
    friend DiagsProducer;
    ParsedModule::Ptr mod;
    TokenStream stream;
    TokenStream::iterator tok;
    Context& ctx;

public:
    /// Parse a file.
    static auto Parse(
        const File& file,
        CommentTokenCallback comment_callback = {}
    ) -> ParsedModule::Ptr;

    /// Read all tokens in a file.
    static auto ReadTokens(
        const File& file,
        CommentTokenCallback comment_callback = {}
    ) -> LexedTokenStream;

    /// Allocate data.
    void* allocate(usz size, usz align) { return mod->allocator().Allocate(size, align); }

    /// Get the module.
    auto module() -> ParsedModule& { return *mod; }

private:
    explicit Parser(const File& file)
        : mod{std::make_unique<ParsedModule>(file)},
          stream{*mod->string_alloc},
          ctx{file.context()} {}

    /// Each of these corresponds to a production in the grammar.
    auto ParseBlock() -> Ptr<ParsedBlockExpr>;
    auto ParseDeclRefExpr() -> Ptr<ParsedDeclRefExpr>;
    auto ParseExpr(int precedence = -1) -> Ptr<ParsedStmt>;
    void ParseFile();
    void ParseHeader();
    void ParseImport();
    auto ParseVarDecl(ParsedStmt* type) -> Ptr<ParsedStmt>;
    void ParsePreamble();
    auto ParseProcDecl() -> Ptr<ParsedProcDecl>;
    auto ParseStmt() -> Ptr<ParsedStmt>;
    auto ParseType() -> Ptr<ParsedStmt>;

    template <typename... Args>
    void Diag(Diagnostic::Level lvl, Location where, std::format_string<Args...> fmt, Args&&... args) {
        ctx.diags().diag(lvl, where, fmt, std::forward<Args>(args)...);
    }

    using DiagsProducer::Error;
    template <typename... Args>
    auto Error(std::format_string<Args...> fmt, Args&&... args) -> std::nullptr_t {
        return Error(tok->location, fmt, std::forward<Args>(args)...);
    }

    /// Consume a token or issue an error.
    bool ConsumeOrError(Tk tk);

    /// Skip up to a token.
    void SkipTo(std::same_as<Tk> auto... tks) {
        while (not At(tks..., Tk::Eof)) ++tok;
    }

    /// Skip up and past a token.
    void SkipPast(std::same_as<Tk> auto... tks) {
        SkipTo(tks...);
        if (not At(Tk::Eof)) ++tok;
    }

    /// Check if we’re at a token.
    bool At(std::same_as<Tk> auto... tks) {
        return ((tok->type == tks) or ...);
    }

    /// Check if we’re at the start of an expression.
    bool AtStartOfExpression();

    /// Consume a token if it is present.
    bool Consume(Tk tk);
    bool Consume(Location& into, Tk tk);

    /// Consume a contextual keyword.
    bool ConsumeContextual(Location& into, StringRef keyword);

    /// Consume a token if we’re at it, and issue an error about it otherwise.
    template <typename... Args>
    bool ExpectAndConsume(Tk t, std::format_string<Args...> fmt, Args&&... args) {
        if (Consume(t)) return true;
        Error(fmt, std::forward<Args>(args)...);
        return false;
    }

    /// Read all tokens from a file.
    static void ReadTokens(TokenStream& s, const File& file, CommentTokenCallback cb);
};
