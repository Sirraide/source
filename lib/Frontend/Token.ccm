module;

#include <llvm/Support/Allocator.h>
#include <llvm/Support/StringSaver.h>
#include <llvm/Support/TrailingObjects.h>
#include <srcc/Macros.hh>
#include <utility>
#include <deque>

export module srcc.frontend.token;
import srcc.utils;
import srcc;

using namespace srcc;
export namespace srcc {
enum struct Tk : u8;
struct Token;
class TokenStream;
auto Spelling(Tk t) -> String;
}

enum struct srcc::Tk : u8 {
    Invalid,
    Eof,
    Identifier,
    TemplateType,
    CXXHeaderName,
    Integer,
    StringLiteral,
    Comment,

    /// Keywords.
    Alias,
    And,
    As,
    AsBang,
    Asm,
    Assert,
    Bool,
    Break,
    Continue,
    CShort,
    Defer,
    Delete,
    Do,
    Dynamic,
    Elif,
    Else,
    Enum,
    Eval,
    Export,
    F32,
    F64,
    Fallthrough,
    False,
    For,
    ForReverse,
    Goto,
    If,
    Import,
    In,
    Init,
    Int,
    IntegerType,
    Is,
    Match,
    NoReturn,
    Not,
    Or,
    Pragma,
    Proc,
    Return,
    Static,
    Struct,
    Then,
    True,
    Try,
    Type,
    Typeof,
    Unreachable,
    Val,
    Var,
    Variant,
    Void,
    While,
    With,
    Xor,

    /// Extension keywords.
    CChar,
    CChar8T,
    CChar16T,
    CChar32T,
    CInt,
    CLong,
    CLongDouble,
    CLongLong,
    CSizeT,
    CWCharT,

    /// Punctuation.
    Semicolon,
    Colon,
    ColonColon,
    Comma,
    LParen,
    RParen,
    LBrack,
    RBrack,
    LBrace,
    RBrace,
    Ellipsis,
    Dot,
    LArrow,
    RArrow,
    RDblArrow,
    Question,

    /// Operators.
    Plus,
    PlusTilde,
    PlusVBar,
    Minus,
    MinusTilde,
    MinusVBar,
    Star,
    StarTilde,
    StarVBar,
    Slash,
    ColonSlash,
    Percent,
    ColonPercent,
    Caret,
    Ampersand,
    VBar,
    Tilde,
    Bang,
    Assign,
    DotDot,
    DotDotLess,
    DotDotEq,
    MinusMinus,
    PlusPlus,
    StarStar,
    SLt,
    SLe,
    SGt,
    SGe,
    ULt,
    ULe,
    UGt,
    UGe,
    EqEq,
    Neq,
    PlusEq,
    PlusTildeEq,
    PlusVBarEq,
    MinusEq,
    MinusTildeEq,
    MinusVBarEq,
    StarEq,
    StarTildeEq,
    StarVBarEq,
    SlashEq,
    PercentEq,
    ShiftLeft,
    ShiftRight,
    ShiftRightLogical,
    ShiftLeftEq,
    ShiftRightEq,
    ShiftRightLogicalEq,
    StarStarEq,
};

/// A token.
struct srcc::Token {
    /// The type of the token.
    Tk type = Tk::Invalid;

    /// Whether this token was produced by backslash-escaping.
    bool artificial = false;

    /// Text that this token references.
    String text{};

    /// Integer value of this token.
    APInt integer{};

    /// Source location of this token.
    Location location{};

    /// Check if this is an end-of-file token.
    [[nodiscard]] auto eof() const -> bool { return type == Tk::Eof; }

    /// Get the source code spelling of this token.
    [[nodiscard]] auto spelling(const Context& ctx) const -> String;

    /// Compare two tokens for equality. This only checks if their
    /// types and values are equal and ignores e.g. whether they are
    /// artificial
    [[nodiscard]] bool operator==(const Token& b);
};

/// This stores and allocates tokens.
class srcc::TokenStream {
    std::deque<Token> tokens;
    llvm::UniqueStringSaver saver;

public:
    using iterator = decltype(tokens)::iterator;

    /// Construct a token stream.
    explicit TokenStream(llvm::BumpPtrAllocator& alloc) : saver(alloc) {}

    /// Allocate a token.
    ///
    /// This returns a stable pointer that may be retained.
    auto allocate() -> Token* { return &tokens.emplace_back(); }

    /// Get the last token.
    [[nodiscard]] auto back() -> Token& { return tokens.back(); }

    /// Get an iterator to the beginning of the token stream.
    [[nodiscard]] auto begin() { return tokens.begin(); }

    /// Get an iterator to the end of the token stream.
    [[nodiscard]] auto end() { return tokens.end(); }

    /// Save a string in the stream.
    ///
    /// \param str The string to store.
    /// \return A stable reference to the stored string.
    auto save(StringRef str) -> String {
        return String::Save(saver, str);
    }

    /// Access a token by index.
    auto operator[](usz idx) -> Token& {
        Assert(idx < tokens.size(), "Token index out of bounds");
        return tokens[idx];
    }

    /// Get the number of tokens in the stream.
    [[nodiscard]] auto size() const -> usz { return tokens.size(); }
};

template <>
struct std::formatter<Tk> : formatter<String> {
    template <typename FormatContext>
    auto format(Tk tk, FormatContext& ctx) const {
        return formatter<String>::format(Spelling(tk), ctx);
    }
};

module :private;
using namespace srcc;

/// Stringify a token type.
auto srcc::Spelling(Tk t) -> String {
    switch (t) {
        case Tk::Invalid: return "<invalid>";
        case Tk::Eof: return "<eof>";
        case Tk::Identifier: return "<identifier>";
        case Tk::TemplateType: return "<template type>";
        case Tk::CXXHeaderName: return "<cxx header name>";
        case Tk::StringLiteral: return "<string literal>";
        case Tk::Integer: return "<integer>";
        case Tk::IntegerType: return "<integer type>";
        case Tk::Comment: return "<comment>";

        case Tk::Alias: return "alias";
        case Tk::And: return "and";
        case Tk::As: return "as";
        case Tk::AsBang: return "as!";
        case Tk::Asm: return "asm";
        case Tk::Assert: return "assert";
        case Tk::Bool: return "bool";
        case Tk::Break: return "break";
        case Tk::Defer: return "defer";
        case Tk::Delete: return "delete";
        case Tk::Do: return "do";
        case Tk::Dynamic: return "dynamic";
        case Tk::Elif: return "elif";
        case Tk::Else: return "else";
        case Tk::Enum: return "enum";
        case Tk::Eval: return "eval";
        case Tk::Export: return "export";
        case Tk::F32: return "f32";
        case Tk::F64: return "f64";
        case Tk::Fallthrough: return "fallthrough";
        case Tk::False: return "false";
        case Tk::For: return "for";
        case Tk::ForReverse: return "for~";
        case Tk::Goto: return "goto";
        case Tk::If: return "if";
        case Tk::In: return "in";
        case Tk::Init: return "init";
        case Tk::Int: return "int";
        case Tk::Import: return "import";
        case Tk::Is: return "is";
        case Tk::Match: return "match";
        case Tk::NoReturn: return "noreturn";
        case Tk::Not: return "not";
        case Tk::Or: return "or";
        case Tk::Pragma: return "pragma";
        case Tk::Proc: return "proc";
        case Tk::Return: return "return";
        case Tk::Static: return "static";
        case Tk::Struct: return "struct";
        case Tk::Then: return "then";
        case Tk::True: return "true";
        case Tk::Try: return "try";
        case Tk::Type: return "type";
        case Tk::Typeof: return "typeof";
        case Tk::Unreachable: return "unreachable";
        case Tk::Val: return "val";
        case Tk::Var: return "var";
        case Tk::Variant: return "variant";
        case Tk::Void: return "void";
        case Tk::While: return "while";
        case Tk::With: return "with";
        case Tk::Xor: return "xor";
        case Tk::CChar8T: return "__srcc_ffi_char8";
        case Tk::CChar16T: return "__srcc_ffi_char16";
        case Tk::CChar32T: return "__srcc_ffi_char32";
        case Tk::CChar: return "__srcc_ffi_char";
        case Tk::CInt: return "__srcc_ffi_int";
        case Tk::CLong: return "__srcc_ffi_long";
        case Tk::CLongDouble: return "__srcc_ffi_longdouble";
        case Tk::CLongLong: return "__srcc_ffi_longlong";
        case Tk::Continue: return "continue";
        case Tk::CShort: return "__srcc_ffi_short";
        case Tk::CSizeT: return "__srcc_ffi_size";
        case Tk::CWCharT: return "__srcc_ffi_wchar";

        case Tk::Semicolon: return ";";
        case Tk::Colon: return ":";
        case Tk::ColonColon: return "::";
        case Tk::ColonSlash: return ":/";
        case Tk::ColonPercent: return ":%";
        case Tk::Comma: return ",";
        case Tk::LParen: return "(";
        case Tk::RParen: return ")";
        case Tk::LBrack: return "[";
        case Tk::RBrack: return "]";
        case Tk::LBrace: return "{";
        case Tk::RBrace: return "}";
        case Tk::Ellipsis: return "...";
        case Tk::Dot: return ".";
        case Tk::LArrow: return "<-";
        case Tk::RArrow: return "->";
        case Tk::RDblArrow: return "=>";
        case Tk::Question: return "?";
        case Tk::Plus: return "+";
        case Tk::PlusTilde: return "+~";
        case Tk::PlusVBar: return "+|";
        case Tk::Minus: return "-";
        case Tk::MinusTilde: return "-~";
        case Tk::MinusVBar: return "-|";
        case Tk::Star: return "*";
        case Tk::StarTilde: return "*~";
        case Tk::StarVBar: return "*|";
        case Tk::Slash: return "/";
        case Tk::Percent: return "%";
        case Tk::Caret: return "^";
        case Tk::Ampersand: return "&";
        case Tk::VBar: return "|";
        case Tk::Tilde: return "~";
        case Tk::Bang: return "!";
        case Tk::Assign: return "=";
        case Tk::DotDot: return "..";
        case Tk::DotDotLess: return "..<";
        case Tk::DotDotEq: return "..=";
        case Tk::MinusMinus: return "--";
        case Tk::PlusPlus: return "++";
        case Tk::StarStar: return "**";
        case Tk::SLt: return "<";
        case Tk::SLe: return "<=";
        case Tk::SGt: return ">";
        case Tk::SGe: return ">=";
        case Tk::ULt: return "<:";
        case Tk::ULe: return "<=:";
        case Tk::UGt: return ":>";
        case Tk::UGe: return ":>=";
        case Tk::EqEq: return "==";
        case Tk::Neq: return "!=";
        case Tk::PlusEq: return "+=";
        case Tk::PlusTildeEq: return "+~=";
        case Tk::PlusVBarEq: return "+|=";
        case Tk::MinusEq: return "-=";
        case Tk::MinusTildeEq: return "-~=";
        case Tk::MinusVBarEq: return "-|=";
        case Tk::StarEq: return "*=";
        case Tk::StarTildeEq: return "*~=";
        case Tk::StarVBarEq: return "*|=";
        case Tk::SlashEq: return "/=";
        case Tk::PercentEq: return "%=";
        case Tk::ShiftLeft: return "<<";
        case Tk::ShiftRight: return ">>";
        case Tk::ShiftRightLogical: return ">>>";
        case Tk::ShiftLeftEq: return "<<=";
        case Tk::ShiftRightEq: return ">>=";
        case Tk::ShiftRightLogicalEq: return ">>>=";
        case Tk::StarStarEq: return "**=";
    }

    Unreachable();
}

auto Token::spelling(const Context& ctx) const -> String {
    switch (type) {
        default: return Spelling(type); // Always spelled the same way.
        case Tk::StringLiteral: return location.text(ctx); // Include quotes.
        case Tk::Identifier: return location.text(ctx); // May be escaped.
        case Tk::TemplateType:
        case Tk::CXXHeaderName:
        case Tk::Integer:
        case Tk::IntegerType:
            return text;
    }
}

bool Token::operator==(const Token& b) {
    if (type != b.type) return false;
    switch (type) {
        case Tk::Identifier:
        case Tk::StringLiteral:
        case Tk::CXXHeaderName:
        case Tk::TemplateType:
            return text == b.text;

        case Tk::Integer:
        case Tk::IntegerType:
            return integer == b.integer;

        /// All these are trivially equal.
        default:
            return true;
    }

    Unreachable();
}
