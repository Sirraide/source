module;

#include <llvm/ADT/ArrayRef.h>
#include <llvm/ADT/TinyPtrVector.h>
#include <srcc/Macros.hh>

export module srcc.frontend.sema;
import srcc;
import srcc.utils;
import srcc.ast;
import srcc.frontend.parser;

export namespace srcc {
class Sema;
}

namespace srcc {
class TemplateInstantiator;
}

class srcc::Sema : DiagsProducer<std::nullptr_t> {
    SRCC_IMMOVABLE(Sema);
    friend DiagsProducer;
    friend TemplateInstantiator;
    class Importer;
    friend Importer;

public:
    using TemplateArguments = DenseMap<TemplateTypeDecl*, TypeBase*>;

private:
    struct ProcScopeInfo {
        SRCC_IMMOVABLE(ProcScopeInfo);
        ProcDecl* proc;
        SmallVector<LocalDecl*> locals;

        ProcScopeInfo(ProcDecl* proc) : proc{proc} {}
    };

    template <typename ScopeInfo = ProcScopeInfo>
    class [[nodiscard]] EnterProcedure {
        SRCC_IMMOVABLE(EnterProcedure);
        Sema& S;
        ScopeInfo info;

    public:
        template <typename... Args>
        explicit EnterProcedure(Sema& S, ProcDecl* proc, Args&&... args)
            : S{S}, info{proc, std::forward<Args>(args)...} {
            S.proc_stack.emplace_back(&info);
        }

        ~EnterProcedure() { S.proc_stack.pop_back(); }
    };

    /// RAII Object to push and pop a scope.
    class [[nodiscard]] EnterScope {
        Sema& S;
        Scope* scope;

    public:
        EnterScope(Sema& S, bool proc_scope = false)
            : S{S} {
            auto sc = std::make_unique<Scope>(S.curr_scope(), proc_scope);
            scope = sc.get();
            S.scope_stack.push_back(scope);
            S.all_scopes.push_back(std::move(sc));
        }

        EnterScope(Sema& S, Scope* scope) : S{S} {
            S.scope_stack.push_back(scope);
        }

        /// Pop the scope if it is still active.
        ~EnterScope() {
            if (scope) S.scope_stack.pop_back();
        }

        /// Not copyable since copying scopes is nonsense.
        EnterScope(const EnterScope&) = delete;
        const EnterScope& operator=(const EnterScope&) = delete;

        /// However, we may want to pass these to functions in some cases
        /// to open a new scope or indicate that they do so.
        EnterScope(EnterScope&& other) : S{other.S}, scope{std::exchange(other.scope, nullptr)} {}
        EnterScope& operator=(EnterScope&& other) {
            Assert(&S == &other.S, "Cannot move scope between semas");
            scope = std::exchange(other.scope, nullptr);
            return *this;
        }

        /// Get the scope.
        auto get() -> Scope* {
            Assert(scope, "Accessing scope after it has been moved");
            return scope;
        }
    };

    struct LookupResult {
        enum struct Reason : u8 {
            /// Lookup was successful.
            Success,

            /// Lookup was ambiguous. This need not be an error if weâ€™re
            /// looking up e.g. function overloads.
            Ambiguous,

            /// The name was not found.
            NotFound,

            /// One of the path segments did not name a scope.
            NonScopeInPath,
        };

        /// The decl(s) that were found, if any.
        llvm::TinyPtrVector<Decl*> decls;

        /// The name we failed to look up, if any. Will be unset
        /// if the lookup was successful.
        String name;

        /// Reason for failure.
        Reason result;

        LookupResult(String name) : name{name}, result{Reason::NotFound} {}
        LookupResult(ArrayRef<Decl*> decls, String name, Reason result) : decls{decls}, name{name}, result{result} {}

        /// Check if this lookup result is a success.
        [[nodiscard]] auto successful() const -> bool { return result == Reason::Success; }
        [[nodiscard]] explicit operator bool() const { return successful(); }

        /// Create an ambiguous lookup result.
        static auto Ambiguous(String name, ArrayRef<Decl*> decls) -> LookupResult { return LookupResult{decls, name, Reason::Ambiguous}; }
        static auto NonScopeInPath(String name, Decl* decl) -> LookupResult { return LookupResult{decl, name, Reason::NonScopeInPath}; }
        static auto Success(Decl* decl) -> LookupResult { return LookupResult{decl, "", Reason::Success}; }
    };

    Context& ctx;
    TranslationUnit::Ptr M;
    ArrayRef<ParsedModule::Ptr> parsed_modules;

    /// All scopes that have been created.
    std::vector<std::unique_ptr<Scope>> all_scopes;

    /// Stack of active procedures.
    SmallVector<ProcScopeInfo*> proc_stack;

    /// Stack of active scopes.
    SmallVector<Scope*> scope_stack;

    /// Map from parsed procedures to their declarations.
    DenseMap<ParsedProcDecl*, ProcDecl*> proc_decl_map;

    /// Map from module names to imported modules.
    StringMap<TranslationUnit*> imported_modules;

    explicit Sema(Context& ctx) : ctx(ctx) {}

public:
    /// Analyse a set of parsed modules and combine them into a single module.
    ///
    /// @return The combined module, or `nullptr` if there was an error.
    [[nodiscard]] static auto Translate(ArrayRef<ParsedModule::Ptr> modules) -> TranslationUnit::Ptr;

    /// Get the context.
    auto context() const -> Context& { return ctx; }

    /// Get the current procedure.
    auto curr_proc() -> ProcScopeInfo& {
        Assert(not proc_stack.empty(), "Procedure stack underflow");
        return *proc_stack.back();
    }

    /// Get the current scope.
    auto curr_scope() -> Scope* { return scope_stack.back(); }

    /// Get the global scope.
    auto global_scope() -> Scope* { return scope_stack.front(); }

private:
    template <typename... Args>
    void Diag(Diagnostic::Level lvl, Location where, std::format_string<Args...> fmt, Args&&... args) {
        ctx.diags().diag(lvl, where, fmt, std::forward<Args>(args)...);
    }

    /// Add a declaration to a scope.
    ///
    /// This correctly handles redeclarations and declarations
    /// with an empty name.
    void AddDeclToScope(Scope* scope, Decl* d);

    /// Adjust a type for use in a variable declaration.
    auto AdjustVariableType(Type ty, Location loc) -> Type;

    /// Create a reference to a declaration.
    auto CreateReference(Decl* d, Location loc) -> Ptr<Expr>;

    /// Add a variable to the current scope and procedure.
    void DeclareLocal(LocalDecl* d);

    /// Perform template deduction.
    auto DeduceType(TemplateTypeDecl* ty, Type param, Type arg) -> Type;

    /// Extract the scope that is the body of a declaration, if it has one.
    auto GetScopeFromDecl(Decl* d) -> Ptr<Scope>;

    /// Instantiate a procedure template.
    auto InstantiateTemplate(
        ProcDecl* proc,
        ProcType* substituted_type,
        TemplateArguments& args
    ) -> Ptr<ProcDecl>;

    /// Import a C++ header as a module.
    auto ImportCXXHeader(Location import_loc, String linkage_name) -> TranslationUnit::Ptr;

    /// Use LookUpName() instead.
    auto LookUpQualifiedName(Scope* in_scope, ArrayRef<String> names) -> LookupResult;

    /// Perform unqualified name lookup.
    auto LookUpUnqualifiedName(
        Scope* in_scope,
        String name,
        bool this_scope_only
    ) -> LookupResult;

    /// Look up a name in a scope.
    ///
    /// Name lookup differs between unqualified and qualified names: for
    /// unqualified names, we look up the name in the scope it was encountered
    /// in, and all of its parent scope.
    ///
    /// For qualified name lookup, we start by performing unqualified lookup
    /// for the first name in the path, except that names of imported modules
    /// are also considered if all else fails. The remaining path segments are
    /// then looked up in the scope of the declaration found by the previous
    /// segment only.
    ///
    /// \param in_scope The scope to start searching in.
    /// \param names The path to look up.
    /// \param loc The location of the lookup.
    /// \param complain Emit a diagnostic if lookup fails.
    auto LookUpName(
        Scope* in_scope,
        ArrayRef<String> names,
        Location loc,
        bool complain = true
    ) -> LookupResult;

    /// Convert an lvalue to an srvalue.
    [[nodiscard]] auto LValueToSRValue(Expr* expr) -> Expr*;

    /// Issue an error about lookup failure.
    void ReportLookupFailure(const LookupResult& result, Location loc);

    /// Substitute types in a procedure template.
    auto SubstituteTemplate(
        ProcDecl* proc_template,
        ArrayRef<TypeLoc> input_types
    ) -> std::pair<Type, TemplateArguments>;

    /// Building AST nodes; called after translation and template instantiation.
    auto BuildBlockExpr(Scope* scope, ArrayRef<Stmt*> stmts, Location loc) -> BlockExpr*;
    auto BuildBuiltinCallExpr(BuiltinCallExpr::Builtin builtin, ArrayRef<Expr*> args, Location call_loc) -> Ptr<BuiltinCallExpr>;
    auto BuildCallExpr(Expr* callee_expr, ArrayRef<Expr*> args, Location loc) -> Ptr<CallExpr>;
    auto BuildEvalExpr(Stmt* arg, Location loc) -> Ptr<Expr>;
    auto BuildLocalDecl(ProcScopeInfo& proc, Type ty, String name, Ptr<Expr> init, Location loc) -> LocalDecl*;
    auto BuildProcBody(ProcDecl* proc, Expr* body) -> Ptr<Expr>;
    auto BuildParamDecl(ProcScopeInfo& proc, Type ty, String name, Location loc) -> ParamDecl*;
    auto BuildReturnExpr(Ptr<Expr> value, Location loc, bool implicit) -> ReturnExpr*;
    auto BuildTypeExpr(Type ty, Location loc) -> TypeExpr*;

    /// Entry point.
    void Translate();

    /// Statements.
    auto TranslateBinaryExpr(ParsedBinaryExpr* parsed) -> Ptr<Expr>;
    auto TranslateBlockExpr(ParsedBlockExpr* parsed) -> Ptr<BlockExpr>;
    auto TranslateCallExpr(ParsedCallExpr* parsed) -> Ptr<Expr>;
    auto TranslateDeclRefExpr(ParsedDeclRefExpr* parsed) -> Ptr<Expr>;
    auto TranslateExpr(ParsedStmt* parsed) -> Ptr<Expr>;
    auto TranslateEvalExpr(ParsedEvalExpr* parsed) -> Ptr<Expr>;
    auto TranslateIntLitExpr(ParsedIntLitExpr* parsed) -> Ptr<Expr>;
    auto TranslateMemberExpr(ParsedMemberExpr* parsed) -> Ptr<Expr>;
    auto TranslateStrLitExpr(ParsedStrLitExpr* parsed) -> Ptr<StrLitExpr>;
    auto TranslateReturnExpr(ParsedReturnExpr* parsed) -> Ptr<Expr>;
    auto TranslateUnaryExpr(ParsedUnaryExpr* parsed) -> Ptr<Expr>;

    /// Declarations.
    auto TranslateEntireDecl(Decl* decl, ParsedDecl* parsed) -> Ptr<Decl>;
    auto TranslateDeclInitial(ParsedDecl* parsed) -> std::optional<Ptr<Decl>>;
    auto TranslateLocalDecl(ParsedLocalDecl* parsed) -> LocalDecl*;
    auto TranslateProc(ProcDecl* decl, ParsedProcDecl* parsed) -> Ptr<ProcDecl>;
    auto TranslateProcBody(ProcDecl* decl, ParsedProcDecl* parsed) -> Ptr<Stmt>;
    auto TranslateProcDecl(ParsedProcDecl* parsed) -> Ptr<Expr>;
    auto TranslateProcDeclInitial(ParsedProcDecl* parsed) -> Ptr<ProcDecl>;
    auto TranslateStmt(ParsedStmt* parsed) -> Ptr<Stmt>;
    auto TranslateStmts(SmallVectorImpl<Stmt*>& stmts, ArrayRef<ParsedStmt*> parsed) -> void;

    /// Types.
    auto TranslateBuiltinType(ParsedBuiltinType* parsed) -> Type;
    auto TranslateNamedType(ParsedDeclRefExpr* parsed) -> Type;
    auto TranslateTemplateType(ParsedTemplateType* parsed) -> Type;
    auto TranslateType(ParsedStmt* stmt) -> Type;

    auto TranslateProcType(
        ParsedProcType* parsed,
        SmallVectorImpl<TemplateTypeDecl*>* ttds = nullptr
    ) -> Type;
};
