module;

#include <llvm/ADT/ArrayRef.h>
#include <llvm/ADT/TinyPtrVector.h>
#include <srcc/Macros.hh>

export module srcc.frontend.sema;
import srcc;
import srcc.utils;
import srcc.ast;
import srcc.frontend.parser;

export namespace srcc {
class Sema;
}

class srcc::Sema : DiagsProducer<std::nullptr_t> {
    SRCC_IMMOVABLE(Sema);
    friend DiagsProducer;
    class Importer;
    friend Importer;
    Context& ctx;
    TranslationUnit::Ptr M;
    ArrayRef<ParsedModule::Ptr> parsed_modules;

    /// All scopes that have been created.
    std::vector<std::unique_ptr<Scope>> all_scopes;

    /// Stack of active procedures.
    SmallVector<ProcDecl*> proc_stack;

    /// Stack of active scopes.
    SmallVector<Scope*> scope_stack;

    /// Map from parsed procedures to their declarations.
    DenseMap<ParsedProcDecl*, ProcDecl*> proc_decl_map;

    /// Map from module names to imported modules.
    StringMap<TranslationUnit*> imported_modules;

    explicit Sema(Context& ctx) : ctx(ctx) {}

public:
    /// Analyse a set of parsed modules and combine them into a single module.
    ///
    /// @return The combined module, or `nullptr` if there was an error.
    [[nodiscard]] static auto Translate(ArrayRef<ParsedModule::Ptr> modules) -> TranslationUnit::Ptr;

    /// Get the context.
    auto context() const -> Context& { return ctx; }

    /// Get the current procedure.
    auto curr_proc() -> ProcDecl* { return proc_stack.empty() ? nullptr : proc_stack.back(); }

    /// Get the current scope.
    auto curr_scope() -> Scope* { return scope_stack.back(); }

    /// Get the global scope.
    auto global_scope() -> Scope* { return scope_stack.front(); }

private:
    /// RAII Object to push and pop a scope.
    class [[nodiscard]] ScopeRAII {
        Sema& S;
        Scope* scope;

    public:
        ScopeRAII(Sema& S, bool proc_scope = false)
            : S{S} {
            auto sc = std::make_unique<Scope>(S.curr_scope(), proc_scope);
            scope = sc.get();
            S.scope_stack.push_back(scope);
            S.all_scopes.push_back(std::move(sc));
        }

        /// Pop the scope if it is still active.
        ~ScopeRAII() {
            if (scope) S.scope_stack.pop_back();
        }

        /// Not copyable since copying scopes is nonsense.
        ScopeRAII(const ScopeRAII&) = delete;
        const ScopeRAII& operator=(const ScopeRAII&) = delete;

        /// However, we may want to pass these to functions in some cases
        /// to open a new scope or indicate that they do so.
        ScopeRAII(ScopeRAII&& other) : S{other.S}, scope{std::exchange(other.scope, nullptr)} {}
        ScopeRAII& operator=(ScopeRAII&& other) {
            Assert(&S == &other.S, "Cannot move scope between semas");
            scope = std::exchange(other.scope, nullptr);
            return *this;
        }

        /// Get the scope.
        auto get() -> Scope* {
            Assert(scope, "Accessing scope after it has been moved");
            return scope;
        }
    };

    /// Entry point.
    void Translate();

    template <typename... Args>
    void Diag(Diagnostic::Level lvl, Location where, std::format_string<Args...> fmt, Args&&... args) {
        ctx.diags().diag(lvl, where, fmt, std::forward<Args>(args)...);
    }

    struct LookupResult {
        enum struct Reason : u8 {
            /// Lookup was successful.
            Success,

            /// Lookup was ambiguous. This need not be an error if weâ€™re
            /// looking up e.g. function overloads.
            Ambiguous,

            /// The name was not found.
            NotFound,

            /// One of the path segments did not name a scope.
            NonScopeInPath,
        };

        /// The decl(s) that were found, if any.
        llvm::TinyPtrVector<Decl*> decls;

        /// The name we failed to look up, if any. Will be unset
        /// if the lookup was successful.
        String name;

        /// Reason for failure.
        Reason result;

        LookupResult(String name) : name{name}, result{Reason::NotFound} {}
        LookupResult(ArrayRef<Decl*> decls, String name, Reason result) : decls{decls}, name{name}, result{result} {}

        /// Check if this lookup result is a success.
        [[nodiscard]] auto successful() const -> bool { return result == Reason::Success; }

        /// Create an ambiguous lookup result.
        static auto Ambiguous(String name, ArrayRef<Decl*> decls) -> LookupResult { return LookupResult{decls, name, Reason::Ambiguous}; }
        static auto NonScopeInPath(String name, Decl* decl) -> LookupResult { return LookupResult{decl, name, Reason::NonScopeInPath}; }
        static auto Success(Decl* decl) -> LookupResult { return LookupResult{decl, "", Reason::Success}; }
    };

    /// Create a reference to a declaration.
    auto CreateReference(Decl* d, Location loc) -> Ptr<Expr>;

    /// Extract the scope that is the body of a declaration, if it has one.
    auto GetScopeFromDecl(Decl* d) -> Ptr<Scope>;

    /// Import a C++ header as a module.
    auto ImportCXXHeader(Location import_loc, String linkage_name) -> TranslationUnit::Ptr;

    /// Use LookUpName() instead.
    auto LookUpQualifiedName(Scope* in_scope, ArrayRef<String> names) -> LookupResult;

    /// Use LookUpName() instead.
    auto LookUpUnqualifiedName(Scope* in_scope, String name, bool this_scope_only) -> LookupResult;

    /// Look up a name in a scope.
    ///
    /// Name lookup differs between unqualified and qualified names: for
    /// unqualified names, we look up the name in the scope it was encountered
    /// in, and all of its parent scope.
    ///
    /// For qualified name lookup, we start by performing unqualified lookup
    /// for the first name in the path, except that names of imported modules
    /// are also considered if all else fails. The remaining path segments are
    /// then looked up in the scope of the declaration found by the previous
    /// segment only.
    ///
    /// \param in_scope The scope to start searching in.
    /// \param names The path to look up.
    /// \param loc The location of the lookup.
    /// \param complain Emit a diagnostic if lookup fails.
    auto LookUpName(
        Scope* in_scope,
        ArrayRef<String> names,
        Location loc,
        bool complain = true
    ) -> LookupResult;

    /// Issue an error about lookup failure.
    void ReportLookupFailure(const LookupResult& result, Location loc);

    /// Building AST nodes; called after translation and template instantiation.
    auto BuildBuiltinCallExpr(BuiltinCallExpr::Builtin builtin, ArrayRef<Expr*> args, Location call_loc) -> Ptr<BuiltinCallExpr>;
    auto BuildCallExpr(Expr* callee, ArrayRef<Expr*> args) -> Ptr<CallExpr>;
    auto BuildEvalExpr(Stmt* arg, Location loc) -> Ptr<Expr>;
    auto BuildProcBody(ProcDecl* proc, Expr* body) -> Ptr<Expr>;

    /// Translation from the parse tree to the AST.
    auto TranslateBlockExpr(ParsedBlockExpr* parsed) -> Ptr<BlockExpr>;
    auto TranslateBuiltinType(ParsedBuiltinType* parsed) -> std::nullptr_t { Todo(); }
    auto TranslateCallExpr(ParsedCallExpr* parsed) -> Ptr<Expr>;
    auto TranslateDeclRefExpr(ParsedDeclRefExpr* parsed) -> Ptr<Expr>;
    auto TranslateEntireDecl(Decl* decl, ParsedDecl* parsed) -> Ptr<Decl>;
    auto TranslateDeclInitial(ParsedDecl* parsed) -> std::optional<Ptr<Decl>>;
    auto TranslateExpr(ParsedStmt* parsed) -> Ptr<Expr>;
    auto TranslateEvalExpr(ParsedEvalExpr* parsed) -> Ptr<Expr>;
    auto TranslateIntLitExpr(ParsedIntLitExpr* parsed) -> std::nullptr_t { Todo(); }
    auto TranslateMemberExpr(ParsedMemberExpr* parsed) -> Ptr<Expr>;
    auto TranslateParamDecl(ParsedParamDecl* parsed) -> std::nullptr_t { Todo(); }
    auto TranslateProc(ProcDecl* decl, ParsedProcDecl* parsed) -> Ptr<ProcDecl>;
    auto TranslateProcBody(ProcDecl* decl, ParsedProcDecl* parsed) -> Ptr<Stmt>;
    auto TranslateProcDecl(ParsedProcDecl* parsed) -> Ptr<Expr>;
    auto TranslateProcDeclInitial(ParsedProcDecl* parsed) -> Ptr<ProcDecl>;
    auto TranslateProcType(ParsedProcType* parsed) -> std::nullptr_t { Todo(); }
    auto TranslateStmt(ParsedStmt* parsed) -> Ptr<Stmt>;
    auto TranslateStmts(SmallVectorImpl<Stmt*>& stmts, ArrayRef<ParsedStmt*> parsed) -> void;
    auto TranslateStrLitExpr(ParsedStrLitExpr* parsed) -> Ptr<StrLitExpr>;
};
