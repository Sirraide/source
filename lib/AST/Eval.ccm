module;

#include <llvm/ADT/PointerIntPair.h>
#include <memory>
#include <optional>
#include <srcc/Macros.hh>
#include <variant>

export module srcc.ast:eval;
import srcc;
import :type;

export namespace srcc {
class Stmt;
class ProcDecl;
class StrLitExpr;
}

export namespace srcc::eval {
class LValue;
class Reference;
class Slice;
class Value;
class Memory;
enum struct LifetimeState : u8;

/// Tag that marks that a Value stores a type.
struct TypeTag {};

/// Attempt to evaluate a statement.
///
/// Callers must check dependence before this is called; attempting
/// to evaluate a dependent statement will assert.
///
/// \param tu Translation unit that the statement belongs to.
/// \param stmt Statement to evaluate.
/// \param complain Whether to emit diagnostics if the statement cannot be evaluated.
/// \return The value of the statement, if it can be evaluated.
auto Evaluate(TranslationUnit& tu, Stmt* stmt, bool complain = true) -> std::optional<Value>;
} // namespace srcc::eval

namespace srcc::eval {
class EvaluationContext;
}

enum struct srcc::eval::LifetimeState : u8 {
    Uninitialised,
    Initialised,
};

/// Memory location.
///
/// This class is actually just effectively a header: the
/// actual memory is stored as trailing data.
class srcc::eval::Memory {
    SRCC_IMMOVABLE(Memory);
    friend EvaluationContext;

    const Type ty;
    Location loc;
    llvm::PointerIntPair<void*, 1, LifetimeState> data_and_state;

public:
    explicit Memory(Type ty, Location loc, void* data)
        : ty{ty},
          loc{loc},
          data_and_state{data, LifetimeState::Uninitialised} {}

    /// Check whether this is (still) alive.
    [[nodiscard]] auto alive() const {
        return data_and_state.getInt() == LifetimeState::Initialised;
    }

    /// Check whether this is not alive anymore.
    [[nodiscard]] auto dead() const { return not alive(); }

    /// End the lifetime of this memory location.
    void destroy();

    /// Start the lifetime of this memory location.
    void init(TranslationUnit& tu);

    /// Get the type of this memory.
    [[nodiscard]] auto type() const -> Type { return ty; }

private:
    [[nodiscard]] auto data() -> void* { return data_and_state.getPointer(); }
    [[nodiscard]] auto data() const -> const void* { return data_and_state.getPointer(); }
};

class srcc::eval::LValue {
public:
    // Base of the lvalue. This is either:
    //     - a string literal;
    //     - stack or heap memory;
    Variant<String, Memory*> base;

    // Whether the lvalue is modifiable.
    bool modifiable{false};

    /// Get the base type of this LValue.
    auto base_type(TranslationUnit& tu) const -> Type;

    /// Print this.
    void dump(bool use_colour = true) const;
};

class srcc::eval::Reference {
public:
    LValue lvalue;
    APInt offset;
};

class srcc::eval::Slice {
public:
    Reference data;
    APInt size;

    Slice(Reference data, APInt size)
        : data(std::move(data)),
          size(std::move(size)) {}
};

/// A compile-time value.
class srcc::eval::Value {
    friend EvaluationContext;
    friend Slice;

    Variant<ProcDecl*, LValue, Slice, Reference, APInt, bool, TypeTag, std::monostate> value{std::monostate{}};
    Type ty{Types::VoidTy};

public:
    Value() = default;
    Value(ProcDecl* proc);
    Value(bool b) : value{b}, ty{Types::BoolTy} {}
    Value(Type ty) : value{TypeTag{}}, ty{ty} {}
    Value(Slice lvalue, Type ty);
    Value(LValue lvalue, Type ty) : value(std::move(lvalue)), ty(ty) {}
    Value(Reference ref, Type ty) : value(std::move(ref)), ty(ty) {}
    Value(APInt val, Type ty) : value(std::move(val)), ty(ty) {}

    /// cast<>() the contained value.
    template <typename Ty>
    auto cast() -> Ty& { return std::get<Ty>(value); }

    /// Print this value.
    void dump(bool use_colour = true) const;
    void dump_colour() const { dump(true); }

    /// Check if the value is empty. This is also used to represent '()'.
    auto empty() const -> bool { return std::holds_alternative<std::monostate>(value); }

    /// dyn_cast<>() the contained value.
    template <typename Ty>
    auto get() const -> const Ty* {
        return std::holds_alternative<Ty>(value) ? &std::get<Ty>(value) : nullptr;
    }

    /// isa<>() on the contained value.
    template <typename Ty>
    auto isa() const -> bool { return std::holds_alternative<Ty>(value); }

    /// Get the type of the value.
    auto type() const -> Type { return ty; }

    /// Get the value category of this value.
    auto value_category() const -> ValueCategory;

    /// Run a visitor over this value.
    template <typename Visitor>
    auto visit(Visitor&& visitor) const -> decltype(auto) {
        return std::visit(std::forward<Visitor>(visitor), value);
    }
};
