// This grammar defines how Source is *parsed*; it does not convey
// any information about the semantics of the language. Operator
// precedence is also omitted.

<file> ::= <preamble> <stmts>

// ============================================================================
//  Preamble
// ============================================================================
//  Notes:
//
//   - IMPORT is a full keyword so the lexer knows the token after it is a
//     cxx-header-name if it starts w/ '<'.
//
//   - "program" and "module" are not because they are literally only keywords
//     if theyâ€™re the first token in the program.
//
<preamble>        ::= <header> { <import> }
<header>          ::= ( "program" | "module" ) <module-name> ";"
<import>          ::= IMPORT CXX-HEADER-NAME AS IDENTIFIER ";"
<module-name>     ::= IDENTIFIER

// ============================================================================
//  Statements
// ============================================================================
<stmts> ::= { <stmt> [ ";" ] | <decl> }
<stmt>  ::= <expr>
          | <decl>
          | <stmt-while>
          | EVAL <stmt>

<stmt-while> ::= WHILE <expr> [ DO ] <stmt>

// ============================================================================
//  Expressions
// ============================================================================
<expr> ::= <expr-assert>
         | <expr-block>
         | <expr-binary>
         | <expr-call>
         | <expr-decl-ref>
         | <expr-eval>
         | <expr-if>
         | <expr-lit>
         | <expr-member>
         | <expr-paren>
         | <expr-prefix>
         | <expr-return>
         | <expr-subscript>

<expr-assert>    ::= ASSERT <expr> [ "," <expr> ]
<expr-binary>    ::= <expr> <binary> <expr>
<expr-block>     ::= "{" <stmts>  "}"
<expr-call>      ::= <expr> "(" [ <call-args> ] ")"
<expr-decl-ref>  ::= IDENTIFIER [ "::" <expr-decl-ref> ]
<expr-eval>      ::= EVAL <expr>
<expr-if>        ::= IF <expr> <if-body> { ELIF <expr> <if-body> } [ ELSE <if-body> ]
<expr-lit>       ::= STRING-LITERAL | INTEGER | TRUE | FALSE
<expr-member>    ::= <expr> "." IDENTIFIER
<expr-paren>     ::= "(" <expr> ")"
<expr-prefix>    ::= <prefix> <expr>
<expr-return>    ::= RETURN [ <expr> ]
<expr-subscript> ::= <expr> "[" <expr> "]" // Only one argument for now.

<call-args> ::= <expr> { "," <expr> } [ "," ]
<prefix> ::= "-" | "+" | "not" | "~"
<if-body> ::= [ THEN ] <stmt>
<binary> ::= // TODO: list all binary operators here.


// ============================================================================
//  Declarations
// ============================================================================
<decl>        ::= <decl-proc> | <decl-var> | <decl-struct> | EXPORT <decl>
<decl-var>    ::= <type> IDENTIFIER [ "=" <expr> ] ";"
<decl-proc>   ::= <signature> <proc-body>
<decl-struct> ::= STRUCT IDENTIFIER "{" { <type> IDENTIFIER ";" } "}"
<signature>   ::= PROC [ IDENTIFIER ] [ <proc-args> ] <proc-attrs> [ "->" <type> ]
<proc-args>   ::= "(" [ <param-decl> { "," <param-decl> } [ "," ] ] ")"
<proc-attrs>  ::= { "native" | "extern" | "nomangle" }
<proc-body>   ::= <expr-block> | "=" <expr> ";" | ";"
<param-decl>  ::= [ <intent> ] <type> [ IDENTIFIER ] | [ <intent> ] <signature>
<intent>      ::= IN | OUT | INOUT | COPY

// ============================================================================
//  Types
// ============================================================================
<type> ::= <type-prim> | TEMPLATE-TYPE | <expr-decl-ref> | <signature> | <type-qualified>
<type-qualified> ::= <type> { <qualifier> }
<qualifier> ::= "[" "]"
<type-prim> ::= BOOL | INT | VOID | VAR | INTEGER_TYPE
