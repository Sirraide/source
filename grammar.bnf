// This grammar defines how Source is *parsed*; it does not convey
// any information about the semantics of the language. Operator
// precedence is also omitted.

<file> ::= <preamble> <stmts>

// ============================================================================
//  Preamble
// ============================================================================
//  Notes:
//
//   - IMPORT is a full keyword so the lexer knows the token after it is a
//     cxx-header-name if it starts w/ '<'.
//
//   - "program" and "module" are not because they are literally only keywords
//     if they’re the first token in the program.
//
<preamble>        ::= <header> { <import> }
<header>          ::= ( "program" | "module" ) <module-name> ";"
<import>          ::= IMPORT CXX-HEADER-NAME AS IDENT ";"
<module-name>     ::= IDENT

// ============================================================================
//  Statements
// ============================================================================
<stmts> ::= { <stmt> }
<stmt>  ::= <expr-braces>
          | <expr-no-braces> ";"
          | <decl>
          | <stmt-while>
          | <stmt-for>
          | <stmt-if>
          | EVAL <stmt>
          | LOOP <stmt>
          | ";"

<stmt-while> ::= WHILE <expr> [ DO ] <stmt>

<stmt-if> ::= [ "#" ] IF <expr> <if-stmt-body> { [ "#" ] ELIF <expr> <if-stmt-body> } [ [ "#" ] ELSE <if-stmt-body> ]
<if-stmt-body> ::= [ THEN ] <stmt>

// Note: The support for trailing commas here was accidental, but I don’t really have a problem w/ it.
<stmt-for> ::= FOR [ <for-vars> IN ] <expr> { "," <expr> } [ "," ] DO <stmt>
<for-vars> ::= <idents> | ENUM IDENT [ "," <idents> ]
<idents>   ::= IDENT { "," IDENT } [ "," ]

// ============================================================================
//  Expressions
// ============================================================================
<expr>           ::= <expr-braces> | <expr-no-braces>
<expr-braces>    ::= <expr-block>
<expr-no-braces> ::= <expr-assert>
                   | <expr-if>
                   | <expr-binary>
                   | <expr-call>
                   | <expr-decl-ref>
                   | <expr-eval>
                   | <expr-lit>
                   | <expr-loop>
                   | <expr-member>
                   | <expr-paren>
                   | <expr-prefix>
                   | <expr-return>
                   | <expr-subscript>
                   | <expr-postfix>

<expr-assert>    ::= [ "#" ] ASSERT <expr> [ "," <expr> ]
<expr-binary>    ::= <expr> <binary> <expr>
<expr-block>     ::= "{" <stmts>  "}"
<expr-call>      ::= <expr> "(" [ <call-args> ] ")"
<expr-decl-ref>  ::= IDENT [ "::" <expr-decl-ref> ]
<expr-eval>      ::= EVAL <expr>
<expr-if>        ::= [ "#" ] IF <expr> <if-expr-body> { [ "#" ] ELIF <expr> <if-expr-body> } [ [ "#" ] ELSE <if-expr-body> ]
<expr-lit>       ::= STRING-LITERAL | INTEGER | TRUE | FALSE
<expr-loop>      ::= LOOP [ <expr> ]
<expr-member>    ::= <expr> "." IDENT
<expr-paren>     ::= "(" <expr> ")"
<expr-prefix>    ::= <prefix> <expr>
<expr-return>    ::= RETURN [ <expr> ]
<expr-subscript> ::= <expr> "[" <expr> "]" // Only one argument for now.
<expr-postfix>   ::= <expr> ( "++" | "--" )

<call-args> ::= <expr> { "," <expr> } [ "," ]
<prefix> ::= "-" | "+" | NOT | "~" | "&" | "^"
<if-expr-body> ::= [ THEN ] <expr>
<binary> ::= // TODO: list all binary operators here.


// ============================================================================
//  Declarations
// ============================================================================
<decl>        ::= <decl-proc> | <decl-var> | <decl-struct> | EXPORT <decl>
<decl-var>    ::= <type> IDENT [ "=" <expr> ] ";"
<decl-proc>   ::= <signature> <proc-body>
<decl-struct> ::= STRUCT IDENT "{" { <type> IDENT ";" } "}"
<signature>   ::= PROC [ IDENT ] [ <proc-args> ] <proc-attrs> [ "->" <type> ]
<proc-args>   ::= "(" [ <param-decl> { "," <param-decl> } [ "," ] ] ")"
<proc-attrs>  ::= { "native" | "extern" | "nomangle" | "variadic" }
<proc-body>   ::= <expr-block> | "=" <expr> ";" | ";"
<param-decl>  ::= [ <intent> ] <type> [ IDENT ] | [ <intent> ] <signature>
<intent>      ::= IN | OUT | INOUT | COPY

// ============================================================================
//  Types
// ============================================================================
<type> ::= <type-prim> | TEMPLATE-TYPE | <expr-decl-ref> | <signature> | <type-qualified> | <type-range>
<type-qualified> ::= <type> { <qualifier> }
<type-range> ::= RANGE "<" <type> ">"
<qualifier> ::= "[" "]" | "^"
<type-prim> ::= BOOL | INT | VOID | VAR | INTEGER_TYPE

// ============================================================================
//  Pragmas
// ============================================================================
// These are handled by the lexer and may thus appear anywhere.
<pragma> ::= <pragma-include>
<pragma-include> ::= PRAGMA "include" STRING-LITERAL
